/*
 * LIN 2.x Low Level LIN FW API
 * Node Configuration and Identification
 *
 * Generated by configuration tool C:\EVWS\_LIBRARY_PLATFORMS\library_platform_mulan2\bin\ldf_nodegen.exe (version 1.4.0)
 *
 * Copyright (C) 2007-2015 Melexis N.V.
 */

#ifndef LIN_DIAG_H_
#define LIN_DIAG_H_


typedef enum {
      respNoResponse = 0x00U
    , respLinProductID      /* answer to "Read by Identifier (0)" request  */

#if defined (HAS_SERIAL_NUMBER_CALLOUT)
    , respSerialNumber      /* answer to "Read by Identifier (1)" request  */
#endif /* HAS_SERIAL_NUMBER_CALLOUT */

    , respNegativeResponse  /* answer to non-supported sub-functions request */

#if defined (HAS_ASSIGN_NAD_SERVICE)
    , respAssignNAD             /* answer to "Assign NAD" optional request */
#endif /* HAS_ASSIGN_NAD_SERVICE */    

#if defined (HAS_CONDITIONAL_CHANGE_NAD_SERVICE)
    , respConditionalChangeNAD  /* answer to "Conditional change NAD" optional request */ 
#endif /* HAS_CONDITIONAL_CHANGE_NAD_SERVICE */

#if LIN_VERSION == 20
    , respPositiveAssignFID  /* answer to "Assign frame id" request (LIN2.0)    */
#elif LIN_VERSION >= 21
    , respPositiveAssignFidRange /* answer to "Assign Frame ID Range" request (LIN2.1) */
#else 
#error "LIN_VERSION not supported"
#endif /* LIN_VERSION */

#if defined(HAS_SAVE_CONFIGURATION_SERVICE)
    , respPositiveSaveConfig     /* answer to "Save Configuration" request (LIN2.1)    */
#endif /* HAS_SAVE_CONFIGURATION_SERVICE */

#if defined (HAS_READ_BY_ID_CALLOUT)
    , respUserDefIdCallout       /* answer to user defined read_by_id request          */
#endif /* HAS_READ_BY_ID_CALLOUT */

} SlaveResponse_t;

#if defined (HAS_READ_BY_ID_CALLOUT)
#define LD_NEGATIVE_RESPONSE ((l_u8)respNegativeResponse)
#define LD_POSITIVE_RESPONSE ((l_u8)respUserDefIdCallout)
#define LD_NO_RESPONSE       ((l_u8)respNoResponse)

extern l_u8 ld_read_by_id_callout (l_u8 id, l_u8 data[5]);
#endif /* HAS_READ_BY_ID_CALLOUT */


#if defined (HAS_SERIAL_NUMBER_CALLOUT)
extern void ld_serial_number_callout (l_u8 data[4]);
#endif /* HAS_SERIAL_NUMBER_CALLOUT */

extern void ml_DiagInit (void);
extern void ml_DiagMasterRequest (void);
extern ml_Status ml_DiagSlaveResponse (void);

extern void ml_DiagClearPendingResponse(void);

#if LIN_VERSION >= 21
extern void mlu_TL_TimeoutStart (void);
#endif


#endif /* LIN_DIAG_H_ */
