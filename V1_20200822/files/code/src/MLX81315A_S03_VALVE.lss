mlx16-gcc (GCC) 3.4.3 / Melexis Mlx16-GCC v1.12.3
Copyright (C) 2004 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


MLX81315A_S03_VALVE.elf:     file format elf32-mlx16-x8

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .mlx4_flash   000014f0  00004000  00004000  00000274  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .mlx4_table   00000088  00005540  00005540  00001764  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .mlx16_vectors 00000098  0000bf68  0000bf68  00006676  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .loader_flags 00000080  0000be80  0000be80  000065d4  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  4 .loader_rst_state 00000002  0000bf66  0000bf66  00006674  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  5 .system_services 00000006  0000bf60  0000bf60  0000666e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .protection_key 00000008  0000bf46  0000bf46  00006654  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .flash_crc    00000002  0000bf4e  0000bf4e  0000665c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .product_no   00000008  0000bf50  0000bf50  0000665e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .app_version  00000004  0000bf58  0000bf58  00006666  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .pltf_version 00000004  0000bf5c  0000bf5c  0000666a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .ramfunc      0000001e  00000740  000055c8  000017ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         00004d4e  000055e8  000055e8  0000180c  2**2
                  CONTENTS, ALLOC, LOAD, CODE
 13 .shared_ram   00000010  00000000  00000000  0000670e  2**0
                  CONTENTS, READONLY
 14 .ram_lin_fixed 00000006  00000010  00000010  00000274  2**1
                  ALLOC
 15 .dp.data      00000024  00000018  0000a336  0000655a  2**1
                  CONTENTS, ALLOC, LOAD, DATA
 16 .dp           000000b0  0000003c  0000a35a  0000657e  2**1
                  ALLOC
 17 .dp.noinit    00000010  000000ec  0000a35a  0000657e  2**1
                  ALLOC
 18 .data         00000056  000000fc  0000a35a  0000657e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
 19 .bss          000001e4  00000152  0000a3b0  000065d4  2**1
                  ALLOC
 20 .bist_stat    00000008  00000336  0000a3b0  000065d4  2**1
                  ALLOC
 21 .debug_abbrev 000028a5  00000000  00000000  0000671e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_info   0000d400  00000000  00000000  00008fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   00007c6e  00000000  00000000  000163c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_frame  000011f4  00000000  00000000  0001e032  2**1
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_pubnames 00001ade  00000000  00000000  0001f226  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_aranges 00000464  00000000  00000000  00020d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_str    00003763  00000000  00000000  00021168  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .comment      00000011  00000000  00000000  000248cb  2**0
                  CONTENTS, READONLY
 29 .debug_ranges 0000000c  00000000  00000000  000248dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .mlx4_flash:

00004000 <__mlx4_flash_start>:
    4000:	a55a      	or	A, dp:0x5a <_g_NvramUser>
    4002:	5aa5      	mov	io:0x25 <_g_e8DegradedMotorRequest>, Y
    4004:	0000      	nop
    4006:	0000      	nop
    4008:	2442      	or	X, #66
    400a:	2442      	or	X, #66
    400c:	243f      	or	X, #63
    400e:	243f      	or	X, #63
    4010:	0000      	nop
    4012:	0000      	nop
    4014:	0000      	nop
    4016:	0000      	nop
    4018:	4100      	mov	dp:0x0 <__dp__>, AL
    401a:	2000      	add	X, #0
    401c:	0000      	nop
    401e:	0000      	nop
    4020:	01e0      	jmp	0x43e2 <__mlx4_flash_start+0x3e2>
    4022:	0003      	jmp	0x402a <__mlx4_flash_start+0x2a>
    4024:	0005      	jmp	0x4030 <__mlx4_flash_start+0x30>
    4026:	0000      	nop
    4028:	4233      	mov	[S-52], AL
    402a:	5f50      	mov	ep:0x50 <_g_u16MicroStepIdx>, X
    402c:	7c6d      	lod	X, #109
    402e:	998a      	subc	AL, dp:0x8a <_g_NvramUser+0x30>
    4030:	140e      	call	0x384e <__io__+0x104e>
    4032:	201a      	add	X, #26
    4034:	2c26      	cmp	X, #38
    4036:	3832      	subc	X, #50
    4038:	0208      	jmp	0x444a <__mlx4_flash_start+0x44a>
    403a:	af52      	cmp	A, ep:0x52 <_g_u16CommutTimerPeriod>
    403c:	6f03      	lod	YH, ep:0x3 <_LinCmnd+0x1>
    403e:	ff35      	xor	Y, ep:0x35 <_g_u8NAD+0x1>
    4040:	e0e0      	add	Y, #-32
    4042:	dba6      	subc	AH, ep:0xa6 <_g_NvramUser+0x4c>
    4044:	0000      	nop
    4046:	0200      	jmp	0x4448 <__mlx4_flash_start+0x448>
    4048:	7da0      	lod	X, dp:0xa0 <_g_NvramUser+0x46>
    404a:	d70a      	and	AH, ep:0xa <__bist_stat_size+0x2>
    404c:	39e4      	subc	X, dp:0xe4 <_ml_driver_mode+0xc>
    404e:	934e      	adc	AL, ep:0x4e <_g_u16CorrectionRatio>
    4050:	d3e0      	adc	AH, ep:0xe0 <_ml_driver_mode+0x8>
    4052:	a497      	or	A, #-105
    4054:	2c1f      	cmp	X, #31
    4056:	5b68      	mov	ep:0x68 <_g_NvramUser+0xe>, Y
    4058:	a81f      	sub	A, #31
    405a:	b47f      	and	A, #127
    405c:	00b2      	jmp	0x41c2 <__mlx4_flash_start+0x1c2>
    405e:	7c50      	lod	X, #80
    4060:	b787      	and	A, ep:0x87 <_g_NvramUser+0x2d>
    4062:	773a      	lod	PC, ep:0x3a <_l_u8StallCountO>
    4064:	b78e      	and	A, ep:0x8e <_g_NvramUser+0x34>
    4066:	773b      	lod	PC, ep:0x3b <_l_u8StallCountA>
    4068:	3790      	and	X, ep:0x90 <_g_NvramUser+0x36>
    406a:	34e9      	and	X, #-23
    406c:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    406e:	b76f      	and	A, ep:0x6f <_g_NvramUser+0x15>
    4070:	773f      	lod	PC, ep:0x3f <__data_dp_end+0x3>
    4072:	4c02 b203 	add	D, #-1291603453
    4076:	b303 
    4078:	8684      	or	AL, io:0x4 <_LinMess>
    407a:	7203      	lod	A, [S-4]
    407c:	4c03      	add	D, ??
    407e:	7303      	lod	A, ep:0x3 <_LinCmnd+0x1>
    4080:	380e      	subc	X, #14
    4082:	3907      	subc	X, dp:0x7 <_LinProtectedID>
    4084:	320a      	adc	X, [S-11]
    4086:	340a      	and	X, #10
    4088:	3eac      	xor	X, io:0x2c <_g_e8ErrorCoil>
    408a:	3b16      	subc	X, ep:0x16 <__dp_noinit_size+0x6>
    408c:	3730      	and	X, ep:0x30 <_l_u8SynchFieldErrorCounter>
    408e:	6193      	lod	AL, dp:0x93 <_g_NvramUser+0x39>
    4090:	b680      	and	A, io:0x0 <__dp__>
    4092:	7273      	lod	A, [S-116]
    4094:	4d3e      	mov	dp:0x3e <__data_dp_end+0x2>, YH
    4096:	490a      	mov	dp:0xa <__bist_stat_size+0x2>, AH
    4098:	7239      	lod	A, [S-58]
    409a:	726f      	lod	A, [S-112]
    409c:	b582      	and	A, dp:0x82 <_g_NvramUser+0x28>
    409e:	714c      	lod	A, dp:0x4c <_l_u8LinInFrameMsgID>
    40a0:	b588      	and	A, dp:0x88 <_g_NvramUser+0x2e>
    40a2:	3790      	and	X, ep:0x90 <_g_NvramUser+0x36>
    40a4:	0000      	nop
    40a6:	0000      	nop
    40a8:	3790      	and	X, ep:0x90 <_g_NvramUser+0x36>
    40aa:	320a      	adc	X, [S-11]
    40ac:	580a      	inc	S, #11
    40ae:	0901      	clrb	io:0x00.1
    40b0:	2080      	add	X, #-128
    40b2:	623a      	lod	AL, [S-59]
    40b4:	7270      	lod	A, [S-113]
    40b6:	b637      	and	A, [S-56]
    40b8:	b373      	adc	A, ep:0x73 <_g_NvramUser+0x19>
    40ba:	bf83      	xor	A, ep:0x83 <_g_NvramUser+0x29>
    40bc:	e783      	or	Y, ep:0x83 <_g_NvramUser+0x29>
    40be:	1101      	call	0x42c2 <__mlx4_flash_start+0x2c2>
    40c0:	20b7      	add	X, #-73
    40c2:	6c03      	lod	YH, #3
    40c4:	206e      	add	X, #110
    40c6:	2066      	add	X, #102
    40c8:	2073      	add	X, #115
    40ca:	2050      	add	X, #80
    40cc:	e680      	or	Y, io:0x0 <__dp__>
    40ce:	1102      	call	0x42d4 <__mlx4_flash_start+0x2d4>
    40d0:	b782      	and	A, ep:0x82 <_g_NvramUser+0x28>
    40d2:	207a      	add	X, #122
    40d4:	a688      	or	A, io:0x8 <__bist_stat_size>
    40d6:	110b      	call	0x42ee <__mlx4_flash_start+0x2ee>
    40d8:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    40da:	207a      	add	X, #122
    40dc:	b270      	adc	A, [S-113]
    40de:	a688      	or	A, io:0x8 <__bist_stat_size>
    40e0:	1106      	call	0x42ee <__mlx4_flash_start+0x2ee>
    40e2:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    40e4:	207a      	add	X, #122
    40e6:	be8c      	xor	A, io:0xc <__bist_stat_size+0x4>
    40e8:	e68c      	or	Y, io:0xc <__bist_stat_size+0x4>
    40ea:	1101      	call	0x42ee <__mlx4_flash_start+0x2ee>
    40ec:	207c      	add	X, #124
    40ee:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    40f0:	7373      	lod	A, ep:0x73 <_g_NvramUser+0x19>
    40f2:	2050      	add	X, #80
    40f4:	7373      	lod	A, ep:0x73 <_g_NvramUser+0x19>
    40f6:	2056      	add	X, #86
    40f8:	b783      	and	A, ep:0x83 <_g_NvramUser+0x29>
    40fa:	7373      	lod	A, ep:0x73 <_g_NvramUser+0x19>
    40fc:	3cc3      	xor	X, #-61
    40fe:	2050      	add	X, #80
    4100:	b384      	adc	A, ep:0x84 <_g_NvramUser+0x2a>
    4102:	b285      	adc	A, io:0x5 <_LinMess+0x1>
    4104:	7380      	lod	A, ep:0x80 <_g_NvramUser+0x26>
    4106:	7334      	lod	A, ep:0x34 <_g_u8NAD>
    4108:	7235      	lod	A, [S-54]
    410a:	7ca7      	lod	X, #-89
    410c:	7d34      	lod	X, dp:0x34 <_g_u8NAD>
    410e:	6c03      	lod	YH, #3
    4110:	20b1      	add	X, #-79
    4112:	20ad      	add	X, #-83
    4114:	20b3      	add	X, #-77
    4116:	20b3      	add	X, #-77
    4118:	20b3      	add	X, #-77
    411a:	20a1      	add	X, #-95
    411c:	20b3      	add	X, #-77
    411e:	20b3      	add	X, #-77
    4120:	20b3      	add	X, #-77
    4122:	20b3      	add	X, #-77
    4124:	20b3      	add	X, #-77
    4126:	20b3      	add	X, #-77
    4128:	20b3      	add	X, #-77
    412a:	20b3      	add	X, #-77
    412c:	20b3      	add	X, #-77
    412e:	2098      	add	X, #-104
    4130:	a682      	or	A, io:0x2 <_LinCmnd>
    4132:	1106      	call	0x4340 <__mlx4_flash_start+0x340>
    4134:	b35f      	adc	A, ep:0x5f <_g_NvramUser+0x5>
    4136:	bf8e      	xor	A, ep:0x8e <_g_NvramUser+0x34>
    4138:	a681      	or	A, io:0x1 <__dp__+0x1>
    413a:	0101      	jmp	0x433e <__mlx4_flash_start+0x33e>
    413c:	f781      	and	Y, ep:0x81 <_g_NvramUser+0x27>
    413e:	735f      	lod	A, ep:0x5f <_g_NvramUser+0x5>
    4140:	20b1      	add	X, #-79
    4142:	e682      	or	Y, io:0x2 <_LinCmnd>
    4144:	110d      	call	0x4360 <__mlx4_flash_start+0x360>
    4146:	b286      	adc	A, io:0x6 <_LinMess2>
    4148:	b35f      	adc	A, ep:0x5f <_g_NvramUser+0x5>
    414a:	f782      	and	Y, ep:0x82 <_g_NvramUser+0x28>
    414c:	e681      	or	Y, io:0x1 <__dp__+0x1>
    414e:	0103      	jmp	0x4356 <__mlx4_flash_start+0x356>
    4150:	bf8d      	xor	A, ep:0x8d <_g_NvramUser+0x33>
    4152:	b680      	and	A, io:0x0 <__dp__>
    4154:	7273      	lod	A, [S-116]
    4156:	735f      	lod	A, ep:0x5f <_g_NvramUser+0x5>
    4158:	20b1      	add	X, #-79
    415a:	e681      	or	Y, io:0x1 <__dp__+0x1>
    415c:	1101      	call	0x4360 <__mlx4_flash_start+0x360>
    415e:	245d      	or	X, #93
    4160:	20b3      	add	X, #-77
    4162:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    4164:	20b4      	add	X, #-76
    4166:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    4168:	7381      	lod	A, ep:0x81 <_g_NvramUser+0x27>
    416a:	5404      	ret	#5
    416c:	2056      	add	X, #86
    416e:	a681      	or	A, io:0x1 <__dp__+0x1>
    4170:	1104      	call	0x437a <__mlx4_flash_start+0x37a>
    4172:	b270      	adc	A, [S-113]
    4174:	a688      	or	A, io:0x8 <__bist_stat_size>
    4176:	1105      	call	0x4382 <__mlx4_flash_start+0x382>
    4178:	2048      	add	X, #72
    417a:	4696      	mov	io:0x16 <__dp_noinit_size+0x6>, YL
    417c:	622e      	lod	AL, [S-47]
    417e:	c581      	or	AH, dp:0x81 <_g_NvramUser+0x27>
    4180:	0101      	jmp	0x4384 <__mlx4_flash_start+0x384>
    4182:	2056      	add	X, #86
    4184:	b139      	adc	A, dp:0x39 <_g_u16StartupDelay+0x1>
    4186:	e14c      	add	Y, dp:0x4c <_l_u8LinInFrameMsgID>
    4188:	1101      	call	0x438c <__mlx4_flash_start+0x38c>
    418a:	20e4      	add	X, #-28
    418c:	4592      	mov	dp:0x92 <_g_NvramUser+0x38>, YL
    418e:	76e5      	jmp	MH
    4190:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    4192:	77e5      	lod	PC, ep:0xe5 <_ml_driver_mode+0xd>
    4194:	4516      	mov	dp:0x16 <__dp_noinit_size+0x6>, YL
    4196:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    4198:	7139      	lod	A, dp:0x39 <_g_u16StartupDelay+0x1>
    419a:	6198      	lod	AL, dp:0x98 <_g_NvramUser+0x3e>
    419c:	e581      	or	Y, dp:0x81 <_g_NvramUser+0x27>
    419e:	110b      	call	0x43b6 <__mlx4_flash_start+0x3b6>
    41a0:	7cd5      	lod	X, #-43
    41a2:	7d08      	lod	X, dp:0x8 <__bist_stat_size>
    41a4:	b208      	adc	A, [S-9]
    41a6:	b309      	adc	A, ep:0x9 <__bist_stat_size+0x1>
    41a8:	734e      	lod	A, ep:0x4e <_g_u16CorrectionRatio>
    41aa:	a783      	or	A, ep:0x83 <_g_NvramUser+0x29>
    41ac:	1105      	call	0x43b8 <__mlx4_flash_start+0x3b8>
    41ae:	bf8c      	xor	A, ep:0x8c <_g_NvramUser+0x32>
    41b0:	f373      	adc	Y, ep:0x73 <_g_NvramUser+0x19>
    41b2:	7373      	lod	A, ep:0x73 <_g_NvramUser+0x19>
    41b4:	724c      	lod	A, [S-77]
    41b6:	2050      	add	X, #80
    41b8:	7271      	lod	A, [S-114]
    41ba:	bf83      	xor	A, ep:0x83 <_g_NvramUser+0x29>
    41bc:	e781      	or	Y, ep:0x81 <_g_NvramUser+0x27>
    41be:	0102      	jmp	0x43c4 <__mlx4_flash_start+0x3c4>
    41c0:	b687      	and	A, io:0x7 <_LinProtectedID>
    41c2:	20da      	add	X, #-38
    41c4:	b686      	and	A, io:0x6 <_LinMess2>
    41c6:	20da      	add	X, #-38
    41c8:	3790      	and	X, ep:0x90 <_g_NvramUser+0x36>
    41ca:	300a      	adc	X, #10
    41cc:	6198      	lod	AL, dp:0x98 <_g_NvramUser+0x3e>
    41ce:	ef80      	cmp	Y, ep:0x80 <_g_NvramUser+0x26>
    41d0:	0103      	jmp	0x43d8 <__mlx4_flash_start+0x3d8>
    41d2:	b684      	and	A, io:0x4 <_LinMess>
    41d4:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    41d6:	2030      	add	X, #48
    41d8:	b24e      	adc	A, [S-79]
    41da:	be83      	xor	A, io:0x3 <_LinCmnd+0x1>
    41dc:	724e      	lod	A, [S-79]
    41de:	6c02      	lod	YH, #2
    41e0:	2108      	add	X, dp:0x8 <__bist_stat_size>
    41e2:	20f4      	add	X, #-12
    41e4:	2102      	add	X, dp:0x2 <_LinCmnd>
    41e6:	2100      	add	X, dp:0x0 <__dp__>
    41e8:	b78b      	and	A, ep:0x8b <_g_NvramUser+0x31>
    41ea:	b584      	and	A, dp:0x84 <_g_NvramUser+0x2a>
    41ec:	b683      	and	A, io:0x3 <_LinCmnd+0x1>
    41ee:	61ae      	lod	AL, dp:0xae <_g_NvramUser+0x54>
    41f0:	b787      	and	A, ep:0x87 <_g_NvramUser+0x2d>
    41f2:	61b7      	lod	AL, dp:0xb7 <__bss_dp_size+0x7>
    41f4:	b783      	and	A, ep:0x83 <_g_NvramUser+0x29>
    41f6:	b582      	and	A, dp:0x82 <_g_NvramUser+0x28>
    41f8:	b681      	and	A, io:0x1 <__dp__+0x1>
    41fa:	61ae      	lod	AL, dp:0xae <_g_NvramUser+0x54>
    41fc:	b783      	and	A, ep:0x83 <_g_NvramUser+0x29>
    41fe:	2110      	add	X, dp:0x10 <__dp_noinit_size>
    4200:	b682      	and	A, io:0x2 <_LinCmnd>
    4202:	724e      	lod	A, [S-79]
    4204:	b78d      	and	A, ep:0x8d <_g_NvramUser+0x33>
    4206:	b582      	and	A, dp:0x82 <_g_NvramUser+0x28>
    4208:	b681      	and	A, io:0x1 <__dp__+0x1>
    420a:	61ae      	lod	AL, dp:0xae <_g_NvramUser+0x54>
    420c:	b783      	and	A, ep:0x83 <_g_NvramUser+0x29>
    420e:	2110      	add	X, dp:0x10 <__dp_noinit_size>
    4210:	b24c      	adc	A, [S-77]
    4212:	7271      	lod	A, [S-114]
    4214:	b78b      	and	A, ep:0x8b <_g_NvramUser+0x31>
    4216:	b584      	and	A, dp:0x84 <_g_NvramUser+0x2a>
    4218:	b681      	and	A, io:0x1 <__dp__+0x1>
    421a:	61ae      	lod	AL, dp:0xae <_g_NvramUser+0x54>
    421c:	b785      	and	A, ep:0x85 <_g_NvramUser+0x2b>
    421e:	61b7      	lod	AL, dp:0xb7 <__bss_dp_size+0x7>
    4220:	b24e      	adc	A, [S-79]
    4222:	b171      	adc	A, dp:0x71 <_g_NvramUser+0x17>
    4224:	61bb      	lod	AL, dp:0xbb <__bss_dp_size+0xb>
    4226:	b584      	and	A, dp:0x84 <_g_NvramUser+0x2a>
    4228:	b56d      	and	A, dp:0x6d <_g_NvramUser+0x13>
    422a:	b685      	and	A, io:0x5 <_LinMess+0x1>
    422c:	b66e      	and	A, [S-111]
    422e:	61bb      	lod	AL, dp:0xbb <__bss_dp_size+0xb>
    4230:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    4232:	b680      	and	A, io:0x0 <__dp__>
    4234:	738b      	lod	A, ep:0x8b <_g_NvramUser+0x31>
    4236:	728a      	lod	A, io:0xa <__bist_stat_size+0x2>
    4238:	b783      	and	A, ep:0x83 <_g_NvramUser+0x29>
    423a:	7388      	lod	A, ep:0x88 <_g_NvramUser+0x2e>
    423c:	7289      	lod	A, io:0x9 <__bist_stat_size+0x1>
    423e:	5408      	ret	#9
    4240:	b273      	adc	A, [S-116]
    4242:	a688      	or	A, io:0x8 <__bist_stat_size>
    4244:	1109      	call	0x4458 <__mlx4_flash_start+0x458>
    4246:	b24e      	adc	A, [S-79]
    4248:	e681      	or	Y, io:0x1 <__dp__+0x1>
    424a:	0103      	jmp	0x4452 <__mlx4_flash_start+0x452>
    424c:	b15f      	adc	A, dp:0x5f <_g_NvramUser+0x5>
    424e:	a582      	or	A, dp:0x82 <_g_NvramUser+0x28>
    4250:	0102      	jmp	0x4456 <__mlx4_flash_start+0x456>
    4252:	b680      	and	A, io:0x0 <__dp__>
    4254:	204a      	add	X, #74
    4256:	2048      	add	X, #72
    4258:	3806      	subc	X, #6
    425a:	380e      	subc	X, #14
    425c:	580c      	inc	S, #13
    425e:	0807      	clrb	dp:0x00.7
    4260:	62e6      	lod	AL, Y
    4262:	b36f      	adc	A, ep:0x6f <_g_NvramUser+0x15>
    4264:	a788      	or	A, ep:0x88 <_g_NvramUser+0x2e>
    4266:	1108      	call	0x4478 <__mlx4_flash_start+0x478>
    4268:	a784      	or	A, ep:0x84 <_g_NvramUser+0x2a>
    426a:	1105      	call	0x4476 <__mlx4_flash_start+0x476>
    426c:	212e      	add	X, dp:0x2e <_g_e8MotorRequest>
    426e:	623a      	lod	AL, [S-59]
    4270:	a784      	or	A, ep:0x84 <_g_NvramUser+0x2a>
    4272:	1101      	call	0x4476 <__mlx4_flash_start+0x476>
    4274:	212e      	add	X, dp:0x2e <_g_e8MotorRequest>
    4276:	2030      	add	X, #48
    4278:	4d3e      	mov	dp:0x3e <__data_dp_end+0x2>, YH
    427a:	490a      	mov	dp:0xa <__bist_stat_size+0x2>, AH
    427c:	b582      	and	A, dp:0x82 <_g_NvramUser+0x28>
    427e:	6223      	lod	AL, [S-36]
    4280:	6198      	lod	AL, dp:0x98 <_g_NvramUser+0x3e>
    4282:	b208      	adc	A, [S-9]
    4284:	b309      	adc	A, ep:0x9 <__bist_stat_size+0x1>
    4286:	bf83      	xor	A, ep:0x83 <_g_NvramUser+0x29>
    4288:	6c03      	lod	YH, #3
    428a:	2155      	add	X, dp:0x55 <_g_u16TargetCommutTimerPeriod+0x1>
    428c:	214a      	add	X, dp:0x4a <_g_DiagResponse+0x6>
    428e:	b688      	and	A, io:0x8 <__bist_stat_size>
    4290:	b581      	and	A, dp:0x81 <_g_NvramUser+0x27>
    4292:	215a      	add	X, dp:0x5a <_g_NvramUser>
    4294:	b586      	and	A, dp:0x86 <_g_NvramUser+0x2c>
    4296:	61a8      	lod	AL, dp:0xa8 <_g_NvramUser+0x4e>
    4298:	b584      	and	A, dp:0x84 <_g_NvramUser+0x2a>
    429a:	b6e5      	and	A, MH
    429c:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    429e:	b7e5      	and	A, ep:0xe5 <_ml_driver_mode+0xd>
    42a0:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    42a2:	76e5      	jmp	MH
    42a4:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    42a6:	77e5      	lod	PC, ep:0xe5 <_ml_driver_mode+0xd>
    42a8:	b686      	and	A, io:0x6 <_LinMess2>
    42aa:	b584      	and	A, dp:0x84 <_g_NvramUser+0x2a>
    42ac:	61a8      	lod	AL, dp:0xa8 <_g_NvramUser+0x4e>
    42ae:	8682      	or	AL, io:0x2 <_LinCmnd>
    42b0:	b582      	and	A, dp:0x82 <_g_NvramUser+0x28>
    42b2:	3e10      	xor	X, [S-17]
    42b4:	724c      	lod	A, [S-77]
    42b6:	7139      	lod	A, dp:0x39 <_g_u16StartupDelay+0x1>
    42b8:	3790      	and	X, ep:0x90 <_g_NvramUser+0x36>
    42ba:	34c0      	and	X, #-64
    42bc:	623a      	lod	AL, [S-59]
    42be:	38b7      	subc	X, #-73
    42c0:	357b      	and	X, dp:0x7b <_g_NvramUser+0x21>
    42c2:	3663      	and	X, [S-100]
    42c4:	7cd3      	lod	X, #-45
    42c6:	7d08      	lod	X, dp:0x8 <__bist_stat_size>
    42c8:	3790      	and	X, ep:0x90 <_g_NvramUser+0x36>
    42ca:	b580      	and	A, dp:0x80 <_g_NvramUser+0x26>
    42cc:	330a      	adc	X, ep:0xa <__bist_stat_size+0x2>
    42ce:	b309      	adc	A, ep:0x9 <__bist_stat_size+0x1>
    42d0:	b208      	adc	A, [S-9]
    42d2:	4716      	mov	ep:0x16 <__dp_noinit_size+0x6>, YL
    42d4:	4616      	mov	[S-23], YL
    42d6:	3561      	and	X, dp:0x61 <_g_NvramUser+0x7>
    42d8:	7208      	lod	A, [S-9]
    42da:	7309      	lod	A, ep:0x9 <__bist_stat_size+0x1>
    42dc:	a581      	or	A, dp:0x81 <_g_NvramUser+0x27>
    42de:	0103      	jmp	0x44e6 <__mlx4_flash_start+0x4e6>
    42e0:	b272      	adc	A, [S-115]
    42e2:	a688      	or	A, io:0x8 <__bist_stat_size>
    42e4:	010a      	jmp	0x44fa <__mlx4_flash_start+0x4fa>
    42e6:	4500      	mov	dp:0x0 <__dp__>, YL
    42e8:	4584      	mov	dp:0x84 <_g_NvramUser+0x2a>, YL
    42ea:	8582      	or	AL, dp:0x82 <_g_NvramUser+0x28>
    42ec:	5802      	inc	S, #3
    42ee:	b739      	and	A, ep:0x39 <_g_u16StartupDelay+0x1>
    42f0:	b638      	and	A, [S-57]
    42f2:	7272      	lod	A, [S-115]
    42f4:	b737      	and	A, ep:0x37 <_g_u8MotorStopDelay>
    42f6:	0004      	jmp	0x4300 <__mlx4_flash_start+0x300>
    42f8:	2167      	add	X, dp:0x67 <_g_NvramUser+0xd>
    42fa:	b685      	and	A, io:0x5 <_LinMess+0x1>
    42fc:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    42fe:	2047      	add	X, #71
    4300:	6217      	lod	AL, [S-24]
    4302:	0007      	jmp	0x4312 <__mlx4_flash_start+0x312>
    4304:	1102      	call	0x450a <__mlx4_flash_start+0x50a>
    4306:	7308      	lod	A, ep:0x8 <__bist_stat_size>
    4308:	7209      	lod	A, [S-10]
    430a:	b208      	adc	A, [S-9]
    430c:	b309      	adc	A, ep:0x9 <__bist_stat_size+0x1>
    430e:	6198      	lod	AL, dp:0x98 <_g_NvramUser+0x3e>
    4310:	2165      	add	X, dp:0x65 <_g_NvramUser+0xb>
    4312:	b16f      	adc	A, dp:0x6f <_g_NvramUser+0x15>
    4314:	bd83      	xor	A, dp:0x83 <_g_NvramUser+0x29>
    4316:	716f      	lod	A, dp:0x6f <_g_NvramUser+0x15>
    4318:	b15f      	adc	A, dp:0x5f <_g_NvramUser+0x5>
    431a:	a582      	or	A, dp:0x82 <_g_NvramUser+0x28>
    431c:	1101      	call	0x4520 <__mlx4_flash_start+0x520>
    431e:	2030      	add	X, #48
    4320:	b785      	and	A, ep:0x85 <_g_NvramUser+0x2b>
    4322:	62d2      	lod	AL, [A++]
    4324:	212e      	add	X, dp:0x2e <_g_e8MotorRequest>
    4326:	38b7      	subc	X, #-73
    4328:	3e18      	xor	X, [S-25]
    432a:	357b      	and	X, dp:0x7b <_g_NvramUser+0x21>
    432c:	367b      	and	X, [S-124]
    432e:	6800      	lod	AH, #0
    4330:	7370      	lod	A, ep:0x70 <_g_NvramUser+0x16>
    4332:	b792      	and	A, ep:0x92 <_g_NvramUser+0x38>
    4334:	d30b      	adc	AH, ep:0xb <__bist_stat_size+0x3>
    4336:	b20a      	adc	A, [S-11]
    4338:	d667      	and	AH, [S-104]
    433a:	720b      	lod	A, [S-12]
    433c:	b76b      	and	A, ep:0x6b <_g_NvramUser+0x11>
    433e:	730a      	lod	A, ep:0xa <__bist_stat_size+0x2>
    4340:	b370      	adc	A, ep:0x70 <_g_NvramUser+0x16>
    4342:	d30b      	adc	AH, ep:0xb <__bist_stat_size+0x3>
    4344:	b20a      	adc	A, [S-11]
    4346:	d667      	and	AH, [S-104]
    4348:	720b      	lod	A, [S-12]
    434a:	b76b      	and	A, ep:0x6b <_g_NvramUser+0x11>
    434c:	730a      	lod	A, ep:0xa <__bist_stat_size+0x2>
    434e:	6800      	lod	AH, #0
    4350:	b7e5      	and	A, ep:0xe5 <_ml_driver_mode+0xd>
    4352:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    4354:	e78f      	or	Y, ep:0x8f <_g_NvramUser+0x35>
    4356:	b7e5      	and	A, ep:0xe5 <_ml_driver_mode+0xd>
    4358:	ef87      	cmp	Y, ep:0x87 <_g_NvramUser+0x2d>
    435a:	6800      	lod	AH, #0
    435c:	7270      	lod	A, [S-113]
    435e:	b6e7      	and	A, R
    4360:	8791      	or	AL, ep:0x91 <_g_NvramUser+0x37>
    4362:	76e7      	jmp	R
    4364:	c791      	or	AH, ep:0x91 <_g_NvramUser+0x37>
    4366:	c781      	or	AH, ep:0x81 <_g_NvramUser+0x27>
    4368:	e370      	add	Y, ep:0x70 <_g_NvramUser+0x16>
    436a:	0109      	jmp	0x457e <__mlx4_flash_start+0x57e>
    436c:	21af      	add	X, dp:0xaf <_g_NvramUser+0x55>
    436e:	b587      	and	A, dp:0x87 <_g_NvramUser+0x2d>
    4370:	b66d      	and	A, [S-110]
    4372:	c581      	or	AH, dp:0x81 <_g_NvramUser+0x27>
    4374:	b56d      	and	A, dp:0x6d <_g_NvramUser+0x13>
    4376:	76e7      	jmp	R
    4378:	c781      	or	AH, ep:0x81 <_g_NvramUser+0x27>
    437a:	75e7      	lod	PC, dp:0xe7 <_ml_driver_mode+0xf>
    437c:	c781      	or	AH, ep:0x81 <_g_NvramUser+0x27>
    437e:	6800      	lod	AH, #0
    4380:	b140      	adc	A, dp:0x40 <__data_dp_end+0x4>
    4382:	814e      	add	AL, dp:0x4e <_g_u16CorrectionRatio>
    4384:	7140      	lod	A, dp:0x40 <__data_dp_end+0x4>
    4386:	b141      	adc	A, dp:0x41 <__data_dp_end+0x5>
    4388:	894f      	sub	AL, dp:0x4f <_g_u16CorrectionRatio+0x1>
    438a:	7141      	lod	A, dp:0x41 <__data_dp_end+0x5>
    438c:	b142      	adc	A, dp:0x42 <__data_dp_end+0x6>
    438e:	8d80      	cmp	AL, dp:0x80 <_g_NvramUser+0x26>
    4390:	7142      	lod	A, dp:0x42 <__data_dp_end+0x6>
    4392:	b143      	adc	A, dp:0x43 <__data_dp_end+0x7>
    4394:	8d80      	cmp	AL, dp:0x80 <_g_NvramUser+0x26>
    4396:	7143      	lod	A, dp:0x43 <__data_dp_end+0x7>
    4398:	b144      	adc	A, dp:0x44 <_g_DiagResponse>
    439a:	8d80      	cmp	AL, dp:0x80 <_g_NvramUser+0x26>
    439c:	7144      	lod	A, dp:0x44 <_g_DiagResponse>
    439e:	6800      	lod	AH, #0
    43a0:	b154      	adc	A, dp:0x54 <_g_u16TargetCommutTimerPeriod>
    43a2:	814e      	add	AL, dp:0x4e <_g_u16CorrectionRatio>
    43a4:	7154      	lod	A, dp:0x54 <_g_u16TargetCommutTimerPeriod>
    43a6:	b155      	adc	A, dp:0x55 <_g_u16TargetCommutTimerPeriod+0x1>
    43a8:	894f      	sub	AL, dp:0x4f <_g_u16CorrectionRatio+0x1>
    43aa:	7155      	lod	A, dp:0x55 <_g_u16TargetCommutTimerPeriod+0x1>
    43ac:	b156      	adc	A, dp:0x56 <__data_size>
    43ae:	8d80      	cmp	AL, dp:0x80 <_g_NvramUser+0x26>
    43b0:	7156      	lod	A, dp:0x56 <__data_size>
    43b2:	b157      	adc	A, dp:0x57 <__data_size+0x1>
    43b4:	8d80      	cmp	AL, dp:0x80 <_g_NvramUser+0x26>
    43b6:	7157      	lod	A, dp:0x57 <__data_size+0x1>
    43b8:	6800      	lod	AH, #0
    43ba:	b34e      	adc	A, ep:0x4e <_g_u16CorrectionRatio>
    43bc:	b24f      	adc	A, [S-80]
    43be:	b15a      	adc	A, dp:0x5a <_g_NvramUser>
    43c0:	e349      	add	Y, ep:0x49 <_g_DiagResponse+0x5>
    43c2:	ea4a      	sub	Y, [S-75]
    43c4:	e94b      	sub	Y, dp:0x4b <_g_DiagResponse+0x7>
    43c6:	1003      	call	0x43ce <__mlx4_flash_start+0x3ce>
    43c8:	7349      	lod	A, ep:0x49 <_g_DiagResponse+0x5>
    43ca:	724a      	lod	A, [S-75]
    43cc:	714b      	lod	A, dp:0x4b <_g_DiagResponse+0x7>
    43ce:	e346      	add	Y, ep:0x46 <_g_DiagResponse+0x2>
    43d0:	ea47      	sub	Y, [S-72]
    43d2:	e948      	sub	Y, dp:0x48 <_g_DiagResponse+0x4>
    43d4:	0003      	jmp	0x43dc <__mlx4_flash_start+0x3dc>
    43d6:	7346      	lod	A, ep:0x46 <_g_DiagResponse+0x2>
    43d8:	7247      	lod	A, [S-72]
    43da:	7148      	lod	A, dp:0x48 <_g_DiagResponse+0x4>
    43dc:	e684      	or	Y, io:0x4 <_LinMess>
    43de:	ed80      	cmp	Y, dp:0x80 <_g_NvramUser+0x26>
    43e0:	0009      	jmp	0x43f4 <__mlx4_flash_start+0x3f4>
    43e2:	8350      	add	AL, ep:0x50 <_g_u16MicroStepIdx>
    43e4:	8a51      	sub	AL, [S-82]
    43e6:	8952      	sub	AL, dp:0x52 <_g_u16CommutTimerPeriod>
    43e8:	7350      	lod	A, ep:0x50 <_g_u16MicroStepIdx>
    43ea:	7251      	lod	A, [S-82]
    43ec:	7152      	lod	A, dp:0x52 <_g_u16CommutTimerPeriod>
    43ee:	b353      	adc	A, ep:0x53 <_g_u16CommutTimerPeriod+0x1>
    43f0:	8f80      	cmp	AL, ep:0x80 <_g_NvramUser+0x26>
    43f2:	7353      	lod	A, ep:0x53 <_g_u16CommutTimerPeriod+0x1>
    43f4:	6800      	lod	AH, #0
    43f6:	b157      	adc	A, dp:0x57 <__data_size+0x1>
    43f8:	4510      	mov	dp:0x10 <__dp_noinit_size>, YL
    43fa:	7157      	lod	A, dp:0x57 <__data_size+0x1>
    43fc:	b156      	adc	A, dp:0x56 <__data_size>
    43fe:	4516      	mov	dp:0x16 <__dp_noinit_size+0x6>, YL
    4400:	7156      	lod	A, dp:0x56 <__data_size>
    4402:	b155      	adc	A, dp:0x55 <_g_u16TargetCommutTimerPeriod+0x1>
    4404:	4516      	mov	dp:0x16 <__dp_noinit_size+0x6>, YL
    4406:	7155      	lod	A, dp:0x55 <_g_u16TargetCommutTimerPeriod+0x1>
    4408:	b154      	adc	A, dp:0x54 <_g_u16TargetCommutTimerPeriod>
    440a:	4516      	mov	dp:0x16 <__dp_noinit_size+0x6>, YL
    440c:	7154      	lod	A, dp:0x54 <_g_u16TargetCommutTimerPeriod>
    440e:	b144      	adc	A, dp:0x44 <_g_DiagResponse>
    4410:	4510      	mov	dp:0x10 <__dp_noinit_size>, YL
    4412:	7144      	lod	A, dp:0x44 <_g_DiagResponse>
    4414:	b143      	adc	A, dp:0x43 <__data_dp_end+0x7>
    4416:	4516      	mov	dp:0x16 <__dp_noinit_size+0x6>, YL
    4418:	7143      	lod	A, dp:0x43 <__data_dp_end+0x7>
    441a:	b142      	adc	A, dp:0x42 <__data_dp_end+0x6>
    441c:	4516      	mov	dp:0x16 <__dp_noinit_size+0x6>, YL
    441e:	7142      	lod	A, dp:0x42 <__data_dp_end+0x6>
    4420:	b141      	adc	A, dp:0x41 <__data_dp_end+0x5>
    4422:	4516      	mov	dp:0x16 <__dp_noinit_size+0x6>, YL
    4424:	7141      	lod	A, dp:0x41 <__data_dp_end+0x5>
    4426:	b140      	adc	A, dp:0x40 <__data_dp_end+0x4>
    4428:	4516      	mov	dp:0x16 <__dp_noinit_size+0x6>, YL
    442a:	7140      	lod	A, dp:0x40 <__data_dp_end+0x4>
    442c:	6800      	lod	AH, #0
    442e:	b139      	adc	A, dp:0x39 <_g_u16StartupDelay+0x1>
    4430:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    4432:	7139      	lod	A, dp:0x39 <_g_u16StartupDelay+0x1>
    4434:	e14c      	add	Y, dp:0x4c <_l_u8LinInFrameMsgID>
    4436:	0006      	jmp	0x4444 <__mlx4_flash_start+0x444>
    4438:	0102      	jmp	0x463e <__mlx4_flash_start+0x63e>
    443a:	4050      	jmp	fp2:0x80
    443c:	222a      	add	X, [S-43]
    443e:	b20a      	adc	A, [S-11]
    4440:	b30b      	adc	A, ep:0xb <__bist_stat_size+0x3>
    4442:	2226      	add	X, [S-39]
    4444:	4592      	mov	dp:0x92 <_g_NvramUser+0x38>, YL
    4446:	b6e5      	and	A, MH
    4448:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    444a:	b7e5      	and	A, ep:0xe5 <_ml_driver_mode+0xd>
    444c:	7234      	lod	A, [S-53]
    444e:	7335      	lod	A, ep:0x35 <_g_u8NAD+0x1>
    4450:	7208      	lod	A, [S-9]
    4452:	7309      	lod	A, ep:0x9 <__bist_stat_size+0x1>
    4454:	6800      	lod	AH, #0
    4456:	3e60      	xor	X, [S-97]
    4458:	3e90      	xor	X, io:0x10 <__dp_noinit_size>
    445a:	6800      	lod	AH, #0
    445c:	b309      	adc	A, ep:0x9 <__bist_stat_size+0x1>
    445e:	b208      	adc	A, [S-9]
    4460:	4716      	mov	ep:0x16 <__dp_noinit_size+0x6>, YL
    4462:	4616      	mov	[S-23], YL
    4464:	2228      	add	X, [S-41]
    4466:	820a      	add	AL, [S-11]
    4468:	8b0b      	sub	AL, ep:0xb <__bist_stat_size+0x3>
    446a:	8e80      	cmp	AL, io:0x0 <__dp__>
    446c:	8f80      	cmp	AL, ep:0x80 <_g_NvramUser+0x26>
    446e:	720a      	lod	A, [S-11]
    4470:	730b      	lod	A, ep:0xb <__bist_stat_size+0x3>
    4472:	6800      	lod	AH, #0
    4474:	b739      	and	A, ep:0x39 <_g_u16StartupDelay+0x1>
    4476:	b638      	and	A, [S-57]
    4478:	6800      	lod	AH, #0
    447a:	b53e      	and	A, dp:0x3e <__data_dp_end+0x2>
    447c:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    447e:	753e      	lod	PC, dp:0x3e <__data_dp_end+0x2>
    4480:	6800      	lod	AH, #0
    4482:	b330      	adc	A, ep:0x30 <_l_u8SynchFieldErrorCounter>
    4484:	b231      	adc	A, [S-50]
    4486:	8781      	or	AL, ep:0x81 <_g_NvramUser+0x27>
    4488:	8e80      	cmp	AL, io:0x0 <__dp__>
    448a:	7330      	lod	A, ep:0x30 <_l_u8SynchFieldErrorCounter>
    448c:	7231      	lod	A, [S-50]
    448e:	e336      	add	Y, ep:0x36 <_l_u8VTIdx>
    4490:	ea37      	sub	Y, [S-56]
    4492:	6800      	lod	AH, #0
    4494:	0009      	jmp	0x44a8 <__mlx4_flash_start+0x4a8>
    4496:	b340      	adc	A, ep:0x40 <__data_dp_end+0x4>
    4498:	8302      	add	AL, ep:0x2 <_LinCmnd>
    449a:	7340      	lod	A, ep:0x40 <__data_dp_end+0x4>
    449c:	b341      	adc	A, ep:0x41 <__data_dp_end+0x5>
    449e:	8b03      	sub	AL, ep:0x3 <_LinCmnd+0x1>
    44a0:	7341      	lod	A, ep:0x41 <__data_dp_end+0x5>
    44a2:	b342      	adc	A, ep:0x42 <__data_dp_end+0x6>
    44a4:	8f80      	cmp	AL, ep:0x80 <_g_NvramUser+0x26>
    44a6:	2257      	add	X, [S-88]
    44a8:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    44aa:	7340      	lod	A, ep:0x40 <__data_dp_end+0x4>
    44ac:	7341      	lod	A, ep:0x41 <__data_dp_end+0x5>
    44ae:	7342      	lod	A, ep:0x42 <__data_dp_end+0x6>
    44b0:	6800      	lod	AH, #0
    44b2:	b354      	adc	A, ep:0x54 <_g_u16TargetCommutTimerPeriod>
    44b4:	b255      	adc	A, [S-86]
    44b6:	8302      	add	AL, ep:0x2 <_LinCmnd>
    44b8:	8a03      	sub	AL, [S-4]
    44ba:	7354      	lod	A, ep:0x54 <_g_u16TargetCommutTimerPeriod>
    44bc:	7255      	lod	A, [S-86]
    44be:	b356      	adc	A, ep:0x56 <__data_size>
    44c0:	b257      	adc	A, [S-88]
    44c2:	8f80      	cmp	AL, ep:0x80 <_g_NvramUser+0x26>
    44c4:	8e80      	cmp	AL, io:0x0 <__dp__>
    44c6:	7356      	lod	A, ep:0x56 <__data_size>
    44c8:	7257      	lod	A, [S-88]
    44ca:	6800      	lod	AH, #0
    44cc:	b354      	adc	A, ep:0x54 <_g_u16TargetCommutTimerPeriod>
    44ce:	b255      	adc	A, [S-86]
    44d0:	e330      	add	Y, ep:0x30 <_l_u8SynchFieldErrorCounter>
    44d2:	ea31      	sub	Y, [S-50]
    44d4:	b356      	adc	A, ep:0x56 <__data_size>
    44d6:	b257      	adc	A, [S-88]
    44d8:	eb32      	sub	Y, ep:0x32 <_l_u8ActDirection>
    44da:	ea33      	sub	Y, [S-52]
    44dc:	6800      	lod	AH, #0
    44de:	b726      	and	A, ep:0x26 <_g_e8ErrorOverTemperature>
    44e0:	bf8f      	xor	A, ep:0x8f <_g_NvramUser+0x35>
    44e2:	4040      	jmp	fp2:0x00
    44e4:	0108      	jmp	0x46f6 <__mlx4_flash_start+0x6f6>
    44e6:	3cc3      	xor	X, #-61
    44e8:	b782      	and	A, ep:0x82 <_g_NvramUser+0x28>
    44ea:	b75f      	and	A, ep:0x5f <_g_NvramUser+0x5>
    44ec:	833c      	add	AL, ep:0x3c <__data_dp_end>
    44ee:	733c      	lod	A, ep:0x3c <__data_dp_end>
    44f0:	b33d      	adc	A, ep:0x3d <__data_dp_end+0x1>
    44f2:	8f80      	cmp	AL, ep:0x80 <_g_NvramUser+0x26>
    44f4:	733d      	lod	A, ep:0x3d <__data_dp_end+0x1>
    44f6:	6800      	lod	AH, #0
    44f8:	b726      	and	A, ep:0x26 <_g_e8ErrorOverTemperature>
    44fa:	a78f      	or	A, ep:0x8f <_g_NvramUser+0x35>
    44fc:	0101      	jmp	0x4700 <__mlx4_flash_start+0x700>
    44fe:	3cc3      	xor	X, #-61
    4500:	6800      	lod	AH, #0
    4502:	2939      	sub	X, dp:0x39 <_g_u16StartupDelay+0x1>
    4504:	4d3e      	mov	dp:0x3e <__data_dp_end+0x2>, YH
    4506:	493c      	mov	dp:0x3c <__data_dp_end>, AH
    4508:	b681      	and	A, io:0x1 <__dp__+0x1>
    450a:	b75e      	and	A, ep:0x5e <_g_NvramUser+0x4>
    450c:	b683      	and	A, io:0x3 <_LinCmnd+0x1>
    450e:	77bc      	lod	PC, ep:0xbc <__bss_dp_size+0xc>
    4510:	b680      	and	A, io:0x0 <__dp__>
    4512:	b75e      	and	A, ep:0x5e <_g_NvramUser+0x4>
    4514:	b682      	and	A, io:0x2 <_LinCmnd>
    4516:	77bc      	lod	PC, ep:0xbc <__bss_dp_size+0xc>
    4518:	3b33      	subc	X, ep:0x33 <_g_u8SAE_SendErrorState>
    451a:	6800      	lod	AH, #0
    451c:	3b12      	subc	X, ep:0x12 <__dp_noinit_size+0x2>
    451e:	b726      	and	A, ep:0x26 <_g_e8ErrorOverTemperature>
    4520:	b787      	and	A, ep:0x87 <_g_NvramUser+0x2d>
    4522:	b682      	and	A, io:0x2 <_LinCmnd>
    4524:	bfbc      	xor	A, ep:0xbc <__bss_dp_size+0xc>
    4526:	77bc      	lod	PC, ep:0xbc <__bss_dp_size+0xc>
    4528:	6800      	lod	AH, #0
    452a:	b301      	adc	A, ep:0x1 <__dp__+0x1>
    452c:	e68f      	or	Y, io:0xf <__bist_stat_size+0x7>
    452e:	1106      	call	0x473c <__mlx4_flash_start+0x73c>
    4530:	e781      	or	Y, ep:0x81 <_g_NvramUser+0x27>
    4532:	1108      	call	0x4744 <__mlx4_flash_start+0x744>
    4534:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    4536:	7381      	lod	A, ep:0x81 <_g_NvramUser+0x27>
    4538:	5404      	ret	#5
    453a:	202f      	add	X, #47
    453c:	e78e      	or	Y, ep:0x8e <_g_NvramUser+0x34>
    453e:	0102      	jmp	0x4744 <__mlx4_flash_start+0x744>
    4540:	a752      	or	A, ep:0x52 <_g_u16CommutTimerPeriod>
    4542:	1104      	call	0x474c <__mlx4_flash_start+0x74c>
    4544:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    4546:	7381      	lod	A, ep:0x81 <_g_NvramUser+0x27>
    4548:	5404      	ret	#5
    454a:	6800      	lod	AH, #0
    454c:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    454e:	7381      	lod	A, ep:0x81 <_g_NvramUser+0x27>
    4550:	5404      	ret	#5
    4552:	e684      	or	Y, io:0x4 <_LinMess>
    4554:	1102      	call	0x475a <__mlx4_flash_start+0x75a>
    4556:	b582      	and	A, dp:0x82 <_g_NvramUser+0x28>
    4558:	29d4      	sub	X, dp:0xd4 <_LIN_nad>
    455a:	7201      	lod	A, [S-2]
    455c:	e682      	or	Y, io:0x2 <_LinCmnd>
    455e:	1101      	call	0x4762 <__mlx4_flash_start+0x762>
    4560:	248f      	or	X, #-113
    4562:	e688      	or	Y, io:0x8 <__bist_stat_size>
    4564:	1101      	call	0x4768 <__mlx4_flash_start+0x768>
    4566:	2967      	sub	X, dp:0x67 <_g_NvramUser+0xd>
    4568:	2487      	or	X, #-121
    456a:	b35e      	adc	A, ep:0x5e <_g_NvramUser+0x4>
    456c:	bf8d      	xor	A, ep:0x8d <_g_NvramUser+0x33>
    456e:	735e      	lod	A, ep:0x5e <_g_NvramUser+0x4>
    4570:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    4572:	736f      	lod	A, ep:0x6f <_g_NvramUser+0x15>
    4574:	b782      	and	A, ep:0x82 <_g_NvramUser+0x28>
    4576:	22d2      	add	X, [A++]
    4578:	0b04      	setb	io:0x00.4
    457a:	b35e      	adc	A, ep:0x5e <_g_NvramUser+0x4>
    457c:	f788      	and	Y, ep:0x88 <_g_NvramUser+0x2e>
    457e:	735e      	lod	A, ep:0x5e <_g_NvramUser+0x4>
    4580:	22e5      	add	X, MH
    4582:	b10c      	adc	A, dp:0xc <__bist_stat_size+0x4>
    4584:	b20d      	adc	A, [S-14]
    4586:	7238      	lod	A, [S-57]
    4588:	b202      	adc	A, [S-3]
    458a:	728c      	lod	A, io:0xc <__bist_stat_size+0x4>
    458c:	b203      	adc	A, [S-4]
    458e:	728d      	lod	A, io:0xd <__bist_stat_size+0x5>
    4590:	b63e      	and	A, [S-63]
    4592:	22d7      	.word	0x22d7
    4594:	b101      	adc	A, dp:0x1 <__dp__+0x1>
    4596:	7201      	lod	A, [S-2]
    4598:	7338      	lod	A, ep:0x38 <_g_u16StartupDelay>
    459a:	b365      	adc	A, ep:0x65 <_g_NvramUser+0xb>
    459c:	bf81      	xor	A, ep:0x81 <_g_NvramUser+0x27>
    459e:	0101      	jmp	0x47a2 <__mlx4_flash_start+0x7a2>
    45a0:	6800      	lod	AH, #0
    45a2:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    45a4:	0b04      	setb	io:0x00.4
    45a6:	b35e      	adc	A, ep:0x5e <_g_NvramUser+0x4>
    45a8:	f788      	and	Y, ep:0x88 <_g_NvramUser+0x2e>
    45aa:	735e      	lod	A, ep:0x5e <_g_NvramUser+0x4>
    45ac:	22e5      	add	X, MH
    45ae:	7334      	lod	A, ep:0x34 <_g_u8NAD>
    45b0:	7235      	lod	A, [S-54]
    45b2:	7388      	lod	A, ep:0x88 <_g_NvramUser+0x2e>
    45b4:	7289      	lod	A, io:0x9 <__bist_stat_size+0x1>
    45b6:	718a      	lod	A, dp:0x8a <_g_NvramUser+0x30>
    45b8:	b338      	adc	A, ep:0x38 <_g_u16StartupDelay>
    45ba:	738b      	lod	A, ep:0x8b <_g_NvramUser+0x31>
    45bc:	b30e      	adc	A, ep:0xe <__bist_stat_size+0x6>
    45be:	b20f      	adc	A, [S-16]
    45c0:	738e      	lod	A, ep:0x8e <_g_NvramUser+0x34>
    45c2:	728f      	lod	A, io:0xf <__bist_stat_size+0x7>
    45c4:	5408      	ret	#9
    45c6:	7ca6      	lod	X, #-90
    45c8:	7d34      	lod	X, dp:0x34 <_g_u8NAD>
    45ca:	6800      	lod	AH, #0
    45cc:	b384      	adc	A, ep:0x84 <_g_NvramUser+0x2a>
    45ce:	b285      	adc	A, io:0x5 <_LinMess+0x1>
    45d0:	7380      	lod	A, ep:0x80 <_g_NvramUser+0x26>
    45d2:	7334      	lod	A, ep:0x34 <_g_u8NAD>
    45d4:	7235      	lod	A, [S-54]
    45d6:	7ca7      	lod	X, #-89
    45d8:	7d34      	lod	X, dp:0x34 <_g_u8NAD>
    45da:	6c03      	lod	YH, #3
    45dc:	2300      	add	X, ep:0x0 <__dp__>
    45de:	2295      	add	X, io:0x15 <__dp_noinit_size+0x5>
    45e0:	23ee      	add	X, ep:0xee <_g_e8StallDetectorEna>
    45e2:	2300      	add	X, ep:0x0 <__dp__>
    45e4:	2300      	add	X, ep:0x0 <__dp__>
    45e6:	23a1      	add	X, ep:0xa1 <_g_NvramUser+0x47>
    45e8:	240b      	or	X, #11
    45ea:	23cb      	add	X, ep:0xcb <_g_u16PID_I+0x1>
    45ec:	2300      	add	X, ep:0x0 <__dp__>
    45ee:	2300      	add	X, ep:0x0 <__dp__>
    45f0:	2304      	add	X, ep:0x4 <_LinMess>
    45f2:	23c3      	add	X, ep:0xc3 <__bss_dp_size+0x13>
    45f4:	23e6      	add	X, ep:0xe6 <_ml_driver_mode+0xe>
    45f6:	23da      	add	X, ep:0xda <_ml_driver_mode+0x2>
    45f8:	2300      	add	X, ep:0x0 <__dp__>
    45fa:	23b7      	add	X, ep:0xb7 <__bss_dp_size+0x7>
    45fc:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    45fe:	2301      	add	X, ep:0x1 <__dp__+0x1>
    4600:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    4602:	7381      	lod	A, ep:0x81 <_g_NvramUser+0x27>
    4604:	5404      	ret	#5
    4606:	6800      	lod	AH, #0
    4608:	e682      	or	Y, io:0x2 <_LinCmnd>
    460a:	0104      	jmp	0x4814 <__mlx4_flash_start+0x814>
    460c:	b681      	and	A, io:0x1 <__dp__+0x1>
    460e:	7282      	lod	A, io:0x2 <_LinCmnd>
    4610:	b684      	and	A, io:0x4 <_LinMess>
    4612:	230d      	add	X, ep:0xd <__bist_stat_size+0x5>
    4614:	b680      	and	A, io:0x0 <__dp__>
    4616:	7282      	lod	A, io:0x2 <_LinCmnd>
    4618:	b680      	and	A, io:0x0 <__dp__>
    461a:	7283      	lod	A, io:0x3 <_LinCmnd+0x1>
    461c:	22fe      	add	X, [X+6]
    461e:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    4620:	a688      	or	A, io:0x8 <__bist_stat_size>
    4622:	0102      	jmp	0x4828 <__mlx4_flash_start+0x828>
    4624:	b582      	and	A, dp:0x82 <_g_NvramUser+0x28>
    4626:	2315      	add	X, ep:0x15 <__dp_noinit_size+0x5>
    4628:	b581      	and	A, dp:0x81 <_g_NvramUser+0x27>
    462a:	7170      	lod	A, dp:0x70 <_g_NvramUser+0x16>
    462c:	a684      	or	A, io:0x4 <_LinMess>
    462e:	0101      	jmp	0x4832 <__mlx4_flash_start+0x832>
    4630:	8781      	or	AL, ep:0x81 <_g_NvramUser+0x27>
    4632:	be83      	xor	A, io:0x3 <_LinCmnd+0x1>
    4634:	4692      	mov	io:0x12 <__dp_noinit_size+0x2>, YL
    4636:	7271      	lod	A, [S-114]
    4638:	b286      	adc	A, io:0x6 <_LinMess2>
    463a:	4616      	mov	[S-23], YL
    463c:	7286      	lod	A, io:0x6 <_LinMess2>
    463e:	b271      	adc	A, [S-114]
    4640:	b5a3      	and	A, dp:0xa3 <_g_NvramUser+0x49>
    4642:	0009      	jmp	0x4656 <__mlx4_flash_start+0x656>
    4644:	6c02      	lod	YH, #2
    4646:	bd8e      	xor	A, dp:0x8e <_g_NvramUser+0x34>
    4648:	2333      	add	X, ep:0x33 <_g_u8SAE_SendErrorState>
    464a:	bd8d      	xor	A, dp:0x8d <_g_NvramUser+0x33>
    464c:	2333      	add	X, ep:0x33 <_g_u8SAE_SendErrorState>
    464e:	bd8b      	xor	A, dp:0x8b <_g_NvramUser+0x31>
    4650:	2333      	add	X, ep:0x33 <_g_u8SAE_SendErrorState>
    4652:	bd87      	xor	A, dp:0x87 <_g_NvramUser+0x2d>
    4654:	2333      	add	X, ep:0x33 <_g_u8SAE_SendErrorState>
    4656:	6c02      	lod	YH, #2
    4658:	f581      	and	Y, dp:0x81 <_g_NvramUser+0x27>
    465a:	2333      	add	X, ep:0x33 <_g_u8SAE_SendErrorState>
    465c:	f582      	and	Y, dp:0x82 <_g_NvramUser+0x28>
    465e:	2333      	add	X, ep:0x33 <_g_u8SAE_SendErrorState>
    4660:	f584      	and	Y, dp:0x84 <_g_NvramUser+0x2a>
    4662:	2333      	add	X, ep:0x33 <_g_u8SAE_SendErrorState>
    4664:	f588      	and	Y, dp:0x88 <_g_NvramUser+0x2e>
    4666:	b691      	and	A, io:0x11 <__dp_noinit_size+0x1>
    4668:	b170      	adc	A, dp:0x70 <_g_NvramUser+0x16>
    466a:	76a3      	jmp	io:0x23 <_g_i16ChipTemperature+0x1>
    466c:	e78a      	or	Y, ep:0x8a <_g_NvramUser+0x30>
    466e:	1008      	call	0x4680 <__mlx4_flash_start+0x680>
    4670:	8782      	or	AL, ep:0x82 <_g_NvramUser+0x28>
    4672:	4716      	mov	ep:0x16 <__dp_noinit_size+0x6>, YL
    4674:	a783      	or	A, ep:0x83 <_g_NvramUser+0x29>
    4676:	4794      	mov	ep:0x94 <_g_NvramUser+0x3a>, YL
    4678:	0101      	jmp	0x487c <__mlx4_flash_start+0x87c>
    467a:	231c      	add	X, ep:0x1c <_g_e8EXVMoveEnableRequestFlag>
    467c:	b287      	adc	A, io:0x7 <_LinProtectedID>
    467e:	231d      	add	X, ep:0x1d <_g_e8CalibrationStep>
    4680:	e78c      	or	Y, ep:0x8c <_g_NvramUser+0x32>
    4682:	1003      	call	0x468a <__mlx4_flash_start+0x68a>
    4684:	8782      	or	AL, ep:0x82 <_g_NvramUser+0x28>
    4686:	4050      	jmp	fp2:0x80
    4688:	231f      	add	X, ep:0x1f <_g_u8StallTypeComm>
    468a:	22fe      	add	X, [X+6]
    468c:	b202      	adc	A, [S-3]
    468e:	b36b      	adc	A, ep:0x6b <_g_NvramUser+0x11>
    4690:	836a      	add	AL, ep:0x6a <_g_NvramUser+0x10>
    4692:	736b      	lod	A, ep:0x6b <_g_NvramUser+0x11>
    4694:	bf81      	xor	A, ep:0x81 <_g_NvramUser+0x27>
    4696:	4796      	mov	ep:0x96 <_g_NvramUser+0x3c>, YL
    4698:	6c03      	lod	YH, #3
    469a:	2375      	add	X, ep:0x75 <_g_NvramUser+0x1b>
    469c:	2351      	add	X, ep:0x51 <_g_u16MicroStepIdx+0x1>
    469e:	236c      	add	X, ep:0x6c <_g_NvramUser+0x12>
    46a0:	2375      	add	X, ep:0x75 <_g_NvramUser+0x1b>
    46a2:	8681      	or	AL, io:0x1 <__dp__+0x1>
    46a4:	7202      	lod	A, [S-3]
    46a6:	b203      	adc	A, [S-4]
    46a8:	8e80      	cmp	AL, io:0x0 <__dp__>
    46aa:	f36b      	adc	Y, ep:0x6b <_g_NvramUser+0x11>
    46ac:	736b      	lod	A, ep:0x6b <_g_NvramUser+0x11>
    46ae:	b786      	and	A, ep:0x86 <_g_NvramUser+0x2c>
    46b0:	e73e      	or	Y, ep:0x3e <__data_dp_end+0x2>
    46b2:	0002      	jmp	0x46b8 <__mlx4_flash_start+0x6b8>
    46b4:	0106      	jmp	0x48c2 <__mlx4_flash_start+0x8c2>
    46b6:	2373      	add	X, ep:0x73 <_g_NvramUser+0x19>
    46b8:	b787      	and	A, ep:0x87 <_g_NvramUser+0x2d>
    46ba:	e73e      	or	Y, ep:0x3e <__data_dp_end+0x2>
    46bc:	1003      	call	0x46c4 <__mlx4_flash_start+0x6c4>
    46be:	b78f      	and	A, ep:0x8f <_g_NvramUser+0x35>
    46c0:	2362      	add	X, ep:0x62 <_g_NvramUser+0x8>
    46c2:	b783      	and	A, ep:0x83 <_g_NvramUser+0x29>
    46c4:	0000      	nop
    46c6:	0000      	nop
    46c8:	0000      	nop
    46ca:	0000      	nop
    46cc:	0000      	nop
    46ce:	0000      	nop
    46d0:	c781      	or	AH, ep:0x81 <_g_NvramUser+0x27>
    46d2:	e780      	or	Y, ep:0x80 <_g_NvramUser+0x26>
    46d4:	0108      	jmp	0x48e6 <__mlx4_flash_start+0x8e6>
    46d6:	2362      	add	X, ep:0x62 <_g_NvramUser+0x8>
    46d8:	c681      	or	AH, io:0x1 <__dp__+0x1>
    46da:	7202      	lod	A, [S-3]
    46dc:	b203      	adc	A, [S-4]
    46de:	ce80      	cmp	AH, io:0x0 <__dp__>
    46e0:	b78e      	and	A, ep:0x8e <_g_NvramUser+0x34>
    46e2:	bb6b      	subc	A, ep:0x6b <_g_NvramUser+0x11>
    46e4:	736b      	lod	A, ep:0x6b <_g_NvramUser+0x11>
    46e6:	7203      	lod	A, [S-4]
    46e8:	4c02 6800 	add	D, #1920034816
    46ec:	7271 
    46ee:	b16d      	adc	A, dp:0x6d <_g_NvramUser+0x13>
    46f0:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    46f2:	716d      	lod	A, dp:0x6d <_g_NvramUser+0x13>
    46f4:	0b04      	setb	io:0x00.4
    46f6:	b25e      	adc	A, [S-95]
    46f8:	f688      	and	Y, io:0x8 <__bist_stat_size>
    46fa:	725e      	lod	A, [S-95]
    46fc:	2388      	add	X, ep:0x88 <_g_NvramUser+0x2e>
    46fe:	7189      	lod	A, dp:0x89 <_g_NvramUser+0x2f>
    4700:	7134      	lod	A, dp:0x34 <_g_u8NAD>
    4702:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    4704:	7335      	lod	A, ep:0x35 <_g_u8NAD+0x1>
    4706:	b787      	and	A, ep:0x87 <_g_NvramUser+0x2d>
    4708:	7388      	lod	A, ep:0x88 <_g_NvramUser+0x2e>
    470a:	5408      	ret	#9
    470c:	7c55      	lod	X, #85
    470e:	7d34      	lod	X, dp:0x34 <_g_u8NAD>
    4710:	b691      	and	A, io:0x11 <__dp_noinit_size+0x1>
    4712:	b588      	and	A, dp:0x88 <_g_NvramUser+0x2e>
    4714:	3beb      	subc	X, ep:0xeb <_ml_driver_mode+0x13>
    4716:	b5a6      	and	A, dp:0xa6 <_g_NvramUser+0x4c>
    4718:	716e      	lod	A, dp:0x6e <_g_NvramUser+0x14>
    471a:	a58f      	or	A, dp:0x8f <_g_NvramUser+0x35>
    471c:	1103      	call	0x4924 <__mlx4_flash_start+0x924>
    471e:	b16c      	adc	A, dp:0x6c <_g_NvramUser+0x12>
    4720:	bd84      	xor	A, dp:0x84 <_g_NvramUser+0x2a>
    4722:	716c      	lod	A, dp:0x6c <_g_NvramUser+0x12>
    4724:	b271      	adc	A, [S-114]
    4726:	6800      	lod	AH, #0
    4728:	a688      	or	A, io:0x8 <__bist_stat_size>
    472a:	110a      	call	0x4940 <__mlx4_flash_start+0x940>
    472c:	b23b      	adc	A, [S-60]
    472e:	f684      	and	Y, io:0x4 <_LinMess>
    4730:	723b      	lod	A, [S-60]
    4732:	b35a      	adc	A, ep:0x5a <_g_NvramUser>
    4734:	7342      	lod	A, ep:0x42 <__data_dp_end+0x6>
    4736:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    4738:	7340      	lod	A, ep:0x40 <__data_dp_end+0x4>
    473a:	7341      	lod	A, ep:0x41 <__data_dp_end+0x5>
    473c:	7343      	lod	A, ep:0x43 <__data_dp_end+0x7>
    473e:	7344      	lod	A, ep:0x44 <_g_DiagResponse>
    4740:	6800      	lod	AH, #0
    4742:	e681      	or	Y, io:0x1 <__dp__+0x1>
    4744:	b286      	adc	A, io:0x6 <_LinMess2>
    4746:	010a      	jmp	0x495c <__mlx4_flash_start+0x95c>
    4748:	000e      	jmp	0x4766 <__mlx4_flash_start+0x766>
    474a:	e680      	or	Y, io:0x0 <__dp__>
    474c:	b35f      	adc	A, ep:0x5f <_g_NvramUser+0x5>
    474e:	0103      	jmp	0x4956 <__mlx4_flash_start+0x956>
    4750:	f782      	and	Y, ep:0x82 <_g_NvramUser+0x28>
    4752:	735f      	lod	A, ep:0x5f <_g_NvramUser+0x5>
    4754:	22fe      	add	X, [X+6]
    4756:	bf8d      	xor	A, ep:0x8d <_g_NvramUser+0x33>
    4758:	735f      	lod	A, ep:0x5f <_g_NvramUser+0x5>
    475a:	22fe      	add	X, [X+6]
    475c:	b36f      	adc	A, ep:0x6f <_g_NvramUser+0x15>
    475e:	f788      	and	Y, ep:0x88 <_g_NvramUser+0x2e>
    4760:	736f      	lod	A, ep:0x6f <_g_NvramUser+0x15>
    4762:	7200      	lod	A, [S-1]
    4764:	22fe      	add	X, [X+6]
    4766:	b36f      	adc	A, ep:0x6f <_g_NvramUser+0x15>
    4768:	f784      	and	Y, ep:0x84 <_g_NvramUser+0x2a>
    476a:	736f      	lod	A, ep:0x6f <_g_NvramUser+0x15>
    476c:	22fe      	add	X, [X+6]
    476e:	b35e      	adc	A, ep:0x5e <_g_NvramUser+0x4>
    4770:	bf8d      	xor	A, ep:0x8d <_g_NvramUser+0x33>
    4772:	735e      	lod	A, ep:0x5e <_g_NvramUser+0x4>
    4774:	a682      	or	A, io:0x2 <_LinCmnd>
    4776:	1106      	call	0x4984 <__mlx4_flash_start+0x984>
    4778:	b35f      	adc	A, ep:0x5f <_g_NvramUser+0x5>
    477a:	bf8e      	xor	A, ep:0x8e <_g_NvramUser+0x34>
    477c:	a681      	or	A, io:0x1 <__dp__+0x1>
    477e:	0101      	jmp	0x4982 <__mlx4_flash_start+0x982>
    4780:	f781      	and	Y, ep:0x81 <_g_NvramUser+0x27>
    4782:	735f      	lod	A, ep:0x5f <_g_NvramUser+0x5>
    4784:	22fe      	add	X, [X+6]
    4786:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    4788:	e301      	add	Y, ep:0x1 <__dp__+0x1>
    478a:	0101      	jmp	0x498e <__mlx4_flash_start+0x98e>
    478c:	2300      	add	X, ep:0x0 <__dp__>
    478e:	7264      	lod	A, [S-101]
    4790:	b286      	adc	A, io:0x6 <_LinMess2>
    4792:	7265      	lod	A, [S-102]
    4794:	22fe      	add	X, [X+6]
    4796:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    4798:	e301      	add	Y, ep:0x1 <__dp__+0x1>
    479a:	0101      	jmp	0x499e <__mlx4_flash_start+0x99e>
    479c:	2300      	add	X, ep:0x0 <__dp__>
    479e:	4692      	mov	io:0x12 <__dp_noinit_size+0x2>, YL
    47a0:	be86      	xor	A, io:0x6 <_LinMess2>
    47a2:	6c02      	lod	YH, #2
    47a4:	3e04      	xor	X, [S-5]
    47a6:	23d9      	add	X, ep:0xd9 <_ml_driver_mode+0x1>
    47a8:	3e05      	xor	X, [S-6]
    47aa:	23d9      	add	X, ep:0xd9 <_ml_driver_mode+0x1>
    47ac:	3e06      	xor	X, [S-7]
    47ae:	23d9      	add	X, ep:0xd9 <_ml_driver_mode+0x1>
    47b0:	3e07      	xor	X, [S-8]
    47b2:	22fe      	add	X, [X+6]
    47b4:	b285      	adc	A, io:0x5 <_LinMess+0x1>
    47b6:	e681      	or	Y, io:0x1 <__dp__+0x1>
    47b8:	0106      	jmp	0x49c6 <__mlx4_flash_start+0x9c6>
    47ba:	e682      	or	Y, io:0x2 <_LinCmnd>
    47bc:	0102      	jmp	0x49c2 <__mlx4_flash_start+0x9c2>
    47be:	b680      	and	A, io:0x0 <__dp__>
    47c0:	23e4      	add	X, ep:0xe4 <_ml_driver_mode+0xc>
    47c2:	b682      	and	A, io:0x2 <_LinCmnd>
    47c4:	23e4      	add	X, ep:0xe4 <_ml_driver_mode+0xc>
    47c6:	b684      	and	A, io:0x4 <_LinMess>
    47c8:	726c      	lod	A, [S-109]
    47ca:	22fe      	add	X, [X+6]
    47cc:	b301      	adc	A, ep:0x1 <__dp__+0x1>
    47ce:	7382      	lod	A, ep:0x82 <_g_NvramUser+0x28>
    47d0:	b35e      	adc	A, ep:0x5e <_g_NvramUser+0x4>
    47d2:	7383      	lod	A, ep:0x83 <_g_NvramUser+0x29>
    47d4:	f686      	and	Y, io:0x6 <_LinMess2>
    47d6:	bf92      	xor	A, ep:0x92 <_g_NvramUser+0x38>
    47d8:	735e      	lod	A, ep:0x5e <_g_NvramUser+0x4>
    47da:	22fe      	add	X, [X+6]
    47dc:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    47de:	e301      	add	Y, ep:0x1 <__dp__+0x1>
    47e0:	0101      	jmp	0x49e4 <__mlx4_flash_start+0x9e4>
    47e2:	2300      	add	X, ep:0x0 <__dp__>
    47e4:	e68e      	or	Y, io:0xe <__bist_stat_size+0x6>
    47e6:	010e      	jmp	0x4a04 <__mlx4_flash_start+0xa04>
    47e8:	763e      	jmp	[S-63]
    47ea:	7207      	lod	A, [S-8]
    47ec:	7206      	lod	A, [S-7]
    47ee:	b286      	adc	A, io:0x6 <_LinMess2>
    47f0:	7202      	lod	A, [S-3]
    47f2:	7204      	lod	A, [S-5]
    47f4:	b287      	adc	A, io:0x7 <_LinProtectedID>
    47f6:	7203      	lod	A, [S-4]
    47f8:	7205      	lod	A, [S-6]
    47fa:	b25c      	adc	A, [S-93]
    47fc:	f684      	and	Y, io:0x4 <_LinMess>
    47fe:	be87      	xor	A, io:0x7 <_LinProtectedID>
    4800:	725c      	lod	A, [S-93]
    4802:	22fe      	add	X, [X+6]
    4804:	b25c      	adc	A, [S-93]
    4806:	be87      	xor	A, io:0x7 <_LinProtectedID>
    4808:	b386      	adc	A, ep:0x86 <_g_NvramUser+0x2c>
    480a:	e780      	or	Y, ep:0x80 <_g_NvramUser+0x26>
    480c:	0101      	jmp	0x4a10 <__mlx4_flash_start+0xa10>
    480e:	f688      	and	Y, io:0x8 <__bist_stat_size>
    4810:	be8b      	xor	A, io:0xb <__bist_stat_size+0x3>
    4812:	725c      	lod	A, [S-93]
    4814:	22fe      	add	X, [X+6]
    4816:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    4818:	e301      	add	Y, ep:0x1 <__dp__+0x1>
    481a:	0101      	jmp	0x4a1e <__mlx4_flash_start+0xa1e>
    481c:	2300      	add	X, ep:0x0 <__dp__>
    481e:	b387      	adc	A, ep:0x87 <_g_NvramUser+0x2d>
    4820:	4796      	mov	ep:0x96 <_g_NvramUser+0x3c>, YL
    4822:	0001      	jmp	0x4826 <__mlx4_flash_start+0x826>
    4824:	230f      	add	X, ep:0xf <__bist_stat_size+0x7>
    4826:	7271      	lod	A, [S-114]
    4828:	be8c      	xor	A, io:0xc <__bist_stat_size+0x4>
    482a:	4608      	mov	[S-9], YL
    482c:	6c02      	lod	YH, #2
    482e:	b11c      	adc	A, dp:0x1c <_g_e8EXVMoveEnableRequestFlag>
    4830:	241e      	or	X, #30
    4832:	b11d      	adc	A, dp:0x1d <_g_e8CalibrationStep>
    4834:	241e      	or	X, #30
    4836:	b12c      	adc	A, dp:0x2c <_g_e8ErrorCoil>
    4838:	241e      	or	X, #30
    483a:	b12d      	adc	A, dp:0x2d <_g_e8ErrorElectric>
    483c:	b387      	adc	A, ep:0x87 <_g_NvramUser+0x2d>
    483e:	4796      	mov	ep:0x96 <_g_NvramUser+0x3c>, YL
    4840:	4796      	mov	ep:0x96 <_g_NvramUser+0x3c>, YL
    4842:	b371      	adc	A, ep:0x71 <_g_NvramUser+0x17>
    4844:	bf83      	xor	A, ep:0x83 <_g_NvramUser+0x29>
    4846:	4788      	mov	ep:0x88 <_g_NvramUser+0x2e>, YL
    4848:	0009      	jmp	0x485c <__mlx4_flash_start+0x85c>
    484a:	6c03      	lod	YH, #3
    484c:	bd8e      	xor	A, dp:0x8e <_g_NvramUser+0x34>
    484e:	2436      	or	X, #54
    4850:	bd8d      	xor	A, dp:0x8d <_g_NvramUser+0x33>
    4852:	2436      	or	X, #54
    4854:	bd8b      	xor	A, dp:0x8b <_g_NvramUser+0x31>
    4856:	2436      	or	X, #54
    4858:	bd87      	xor	A, dp:0x87 <_g_NvramUser+0x2d>
    485a:	2436      	or	X, #54
    485c:	6c03      	lod	YH, #3
    485e:	f581      	and	Y, dp:0x81 <_g_NvramUser+0x27>
    4860:	2436      	or	X, #54
    4862:	f582      	and	Y, dp:0x82 <_g_NvramUser+0x28>
    4864:	2436      	or	X, #54
    4866:	f584      	and	Y, dp:0x84 <_g_NvramUser+0x2a>
    4868:	2436      	or	X, #54
    486a:	f588      	and	Y, dp:0x88 <_g_NvramUser+0x2e>
    486c:	6c02      	lod	YH, #2
    486e:	711c      	lod	A, dp:0x1c <_g_e8EXVMoveEnableRequestFlag>
    4870:	243e      	or	X, #62
    4872:	711d      	lod	A, dp:0x1d <_g_e8CalibrationStep>
    4874:	243e      	or	X, #62
    4876:	712c      	lod	A, dp:0x2c <_g_e8ErrorCoil>
    4878:	243e      	or	X, #62
    487a:	712d      	lod	A, dp:0x2d <_g_e8ErrorElectric>
    487c:	22fe      	add	X, [X+6]
    487e:	b580      	and	A, dp:0x80 <_g_NvramUser+0x26>
    4880:	b682      	and	A, io:0x2 <_LinCmnd>
    4882:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    4884:	7c01      	lod	X, #1
    4886:	5018      	call	fp0:0xC0
    4888:	54c0      	.word	0x54c0
    488a:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    488c:	733e      	lod	A, ep:0x3e <__data_dp_end+0x2>
    488e:	733f      	lod	A, ep:0x3f <__data_dp_end+0x3>
    4890:	5401      	ret
    4892:	3e60      	xor	X, [S-97]
    4894:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    4896:	773a      	lod	PC, ep:0x3a <_l_u8StallCountO>
    4898:	773b      	lod	PC, ep:0x3b <_l_u8StallCountA>
    489a:	773f      	lod	PC, ep:0x3f <__data_dp_end+0x3>
    489c:	355b      	and	X, dp:0x5b <_g_NvramUser+0x1>
    489e:	365b      	and	X, [S-92]
    48a0:	3730      	and	X, ep:0x30 <_l_u8SynchFieldErrorCounter>
    48a2:	7736      	lod	PC, ep:0x36 <_l_u8VTIdx>
    48a4:	3ba0      	subc	X, ep:0xa0 <_g_NvramUser+0x46>
    48a6:	b78f      	and	A, ep:0x8f <_g_NvramUser+0x35>
    48a8:	b75f      	and	A, ep:0x5f <_g_NvramUser+0x5>
    48aa:	b681      	and	A, io:0x1 <__dp__+0x1>
    48ac:	77bc      	lod	PC, ep:0xbc <__bss_dp_size+0xc>
    48ae:	b78e      	and	A, ep:0x8e <_g_NvramUser+0x34>
    48b0:	b75f      	and	A, ep:0x5f <_g_NvramUser+0x5>
    48b2:	b680      	and	A, io:0x0 <__dp__>
    48b4:	77bc      	lod	PC, ep:0xbc <__bss_dp_size+0xc>
    48b6:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    48b8:	7301      	lod	A, ep:0x1 <__dp__+0x1>
    48ba:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    48bc:	4d3e      	mov	dp:0x3e <__data_dp_end+0x2>, YH
    48be:	494e      	mov	dp:0x4e <_g_u16CorrectionRatio>, AH
    48c0:	4930      	mov	dp:0x30 <_l_u8SynchFieldErrorCounter>, AH
    48c2:	493a      	mov	dp:0x3a <_l_u8StallCountO>, AH
    48c4:	490e      	mov	dp:0xe <__bist_stat_size+0x6>, AH
    48c6:	4964      	mov	dp:0x64 <_g_NvramUser+0xa>, AH
    48c8:	735f      	lod	A, ep:0x5f <_g_NvramUser+0x5>
    48ca:	736c      	lod	A, ep:0x6c <_g_NvramUser+0x12>
    48cc:	735c      	lod	A, ep:0x5c <_g_NvramUser+0x2>
    48ce:	7338      	lod	A, ep:0x38 <_g_u16StartupDelay>
    48d0:	730c      	lod	A, ep:0xc <__bist_stat_size+0x4>
    48d2:	735e      	lod	A, ep:0x5e <_g_NvramUser+0x4>
    48d4:	736f      	lod	A, ep:0x6f <_g_NvramUser+0x15>
    48d6:	b58b      	and	A, dp:0x8b <_g_NvramUser+0x31>
    48d8:	7105      	lod	A, dp:0x5 <_LinMess+0x1>
    48da:	7103      	lod	A, dp:0x3 <_LinCmnd+0x1>
    48dc:	b58c      	and	A, dp:0x8c <_g_NvramUser+0x32>
    48de:	7104      	lod	A, dp:0x4 <_LinMess>
    48e0:	7102      	lod	A, dp:0x2 <_LinCmnd>
    48e2:	b583      	and	A, dp:0x83 <_g_NvramUser+0x29>
    48e4:	7107      	lod	A, dp:0x7 <_LinProtectedID>
    48e6:	7106      	lod	A, dp:0x6 <_LinMess2>
    48e8:	b680      	and	A, io:0x0 <__dp__>
    48ea:	77c6      	lod	PC, ep:0xc6 <__bss_dp_size+0x16>
    48ec:	77ca      	lod	PC, ep:0xca <_g_u16PID_I>
    48ee:	8681      	or	AL, io:0x1 <__dp__+0x1>
    48f0:	0101      	jmp	0x4af4 <__mlx4_flash_start+0xaf4>
    48f2:	2475      	or	X, #117
    48f4:	b687      	and	A, io:0x7 <_LinProtectedID>
    48f6:	7336      	lod	A, ep:0x36 <_l_u8VTIdx>
    48f8:	7237      	lod	A, [S-56]
    48fa:	b788      	and	A, ep:0x88 <_g_NvramUser+0x2e>
    48fc:	730d      	lod	A, ep:0xd <__bist_stat_size+0x5>
    48fe:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    4900:	738c      	lod	A, ep:0x8c <_g_NvramUser+0x32>
    4902:	b784      	and	A, ep:0x84 <_g_NvramUser+0x2a>
    4904:	738d      	lod	A, ep:0x8d <_g_NvramUser+0x33>
    4906:	7c02      	lod	X, #2
    4908:	5820      	inc	S, #33
    490a:	b681      	and	A, io:0x1 <__dp__+0x1>
    490c:	62ca      	lod	AL, [--PC]
    490e:	622b      	lod	AL, [S-44]
    4910:	3448      	and	X, #72
    4912:	5809      	inc	S, #10
    4914:	62e6      	lod	AL, Y
    4916:	2489      	or	X, #-119
    4918:	b78a      	and	A, ep:0x8a <_g_NvramUser+0x30>
    491a:	b682      	and	A, io:0x2 <_LinCmnd>
    491c:	62ca      	lod	AL, [--PC]
    491e:	5018      	call	fp0:0xC0
    4920:	54c0      	.word	0x54c0
    4922:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    4924:	733b      	lod	A, ep:0x3b <_l_u8StallCountA>
    4926:	24a3      	or	X, #-93
    4928:	b680      	and	A, io:0x0 <__dp__>
    492a:	b33b      	adc	A, ep:0x3b <_l_u8StallCountA>
    492c:	a781      	or	A, ep:0x81 <_g_NvramUser+0x27>
    492e:	0106      	jmp	0x4b3c <__mlx4_flash_start+0xb3c>
    4930:	bf8e      	xor	A, ep:0x8e <_g_NvramUser+0x34>
    4932:	733b      	lod	A, ep:0x3b <_l_u8StallCountA>
    4934:	b239      	adc	A, [S-58]
    4936:	7238      	lod	A, [S-57]
    4938:	b582      	and	A, dp:0x82 <_g_NvramUser+0x28>
    493a:	b686      	and	A, io:0x6 <_LinMess2>
    493c:	e680      	or	Y, io:0x0 <__dp__>
    493e:	0101      	jmp	0x4b42 <__mlx4_flash_start+0xb42>
    4940:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    4942:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    4944:	736f      	lod	A, ep:0x6f <_g_NvramUser+0x15>
    4946:	b16f      	adc	A, dp:0x6f <_g_NvramUser+0x15>
    4948:	bd88      	xor	A, dp:0x88 <_g_NvramUser+0x2e>
    494a:	716f      	lod	A, dp:0x6f <_g_NvramUser+0x15>
    494c:	b33b      	adc	A, ep:0x3b <_l_u8StallCountA>
    494e:	a78d      	or	A, ep:0x8d <_g_NvramUser+0x33>
    4950:	1101      	call	0x4b54 <__mlx4_flash_start+0xb54>
    4952:	24c2      	or	X, #-62
    4954:	4d02      	mov	dp:0x2 <_LinCmnd>, YH
    4956:	494e      	mov	dp:0x4e <_g_u16CorrectionRatio>, AH
    4958:	b58e      	and	A, dp:0x8e <_g_NvramUser+0x34>
    495a:	b561      	and	A, dp:0x61 <_g_NvramUser+0x7>
    495c:	e53e      	or	Y, dp:0x3e <__data_dp_end+0x2>
    495e:	1101      	call	0x4b62 <__mlx4_flash_start+0xb62>
    4960:	24c2      	or	X, #-62
    4962:	b340      	adc	A, ep:0x40 <__data_dp_end+0x4>
    4964:	4792      	mov	ep:0x92 <_g_NvramUser+0x38>, YL
    4966:	7340      	lod	A, ep:0x40 <__data_dp_end+0x4>
    4968:	b341      	adc	A, ep:0x41 <__data_dp_end+0x5>
    496a:	4796      	mov	ep:0x96 <_g_NvramUser+0x3c>, YL
    496c:	7341      	lod	A, ep:0x41 <__data_dp_end+0x5>
    496e:	b342      	adc	A, ep:0x42 <__data_dp_end+0x6>
    4970:	4796      	mov	ep:0x96 <_g_NvramUser+0x3c>, YL
    4972:	7342      	lod	A, ep:0x42 <__data_dp_end+0x6>
    4974:	b343      	adc	A, ep:0x43 <__data_dp_end+0x7>
    4976:	4796      	mov	ep:0x96 <_g_NvramUser+0x3c>, YL
    4978:	7343      	lod	A, ep:0x43 <__data_dp_end+0x7>
    497a:	b344      	adc	A, ep:0x44 <_g_DiagResponse>
    497c:	4796      	mov	ep:0x96 <_g_NvramUser+0x3c>, YL
    497e:	7344      	lod	A, ep:0x44 <_g_DiagResponse>
    4980:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    4982:	24ae      	or	X, #-82
    4984:	b581      	and	A, dp:0x81 <_g_NvramUser+0x27>
    4986:	7166      	lod	A, dp:0x66 <_g_NvramUser+0xc>
    4988:	b580      	and	A, dp:0x80 <_g_NvramUser+0x26>
    498a:	7167      	lod	A, dp:0x67 <_g_NvramUser+0xd>
    498c:	b58e      	and	A, dp:0x8e <_g_NvramUser+0x34>
    498e:	b561      	and	A, dp:0x61 <_g_NvramUser+0x7>
    4990:	e106      	add	Y, dp:0x6 <_LinMess2>
    4992:	0108      	jmp	0x4ba4 <__mlx4_flash_start+0xba4>
    4994:	b266      	adc	A, [S-103]
    4996:	4692      	mov	io:0x12 <__dp_noinit_size+0x2>, YL
    4998:	7266      	lod	A, [S-103]
    499a:	b267      	adc	A, [S-104]
    499c:	4696      	mov	io:0x16 <__dp_noinit_size+0x6>, YL
    499e:	7267      	lod	A, [S-104]
    49a0:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    49a2:	24c8      	or	X, #-56
    49a4:	4d66      	mov	dp:0x66 <_g_NvramUser+0xc>, YH
    49a6:	4968      	mov	dp:0x68 <_g_NvramUser+0xe>, AH
    49a8:	6281      	lod	AL, io:0x1 <__dp__+0x1>
    49aa:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    49ac:	733a      	lod	A, ep:0x3a <_l_u8StallCountO>
    49ae:	623a      	lod	AL, [S-59]
    49b0:	a688      	or	A, io:0x8 <__bist_stat_size>
    49b2:	1104      	call	0x4bbc <__mlx4_flash_start+0xbbc>
    49b4:	b33b      	adc	A, ep:0x3b <_l_u8StallCountA>
    49b6:	bf83      	xor	A, ep:0x83 <_g_NvramUser+0x29>
    49b8:	733b      	lod	A, ep:0x3b <_l_u8StallCountA>
    49ba:	24f2      	or	X, #-14
    49bc:	b33b      	adc	A, ep:0x3b <_l_u8StallCountA>
    49be:	a78d      	or	A, ep:0x8d <_g_NvramUser+0x33>
    49c0:	0103      	jmp	0x4bc8 <__mlx4_flash_start+0xbc8>
    49c2:	bf83      	xor	A, ep:0x83 <_g_NvramUser+0x29>
    49c4:	733b      	lod	A, ep:0x3b <_l_u8StallCountA>
    49c6:	2494      	or	X, #-108
    49c8:	580e      	inc	S, #15
    49ca:	0803      	clrb	dp:0x00.3
    49cc:	0906      	clrb	io:0x00.6
    49ce:	62e6      	lod	AL, Y
    49d0:	24e4      	or	X, #-28
    49d2:	623a      	lod	AL, [S-59]
    49d4:	a688      	or	A, io:0x8 <__bist_stat_size>
    49d6:	0106      	jmp	0x4be4 <__mlx4_flash_start+0xbe4>
    49d8:	24e4      	or	X, #-28
    49da:	626f      	lod	AL, [S-112]
    49dc:	0001      	jmp	0x49e0 <__mlx4_flash_start+0x9e0>
    49de:	24e9      	or	X, #-23
    49e0:	b586      	and	A, dp:0x86 <_g_NvramUser+0x2c>
    49e2:	29d4      	sub	X, dp:0xd4 <_LIN_nad>
    49e4:	628e      	lod	AL, io:0xe <__bist_stat_size+0x6>
    49e6:	37a0      	and	X, ep:0xa0 <_g_NvramUser+0x46>
    49e8:	380d      	subc	X, #13
    49ea:	3805      	subc	X, #5
    49ec:	3479      	and	X, #121
    49ee:	303a      	adc	X, #58
    49f0:	39f6      	subc	X, dp:0xf6 <_g_u16CalibTravel>
    49f2:	b26c      	adc	A, [S-109]
    49f4:	a686      	or	A, io:0x6 <_LinMess2>
    49f6:	0106      	jmp	0x4c04 <__mlx4_flash_start+0xc04>
    49f8:	f681      	and	Y, io:0x1 <__dp__+0x1>
    49fa:	726c      	lod	A, [S-109]
    49fc:	b26e      	adc	A, [S-111]
    49fe:	a68f      	or	A, io:0xf <__bist_stat_size+0x7>
    4a00:	1101      	call	0x4c04 <__mlx4_flash_start+0xc04>
    4a02:	6376      	lod	AL, ep:0x76 <_g_NvramUser+0x1c>
    4a04:	3cc3      	xor	X, #-61
    4a06:	b688      	and	A, io:0x8 <__bist_stat_size>
    4a08:	be38      	xor	A, [S-57]
    4a0a:	0101      	jmp	0x4c0e <__mlx4_flash_start+0xc0e>
    4a0c:	2494      	or	X, #-108
    4a0e:	580e      	inc	S, #15
    4a10:	0905      	clrb	io:0x00.5
    4a12:	0802      	clrb	dp:0x00.2
    4a14:	62e6      	lod	AL, Y
    4a16:	2507      	or	X, dp:0x7 <_LinProtectedID>
    4a18:	623a      	lod	AL, [S-59]
    4a1a:	2522      	or	X, dp:0x22 <_g_i16ChipTemperature>
    4a1c:	623a      	lod	AL, [S-59]
    4a1e:	b15c      	adc	A, dp:0x5c <_g_NvramUser+0x2>
    4a20:	bd8e      	xor	A, dp:0x8e <_g_NvramUser+0x34>
    4a22:	a681      	or	A, io:0x1 <__dp__+0x1>
    4a24:	1102      	call	0x4c2a <__mlx4_flash_start+0xc2a>
    4a26:	a78c      	or	A, ep:0x8c <_g_NvramUser+0x32>
    4a28:	0101      	jmp	0x4c2c <__mlx4_flash_start+0xc2c>
    4a2a:	f581      	and	Y, dp:0x81 <_g_NvramUser+0x27>
    4a2c:	715c      	lod	A, dp:0x5c <_g_NvramUser+0x2>
    4a2e:	4050      	jmp	fp2:0x80
    4a30:	6c04      	lod	YH, #4
    4a32:	2528      	or	X, dp:0x28 <_g_u8StallOcc>
    4a34:	2542      	or	X, dp:0x42 <__data_dp_end+0x6>
    4a36:	254f      	or	X, dp:0x4f <_g_u16CorrectionRatio+0x1>
    4a38:	2507      	or	X, dp:0x7 <_LinProtectedID>
    4a3a:	b15c      	adc	A, dp:0x5c <_g_NvramUser+0x2>
    4a3c:	a581      	or	A, dp:0x81 <_g_NvramUser+0x27>
    4a3e:	0107      	jmp	0x4c4e <__mlx4_flash_start+0xc4e>
    4a40:	bd8e      	xor	A, dp:0x8e <_g_NvramUser+0x34>
    4a42:	715c      	lod	A, dp:0x5c <_g_NvramUser+0x2>
    4a44:	484f      	macu	D, AL, [X]
    4a46:	6c04      	lod	YH, #4
    4a48:	2557      	or	X, dp:0x57 <__data_size+0x1>
    4a4a:	2584      	or	X, dp:0x84 <_g_NvramUser+0x2a>
    4a4c:	25c6      	or	X, dp:0xc6 <__bss_dp_size+0x16>
    4a4e:	2507      	or	X, dp:0x7 <_LinProtectedID>
    4a50:	484e      	macu	D, AL, [X++]
    4a52:	61c0      	lod	AL, dp:0xc0 <__bss_dp_size+0x10>
    4a54:	e583      	or	Y, dp:0x83 <_g_NvramUser+0x29>
    4a56:	1104      	call	0x4c60 <__mlx4_flash_start+0xc60>
    4a58:	b143      	adc	A, dp:0x43 <__data_dp_end+0x7>
    4a5a:	e585      	or	Y, dp:0x85 <_g_NvramUser+0x2b>
    4a5c:	1101      	call	0x4c60 <__mlx4_flash_start+0xc60>
    4a5e:	2918      	sub	X, dp:0x18 <__data_dp_start>
    4a60:	b16c      	adc	A, dp:0x6c <_g_NvramUser+0x12>
    4a62:	a581      	or	A, dp:0x81 <_g_NvramUser+0x27>
    4a64:	010e      	jmp	0x4c82 <__mlx4_flash_start+0xc82>
    4a66:	b168      	adc	A, dp:0x68 <_g_NvramUser+0xe>
    4a68:	c581      	or	AH, dp:0x81 <_g_NvramUser+0x27>
    4a6a:	7168      	lod	A, dp:0x68 <_g_NvramUser+0xe>
    4a6c:	b169      	adc	A, dp:0x69 <_g_NvramUser+0xf>
    4a6e:	cd80      	cmp	AH, dp:0x80 <_g_NvramUser+0x26>
    4a70:	7169      	lod	A, dp:0x69 <_g_NvramUser+0xf>
    4a72:	1107      	call	0x4c82 <__mlx4_flash_start+0xc82>
    4a74:	4d66      	mov	dp:0x66 <_g_NvramUser+0xc>, YH
    4a76:	4968      	mov	dp:0x68 <_g_NvramUser+0xe>, AH
    4a78:	b16e      	adc	A, dp:0x6e <_g_NvramUser+0x14>
    4a7a:	c581      	or	AH, dp:0x81 <_g_NvramUser+0x27>
    4a7c:	716e      	lod	A, dp:0x6e <_g_NvramUser+0x14>
    4a7e:	1101      	call	0x4c82 <__mlx4_flash_start+0xc82>
    4a80:	6376      	lod	AL, ep:0x76 <_g_NvramUser+0x1c>
    4a82:	251d      	or	X, dp:0x1d <_g_e8CalibrationStep>
    4a84:	61d6      	lod	AL, dp:0xd6 <_LinMessage>
    4a86:	7271      	lod	A, [S-114]
    4a88:	b256      	adc	A, [S-87]
    4a8a:	c242      	add	AH, [S-67]
    4a8c:	c943      	sub	AH, dp:0x43 <__data_dp_end+0x7>
    4a8e:	4510      	mov	dp:0x10 <__dp_noinit_size>, YL
    4a90:	4616      	mov	[S-23], YL
    4a92:	e242      	add	Y, [S-67]
    4a94:	e943      	sub	Y, dp:0x43 <__data_dp_end+0x7>
    4a96:	1002      	call	0x4a9c <__mlx4_flash_start+0xa9c>
    4a98:	b271      	adc	A, [S-114]
    4a9a:	251d      	or	X, dp:0x1d <_g_e8CalibrationStep>
    4a9c:	2494      	or	X, #-108
    4a9e:	b15a      	adc	A, dp:0x5a <_g_NvramUser>
    4aa0:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    4aa2:	715a      	lod	A, dp:0x5a <_g_NvramUser>
    4aa4:	e583      	or	Y, dp:0x83 <_g_NvramUser+0x29>
    4aa6:	1001      	call	0x4aaa <__mlx4_flash_start+0xaaa>
    4aa8:	251d      	or	X, dp:0x1d <_g_e8CalibrationStep>
    4aaa:	6394      	lod	AL, ep:0x94 <_g_NvramUser+0x3a>
    4aac:	25ee      	or	X, dp:0xee <_g_e8StallDetectorEna>
    4aae:	61c0      	lod	AL, dp:0xc0 <__bss_dp_size+0x10>
    4ab0:	a688      	or	A, io:0x8 <__bist_stat_size>
    4ab2:	1102      	call	0x4cb8 <__mlx4_flash_start+0xcb8>
    4ab4:	7c06      	lod	X, #6
    4ab6:	2494      	or	X, #-108
    4ab8:	b580      	and	A, dp:0x80 <_g_NvramUser+0x26>
    4aba:	e144      	add	Y, dp:0x44 <_g_DiagResponse>
    4abc:	0005      	jmp	0x4ac8 <__mlx4_flash_start+0xac8>
    4abe:	b142      	adc	A, dp:0x42 <__data_dp_end+0x6>
    4ac0:	e589      	or	Y, dp:0x89 <_g_NvramUser+0x2f>
    4ac2:	b143      	adc	A, dp:0x43 <__data_dp_end+0x7>
    4ac4:	ed81      	cmp	Y, dp:0x81 <_g_NvramUser+0x27>
    4ac6:	0003      	jmp	0x4ace <__mlx4_flash_start+0xace>
    4ac8:	623d      	lod	AL, [S-62]
    4aca:	6207      	lod	AL, [S-8]
    4acc:	255c      	or	X, dp:0x5c <_g_NvramUser+0x2>
    4ace:	b35c      	adc	A, ep:0x5c <_g_NvramUser+0x2>
    4ad0:	a788      	or	A, ep:0x88 <_g_NvramUser+0x2e>
    4ad2:	1107      	call	0x4ce2 <__mlx4_flash_start+0xce2>
    4ad4:	a784      	or	A, ep:0x84 <_g_NvramUser+0x2a>
    4ad6:	0105      	jmp	0x4ce2 <__mlx4_flash_start+0xce2>
    4ad8:	b307      	adc	A, ep:0x7 <_LinProtectedID>
    4ada:	e73e      	or	Y, ep:0x3e <__data_dp_end+0x2>
    4adc:	1002      	call	0x4ae2 <__mlx4_flash_start+0xae2>
    4ade:	b681      	and	A, io:0x1 <__dp__+0x1>
    4ae0:	2495      	or	X, #-107
    4ae2:	b36c      	adc	A, ep:0x6c <_g_NvramUser+0x12>
    4ae4:	a781      	or	A, ep:0x81 <_g_NvramUser+0x27>
    4ae6:	0105      	jmp	0x4cf2 <__mlx4_flash_start+0xcf2>
    4ae8:	bf8e      	xor	A, ep:0x8e <_g_NvramUser+0x34>
    4aea:	736c      	lod	A, ep:0x6c <_g_NvramUser+0x12>
    4aec:	b787      	and	A, ep:0x87 <_g_NvramUser+0x2d>
    4aee:	b680      	and	A, io:0x0 <__dp__>
    4af0:	62d2      	lod	AL, [A++]
    4af2:	4d40      	mov	dp:0x40 <__data_dp_end+0x4>, YH
    4af4:	4954      	mov	dp:0x54 <_g_u16TargetCommutTimerPeriod>, AH
    4af6:	4d42      	mov	dp:0x42 <__data_dp_end+0x6>, YH
    4af8:	4956      	mov	dp:0x56 <__data_size>, AH
    4afa:	7c4a      	lod	X, #74
    4afc:	380e      	subc	X, #14
    4afe:	3806      	subc	X, #6
    4b00:	344c      	and	X, #76
    4b02:	484f      	macu	D, AL, [X]
    4b04:	5c01      	dec	S, #2
    4b06:	2507      	or	X, dp:0x7 <_LinProtectedID>
    4b08:	61d0      	lod	AL, dp:0xd0 <_LinFrameDataBuffer+0x4>
    4b0a:	380f      	subc	X, #15
    4b0c:	3806      	subc	X, #6
    4b0e:	300a      	adc	X, #10
    4b10:	39f0      	subc	X, dp:0xf0 <_g_u16ActualPosition>
    4b12:	348f      	and	X, #-113
    4b14:	5c02      	dec	S, #3
    4b16:	b580      	and	A, dp:0x80 <_g_NvramUser+0x26>
    4b18:	7172      	lod	A, dp:0x72 <_g_NvramUser+0x18>
    4b1a:	715a      	lod	A, dp:0x5a <_g_NvramUser>
    4b1c:	4d3e      	mov	dp:0x3e <__data_dp_end+0x2>, YH
    4b1e:	4946      	mov	dp:0x46 <_g_DiagResponse+0x2>, AH
    4b20:	4948      	mov	dp:0x48 <_g_DiagResponse+0x4>, AH
    4b22:	b58f      	and	A, dp:0x8f <_g_NvramUser+0x35>
    4b24:	714b      	lod	A, dp:0x4b <_g_DiagResponse+0x7>
    4b26:	714a      	lod	A, dp:0x4a <_g_DiagResponse+0x6>
    4b28:	b343      	adc	A, ep:0x43 <__data_dp_end+0x7>
    4b2a:	b242      	adc	A, [S-67]
    4b2c:	b141      	adc	A, dp:0x41 <__data_dp_end+0x5>
    4b2e:	4d3e      	mov	dp:0x3e <__data_dp_end+0x2>, YH
    4b30:	4942      	mov	dp:0x42 <__data_dp_end+0x6>, AH
    4b32:	7342      	lod	A, ep:0x42 <__data_dp_end+0x6>
    4b34:	7241      	lod	A, [S-66]
    4b36:	7140      	lod	A, dp:0x40 <__data_dp_end+0x4>
    4b38:	4710      	mov	ep:0x10 <__dp_noinit_size>, YL
    4b3a:	4616      	mov	[S-23], YL
    4b3c:	4516      	mov	dp:0x16 <__dp_noinit_size+0x6>, YL
    4b3e:	8140      	add	AL, dp:0x40 <__data_dp_end+0x4>
    4b40:	8a41      	sub	AL, [S-66]
    4b42:	8b42      	sub	AL, ep:0x42 <__data_dp_end+0x6>
    4b44:	7140      	lod	A, dp:0x40 <__data_dp_end+0x4>
    4b46:	7241      	lod	A, [S-66]
    4b48:	7342      	lod	A, ep:0x42 <__data_dp_end+0x6>
    4b4a:	7150      	lod	A, dp:0x50 <_g_u16MicroStepIdx>
    4b4c:	7251      	lod	A, [S-82]
    4b4e:	7352      	lod	A, ep:0x52 <_g_u16CommutTimerPeriod>
    4b50:	b35c      	adc	A, ep:0x5c <_g_NvramUser+0x2>
    4b52:	bf8c      	xor	A, ep:0x8c <_g_NvramUser+0x32>
    4b54:	e784      	or	Y, ep:0x84 <_g_NvramUser+0x2a>
    4b56:	0101      	jmp	0x4d5a <__mlx4_flash_start+0xd5a>
    4b58:	25c3      	or	X, dp:0xc3 <__bss_dp_size+0x13>
    4b5a:	b73e      	and	A, ep:0x3e <__data_dp_end+0x2>
    4b5c:	e307      	add	Y, ep:0x7 <_LinProtectedID>
    4b5e:	100b      	call	0x4b76 <__mlx4_flash_start+0xb76>
    4b60:	8781      	or	AL, ep:0x81 <_g_NvramUser+0x27>
    4b62:	b152      	adc	A, dp:0x52 <_g_u16CommutTimerPeriod>
    4b64:	4510      	mov	dp:0x10 <__dp_noinit_size>, YL
    4b66:	7152      	lod	A, dp:0x52 <_g_u16CommutTimerPeriod>
    4b68:	b151      	adc	A, dp:0x51 <_g_u16MicroStepIdx+0x1>
    4b6a:	4516      	mov	dp:0x16 <__dp_noinit_size+0x6>, YL
    4b6c:	7151      	lod	A, dp:0x51 <_g_u16MicroStepIdx+0x1>
    4b6e:	b150      	adc	A, dp:0x50 <_g_u16MicroStepIdx>
    4b70:	4516      	mov	dp:0x16 <__dp_noinit_size+0x6>, YL
    4b72:	7150      	lod	A, dp:0x50 <_g_u16MicroStepIdx>
    4b74:	25ae      	or	X, dp:0xae <_g_NvramUser+0x54>
    4b76:	b150      	adc	A, dp:0x50 <_g_u16MicroStepIdx>
    4b78:	e104      	add	Y, dp:0x4 <_LinMess>
    4b7a:	b151      	adc	A, dp:0x51 <_g_u16MicroStepIdx+0x1>
    4b7c:	e905      	sub	Y, dp:0x5 <_LinMess+0x1>
    4b7e:	b152      	adc	A, dp:0x52 <_g_u16CommutTimerPeriod>
    4b80:	ed80      	cmp	Y, dp:0x80 <_g_NvramUser+0x26>
    4b82:	1001      	call	0x4b86 <__mlx4_flash_start+0xb86>
    4b84:	2494      	or	X, #-108
    4b86:	4950      	mov	dp:0x50 <_g_u16MicroStepIdx>, AH
    4b88:	4952      	mov	dp:0x52 <_g_u16CommutTimerPeriod>, AH
    4b8a:	2507      	or	X, dp:0x7 <_LinProtectedID>
    4b8c:	61dd      	lod	AL, dp:0xdd <_ml_driver_mode+0x5>
    4b8e:	1001      	call	0x4b92 <__mlx4_flash_start+0xb92>
    4b90:	25ee      	or	X, dp:0xee <_g_e8StallDetectorEna>
    4b92:	b580      	and	A, dp:0x80 <_g_NvramUser+0x26>
    4b94:	715a      	lod	A, dp:0x5a <_g_NvramUser>
    4b96:	b172      	adc	A, dp:0x72 <_g_NvramUser+0x18>
    4b98:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    4b9a:	7172      	lod	A, dp:0x72 <_g_NvramUser+0x18>
    4b9c:	e588      	or	Y, dp:0x88 <_g_NvramUser+0x2e>
    4b9e:	0101      	jmp	0x4da2 <__mlx4_flash_start+0xda2>
    4ba0:	2507      	or	X, dp:0x7 <_LinProtectedID>
    4ba2:	b150      	adc	A, dp:0x50 <_g_u16MicroStepIdx>
    4ba4:	4592      	mov	dp:0x92 <_g_NvramUser+0x38>, YL
    4ba6:	716a      	lod	A, dp:0x6a <_g_NvramUser+0x10>
    4ba8:	b153      	adc	A, dp:0x53 <_g_u16CommutTimerPeriod+0x1>
    4baa:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    4bac:	7353      	lod	A, ep:0x53 <_g_u16CommutTimerPeriod+0x1>
    4bae:	b351      	adc	A, ep:0x51 <_g_u16MicroStepIdx+0x1>
    4bb0:	b252      	adc	A, [S-83]
    4bb2:	4796      	mov	ep:0x96 <_g_NvramUser+0x3c>, YL
    4bb4:	4696      	mov	io:0x16 <__dp_noinit_size+0x6>, YL
    4bb6:	4596      	mov	dp:0x96 <_g_NvramUser+0x3c>, YL
    4bb8:	7350      	lod	A, ep:0x50 <_g_u16MicroStepIdx>
    4bba:	7251      	lod	A, [S-82]
    4bbc:	7152      	lod	A, dp:0x52 <_g_u16CommutTimerPeriod>
    4bbe:	4510      	mov	dp:0x10 <__dp_noinit_size>, YL
    4bc0:	4616      	mov	[S-23], YL
    4bc2:	4716      	mov	ep:0x16 <__dp_noinit_size+0x6>, YL
    4bc4:	e349      	add	Y, ep:0x49 <_g_DiagResponse+0x5>
    4bc6:	ea4a      	sub	Y, [S-75]
    4bc8:	e94b      	sub	Y, dp:0x4b <_g_DiagResponse+0x7>
    4bca:	1008      	call	0x4bdc <__mlx4_flash_start+0xbdc>
    4bcc:	8350      	add	AL, ep:0x50 <_g_u16MicroStepIdx>
    4bce:	8a51      	sub	AL, [S-82]
    4bd0:	8952      	sub	AL, dp:0x52 <_g_u16CommutTimerPeriod>
    4bd2:	e346      	add	Y, ep:0x46 <_g_DiagResponse+0x2>
    4bd4:	ea47      	sub	Y, [S-72]
    4bd6:	e948      	sub	Y, dp:0x48 <_g_DiagResponse+0x4>
    4bd8:	0001      	jmp	0x4bdc <__mlx4_flash_start+0xbdc>
    4bda:	25f6      	or	X, dp:0xf6 <_g_u16CalibTravel>
    4bdc:	b35c      	adc	A, ep:0x5c <_g_NvramUser+0x2>
    4bde:	bf8c      	xor	A, ep:0x8c <_g_NvramUser+0x32>
    4be0:	e784      	or	Y, ep:0x84 <_g_NvramUser+0x2a>
    4be2:	1103      	call	0x4dea <__mlx4_flash_start+0xdea>
    4be4:	b584      	and	A, dp:0x84 <_g_NvramUser+0x2a>
    4be6:	b688      	and	A, io:0x8 <__bist_stat_size>
    4be8:	2495      	or	X, #-107
    4bea:	2494      	or	X, #-108
    4bec:	b73e      	and	A, ep:0x3e <__data_dp_end+0x2>
    4bee:	b252      	adc	A, [S-83]
    4bf0:	e680      	or	Y, io:0x0 <__dp__>
    4bf2:	b153      	adc	A, dp:0x53 <_g_u16CommutTimerPeriod+0x1>
    4bf4:	ed80      	cmp	Y, dp:0x80 <_g_NvramUser+0x26>
    4bf6:	1101      	call	0x4dfa <__mlx4_flash_start+0xdfa>
    4bf8:	260e      	or	X, [S-15]
    4bfa:	8781      	or	AL, ep:0x81 <_g_NvramUser+0x27>
    4bfc:	4510      	mov	dp:0x10 <__dp_noinit_size>, YL
    4bfe:	7153      	lod	A, dp:0x53 <_g_u16CommutTimerPeriod+0x1>
    4c00:	4616      	mov	[S-23], YL
    4c02:	7252      	lod	A, [S-83]
    4c04:	b251      	adc	A, [S-82]
    4c06:	4616      	mov	[S-23], YL
    4c08:	7251      	lod	A, [S-82]
    4c0a:	b250      	adc	A, [S-81]
    4c0c:	4616      	mov	[S-23], YL
    4c0e:	7250      	lod	A, [S-81]
    4c10:	b26a      	adc	A, [S-107]
    4c12:	4616      	mov	[S-23], YL
    4c14:	be8e      	xor	A, io:0xe <__bist_stat_size+0x6>
    4c16:	726a      	lod	A, [S-107]
    4c18:	61fb      	lod	AL, dp:0xfb <_g_u16ActuatorTgtPos+0x1>
    4c1a:	25f7      	or	X, dp:0xf7 <_g_u16CalibTravel+0x1>
    4c1c:	b250      	adc	A, [S-81]
    4c1e:	b151      	adc	A, dp:0x51 <_g_u16MicroStepIdx+0x1>
    4c20:	e687      	or	Y, io:0x7 <_LinProtectedID>
    4c22:	ed8c      	cmp	Y, dp:0x8c <_g_NvramUser+0x32>
    4c24:	1001      	call	0x4c28 <__mlx4_flash_start+0xc28>
    4c26:	261a      	or	X, [S-27]
    4c28:	4510      	mov	dp:0x10 <__dp_noinit_size>, YL
    4c2a:	4616      	mov	[S-23], YL
    4c2c:	7172      	lod	A, dp:0x72 <_g_NvramUser+0x18>
    4c2e:	61fb      	lod	AL, dp:0xfb <_g_u16ActuatorTgtPos+0x1>
    4c30:	b172      	adc	A, dp:0x72 <_g_NvramUser+0x18>
    4c32:	8781      	or	AL, ep:0x81 <_g_NvramUser+0x27>
    4c34:	7258      	lod	A, [S-89]
    4c36:	7159      	lod	A, dp:0x59 <_g_u16MotorCurrentLPFx64+0x1>
    4c38:	b53e      	and	A, dp:0x3e <__data_dp_end+0x2>
    4c3a:	773e      	lod	PC, ep:0x3e <__data_dp_end+0x2>
    4c3c:	623a      	lod	AL, [S-59]
    4c3e:	484f      	macu	D, AL, [X]
    4c40:	380d      	subc	X, #13
    4c42:	3806      	subc	X, #6
    4c44:	e53e      	or	Y, dp:0x3e <__data_dp_end+0x2>
    4c46:	0108      	jmp	0x4e58 <__mlx4_flash_start+0xe58>
    4c48:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    4c4a:	b34f      	adc	A, ep:0x4f <_g_u16CorrectionRatio+0x1>
    4c4c:	b24e      	adc	A, [S-79]
    4c4e:	4710      	mov	ep:0x10 <__dp_noinit_size>, YL
    4c50:	4616      	mov	[S-23], YL
    4c52:	734f      	lod	A, ep:0x4f <_g_u16CorrectionRatio+0x1>
    4c54:	724e      	lod	A, [S-79]
    4c56:	2622      	or	X, [S-35]
    4c58:	580e      	inc	S, #15
    4c5a:	0903      	clrb	io:0x00.3
    4c5c:	0809      	clrb	dp:0x01.1
    4c5e:	62e6      	lod	AL, Y
    4c60:	262c      	or	X, [S-45]
    4c62:	623a      	lod	AL, [S-59]
    4c64:	b581      	and	A, dp:0x81 <_g_NvramUser+0x27>
    4c66:	715a      	lod	A, dp:0x5a <_g_NvramUser>
    4c68:	6394      	lod	AL, ep:0x94 <_g_NvramUser+0x3a>
    4c6a:	b583      	and	A, dp:0x83 <_g_NvramUser+0x29>
    4c6c:	b688      	and	A, io:0x8 <__bist_stat_size>
    4c6e:	2495      	or	X, #-107
    4c70:	b739      	and	A, ep:0x39 <_g_u16StartupDelay+0x1>
    4c72:	b638      	and	A, [S-57]
    4c74:	348a      	and	X, #-118
    4c76:	4c58      	dadjs	D, A
    4c78:	b342      	adc	A, ep:0x42 <__data_dp_end+0x6>
    4c7a:	e780      	or	Y, ep:0x80 <_g_NvramUser+0x26>
    4c7c:	0101      	jmp	0x4e80 <__mlx4_flash_start+0xe80>
    4c7e:	2647      	or	X, [S-72]
    4c80:	b340      	adc	A, ep:0x40 <__data_dp_end+0x4>
    4c82:	b241      	adc	A, [S-66]
    4c84:	e358      	add	Y, ep:0x58 <_g_u16MotorCurrentLPFx64>
    4c86:	ea59      	sub	Y, [S-90]
    4c88:	1002      	call	0x4c8e <__mlx4_flash_start+0xc8e>
    4c8a:	7c04      	lod	X, #4
    4c8c:	2494      	or	X, #-108
    4c8e:	b34e      	adc	A, ep:0x4e <_g_u16CorrectionRatio>
    4c90:	b24f      	adc	A, [S-80]
    4c92:	484f      	macu	D, AL, [X]
    4c94:	834e      	add	AL, ep:0x4e <_g_u16CorrectionRatio>
    4c96:	8a4f      	sub	AL, [S-80]
    4c98:	1001      	call	0x4c9c <__mlx4_flash_start+0xc9c>
    4c9a:	2635      	or	X, [S-54]
    4c9c:	734e      	lod	A, ep:0x4e <_g_u16CorrectionRatio>
    4c9e:	724f      	lod	A, [S-80]
    4ca0:	b358      	adc	A, ep:0x58 <_g_u16MotorCurrentLPFx64>
    4ca2:	b259      	adc	A, [S-90]
    4ca4:	4610      	mov	[S-17], YL
    4ca6:	4716      	mov	ep:0x16 <__dp_noinit_size+0x6>, YL
    4ca8:	8358      	add	AL, ep:0x58 <_g_u16MotorCurrentLPFx64>
    4caa:	8a59      	sub	AL, [S-90]
    4cac:	0004      	jmp	0x4cb6 <__mlx4_flash_start+0xcb6>
    4cae:	e34e      	add	Y, ep:0x4e <_g_u16CorrectionRatio>
    4cb0:	ea4f      	sub	Y, [S-80]
    4cb2:	1001      	call	0x4cb6 <__mlx4_flash_start+0xcb6>
    4cb4:	2635      	or	X, [S-54]
    4cb6:	b358      	adc	A, ep:0x58 <_g_u16MotorCurrentLPFx64>
    4cb8:	4792      	mov	ep:0x92 <_g_NvramUser+0x38>, YL
    4cba:	b259      	adc	A, [S-90]
    4cbc:	4696      	mov	io:0x16 <__dp_noinit_size+0x6>, YL
    4cbe:	b580      	and	A, dp:0x80 <_g_NvramUser+0x26>
    4cc0:	7130      	lod	A, dp:0x30 <_l_u8SynchFieldErrorCounter>
    4cc2:	4596      	mov	dp:0x96 <_g_NvramUser+0x3c>, YL
    4cc4:	7331      	lod	A, ep:0x31 <_g_u8BufferOutID>
    4cc6:	7232      	lod	A, [S-51]
    4cc8:	7133      	lod	A, dp:0x33 <_g_u8SAE_SendErrorState>
    4cca:	e355      	add	Y, ep:0x55 <_g_u16TargetCommutTimerPeriod+0x1>
    4ccc:	ea56      	sub	Y, [S-87]
    4cce:	e957      	sub	Y, dp:0x57 <__data_size+0x1>
    4cd0:	1002      	call	0x4cd6 <__mlx4_flash_start+0xcd6>
    4cd2:	b585      	and	A, dp:0x85 <_g_NvramUser+0x2b>
    4cd4:	2636      	or	X, [S-55]
    4cd6:	b15c      	adc	A, dp:0x5c <_g_NvramUser+0x2>
    4cd8:	a588      	or	A, dp:0x88 <_g_NvramUser+0x2e>
    4cda:	1102      	call	0x4ee0 <__mlx4_flash_start+0xee0>
    4cdc:	a584      	or	A, dp:0x84 <_g_NvramUser+0x2a>
    4cde:	1101      	call	0x4ee2 <__mlx4_flash_start+0xee2>
    4ce0:	26ad      	or	X, io:0x2d <_g_e8ErrorElectric>
    4ce2:	b359      	adc	A, ep:0x59 <_g_u16MotorCurrentLPFx64+0x1>
    4ce4:	b158      	adc	A, dp:0x58 <_g_u16MotorCurrentLPFx64>
    4ce6:	4592      	mov	dp:0x92 <_g_NvramUser+0x38>, YL
    4ce8:	4796      	mov	ep:0x96 <_g_NvramUser+0x3c>, YL
    4cea:	b680      	and	A, io:0x0 <__dp__>
    4cec:	8e80      	cmp	AL, io:0x0 <__dp__>
    4cee:	8781      	or	AL, ep:0x81 <_g_NvramUser+0x27>
    4cf0:	8e80      	cmp	AL, io:0x0 <__dp__>
    4cf2:	734e      	lod	A, ep:0x4e <_g_u16CorrectionRatio>
    4cf4:	b359      	adc	A, ep:0x59 <_g_u16MotorCurrentLPFx64+0x1>
    4cf6:	4710      	mov	ep:0x10 <__dp_noinit_size>, YL
    4cf8:	834e      	add	AL, ep:0x4e <_g_u16CorrectionRatio>
    4cfa:	8e80      	cmp	AL, io:0x0 <__dp__>
    4cfc:	734e      	lod	A, ep:0x4e <_g_u16CorrectionRatio>
    4cfe:	724f      	lod	A, [S-80]
    4d00:	b358      	adc	A, ep:0x58 <_g_u16MotorCurrentLPFx64>
    4d02:	b259      	adc	A, [S-90]
    4d04:	b53e      	and	A, dp:0x3e <__data_dp_end+0x2>
    4d06:	e107      	add	Y, dp:0x7 <_LinProtectedID>
    4d08:	0102      	jmp	0x4f0e <__mlx4_flash_start+0xf0e>
    4d0a:	0005      	jmp	0x4d16 <__mlx4_flash_start+0xd16>
    4d0c:	269c      	or	X, io:0x1c <_g_e8EXVMoveEnableRequestFlag>
    4d0e:	e304      	add	Y, ep:0x4 <_LinMess>
    4d10:	ea05      	sub	Y, [S-6]
    4d12:	0001      	jmp	0x4d16 <__mlx4_flash_start+0xd16>
    4d14:	269c      	or	X, io:0x1c <_g_e8EXVMoveEnableRequestFlag>
    4d16:	834e      	add	AL, ep:0x4e <_g_u16CorrectionRatio>
    4d18:	8a4f      	sub	AL, [S-80]
    4d1a:	e788      	or	Y, ep:0x88 <_g_NvramUser+0x2e>
    4d1c:	ee8c      	cmp	Y, io:0xc <__bist_stat_size+0x4>
    4d1e:	0003      	jmp	0x4d26 <__mlx4_flash_start+0xd26>
    4d20:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    4d22:	4610      	mov	[S-17], YL
    4d24:	4716      	mov	ep:0x16 <__dp_noinit_size+0x6>, YL
    4d26:	e107      	add	Y, dp:0x7 <_LinProtectedID>
    4d28:	0102      	jmp	0x4f2e <__mlx4_flash_start+0xf2e>
    4d2a:	0004      	jmp	0x4d34 <__mlx4_flash_start+0xd34>
    4d2c:	26ad      	or	X, io:0x2d <_g_e8ErrorElectric>
    4d2e:	e304      	add	Y, ep:0x4 <_LinMess>
    4d30:	ea05      	sub	Y, [S-6]
    4d32:	100d      	call	0x4d4e <__mlx4_flash_start+0xd4e>
    4d34:	b582      	and	A, dp:0x82 <_g_NvramUser+0x28>
    4d36:	2636      	or	X, [S-55]
    4d38:	c34e      	add	AH, ep:0x4e <_g_u16CorrectionRatio>
    4d3a:	ca4f      	sub	AH, [S-80]
    4d3c:	e783      	or	Y, ep:0x83 <_g_NvramUser+0x29>
    4d3e:	ee86      	cmp	Y, io:0x6 <_LinMess2>
    4d40:	1003      	call	0x4d48 <__mlx4_flash_start+0xd48>
    4d42:	c581      	or	AH, dp:0x81 <_g_NvramUser+0x27>
    4d44:	4792      	mov	ep:0x92 <_g_NvramUser+0x38>, YL
    4d46:	4696      	mov	io:0x16 <__dp_noinit_size+0x6>, YL
    4d48:	e107      	add	Y, dp:0x7 <_LinProtectedID>
    4d4a:	0102      	jmp	0x4f50 <__mlx4_flash_start+0xf50>
    4d4c:	1004      	call	0x4d56 <__mlx4_flash_start+0xd56>
    4d4e:	26ad      	or	X, io:0x2d <_g_e8ErrorElectric>
    4d50:	e304      	add	Y, ep:0x4 <_LinMess>
    4d52:	ea05      	sub	Y, [S-6]
    4d54:	0002      	jmp	0x4d5a <__mlx4_flash_start+0xd5a>
    4d56:	b581      	and	A, dp:0x81 <_g_NvramUser+0x27>
    4d58:	2636      	or	X, [S-55]
    4d5a:	4d58      	mov	dp:0x58 <_g_u16MotorCurrentLPFx64>, YH
    4d5c:	4902      	mov	dp:0x2 <_LinCmnd>, AH
    4d5e:	b73e      	and	A, ep:0x3e <__data_dp_end+0x2>
    4d60:	7306      	lod	A, ep:0x6 <_LinMess2>
    4d62:	4c02 7ccb 	add	D, #2097315019
    4d66:	7d02 
    4d68:	b25e      	adc	A, [S-95]
    4d6a:	f681      	and	Y, io:0x1 <__dp__+0x1>
    4d6c:	725e      	lod	A, [S-95]
    4d6e:	344a      	and	X, #74
    4d70:	3906      	subc	X, dp:0x6 <_LinMess2>
    4d72:	b681      	and	A, io:0x1 <__dp__+0x1>
    4d74:	724e      	lod	A, [S-79]
    4d76:	7245      	lod	A, [S-70]
    4d78:	b239      	adc	A, [S-58]
    4d7a:	7271      	lod	A, [S-114]
    4d7c:	b68f      	and	A, io:0xf <__bist_stat_size+0x7>
    4d7e:	7239      	lod	A, [S-58]
    4d80:	5c00      	dec	S
    4d82:	4d1c      	mov	dp:0x1c <_g_e8EXVMoveEnableRequestFlag>, YH
    4d84:	4962      	mov	dp:0x62 <_g_NvramUser+0x8>, AH
    4d86:	4d2c      	mov	dp:0x2c <_g_e8ErrorCoil>, YH
    4d88:	492e      	mov	dp:0x2e <_g_e8MotorRequest>, AH
    4d8a:	b680      	and	A, io:0x0 <__dp__>
    4d8c:	720d      	lod	A, [S-14]
    4d8e:	3807      	subc	X, #7
    4d90:	380e      	subc	X, #14
    4d92:	3430      	and	X, #48
    4d94:	580e      	inc	S, #15
    4d96:	0803      	clrb	dp:0x00.3
    4d98:	0907      	clrb	io:0x00.7
    4d9a:	62e6      	lod	AL, Y
    4d9c:	26ca      	or	X, [--PC]
    4d9e:	623a      	lod	AL, [S-59]
    4da0:	a688      	or	A, io:0x8 <__bist_stat_size>
    4da2:	0101      	jmp	0x4fa6 <__mlx4_flash_start+0xfa6>
    4da4:	26ca      	or	X, [--PC]
    4da6:	26f1      	or	X, [Y+1]
    4da8:	623a      	lod	AL, [S-59]
    4daa:	a688      	or	A, io:0x8 <__bist_stat_size>
    4dac:	1101      	call	0x4fb0 <__mlx4_flash_start+0xfb0>
    4dae:	26f1      	or	X, [Y+1]
    4db0:	a781      	or	A, ep:0x81 <_g_NvramUser+0x27>
    4db2:	1105      	call	0x4fbe <__mlx4_flash_start+0xfbe>
    4db4:	626f      	lod	AL, [S-112]
    4db6:	0001      	jmp	0x4dba <__mlx4_flash_start+0xdba>
    4db8:	26ca      	or	X, [--PC]
    4dba:	b586      	and	A, dp:0x86 <_g_NvramUser+0x2c>
    4dbc:	29d4      	sub	X, dp:0xd4 <_LIN_nad>
    4dbe:	b239      	adc	A, [S-58]
    4dc0:	e68f      	or	Y, io:0xf <__bist_stat_size+0x7>
    4dc2:	110e      	call	0x4fe0 <__mlx4_flash_start+0xfe0>
    4dc4:	b680      	and	A, io:0x0 <__dp__>
    4dc6:	e24e      	add	Y, [S-79]
    4dc8:	1108      	call	0x4fda <__mlx4_flash_start+0xfda>
    4dca:	6259      	lod	AL, [S-90]
    4dcc:	6266      	lod	AL, [S-103]
    4dce:	0007      	jmp	0x4dde <__mlx4_flash_start+0xdde>
    4dd0:	b585      	and	A, dp:0x85 <_g_NvramUser+0x2b>
    4dd2:	b271      	adc	A, [S-114]
    4dd4:	7239      	lod	A, [S-58]
    4dd6:	b688      	and	A, io:0x8 <__bist_stat_size>
    4dd8:	2495      	or	X, #-107
    4dda:	724e      	lod	A, [S-79]
    4ddc:	6282      	lod	AL, io:0x2 <_LinCmnd>
    4dde:	26ca      	or	X, [--PC]
    4de0:	26ca      	or	X, [--PC]
    4de2:	b33a      	adc	A, ep:0x3a <_l_u8StallCountO>
    4de4:	f782      	and	Y, ep:0x82 <_g_NvramUser+0x28>
    4de6:	733a      	lod	A, ep:0x3a <_l_u8StallCountO>
    4de8:	628e      	lod	AL, io:0xe <__bist_stat_size+0x6>
    4dea:	7c4c      	lod	X, #76
    4dec:	3805      	subc	X, #5
    4dee:	3808      	subc	X, #8
    4df0:	3906      	subc	X, dp:0x6 <_LinMess2>
    4df2:	4d3e      	mov	dp:0x3e <__data_dp_end+0x2>, YH
    4df4:	4940      	mov	dp:0x40 <__data_dp_end+0x4>, AH
    4df6:	4942      	mov	dp:0x42 <__data_dp_end+0x6>, AH
    4df8:	b580      	and	A, dp:0x80 <_g_NvramUser+0x26>
    4dfa:	7144      	lod	A, dp:0x44 <_g_DiagResponse>
    4dfc:	b589      	and	A, dp:0x89 <_g_NvramUser+0x2f>
    4dfe:	580a      	inc	S, #11
    4e00:	0904      	clrb	io:0x00.4
    4e02:	7172      	lod	A, dp:0x72 <_g_NvramUser+0x18>
    4e04:	62e6      	lod	AL, Y
    4e06:	b172      	adc	A, dp:0x72 <_g_NvramUser+0x18>
    4e08:	26ff      	or	X, [X+7]
    4e0a:	623a      	lod	AL, [S-59]
    4e0c:	4696      	mov	io:0x16 <__dp_noinit_size+0x6>, YL
    4e0e:	4008      	jmp	fp0:0x40
    4e10:	6346      	lod	AL, ep:0x46 <_g_DiagResponse+0x2>
    4e12:	a58f      	or	A, dp:0x8f <_g_NvramUser+0x35>
    4e14:	0101      	jmp	0x5018 <__mlx4_flash_start+0x1018>
    4e16:	2726      	or	X, ep:0x26 <_g_e8ErrorOverTemperature>
    4e18:	1409      	call	0x462c <__mlx4_flash_start+0x62c>
    4e1a:	3807      	subc	X, #7
    4e1c:	380e      	subc	X, #14
    4e1e:	3430      	and	X, #48
    4e20:	27bd      	or	X, ep:0xbd <__bss_dp_size+0xd>
    4e22:	b239      	adc	A, [S-58]
    4e24:	7238      	lod	A, [S-57]
    4e26:	b68b      	and	A, io:0xb <__bist_stat_size+0x3>
    4e28:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    4e2a:	24a3      	or	X, #-93
    4e2c:	37a0      	and	X, ep:0xa0 <_g_NvramUser+0x46>
    4e2e:	b239      	adc	A, [S-58]
    4e30:	7238      	lod	A, [S-57]
    4e32:	4040      	jmp	fp2:0x00
    4e34:	624a      	lod	AL, [S-75]
    4e36:	1504      	call	0x4840 <__mlx4_flash_start+0x840>
    4e38:	b23b      	adc	A, [S-60]
    4e3a:	f681      	and	Y, io:0x1 <__dp__+0x1>
    4e3c:	723b      	lod	A, [S-60]
    4e3e:	24a3      	or	X, #-93
    4e40:	b23b      	adc	A, [S-60]
    4e42:	f688      	and	Y, io:0x8 <__bist_stat_size>
    4e44:	723b      	lod	A, [S-60]
    4e46:	b687      	and	A, io:0x7 <_LinProtectedID>
    4e48:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    4e4a:	24a3      	or	X, #-93
    4e4c:	4060      	jmp	fp3:0x00
    4e4e:	624a      	lod	AL, [S-75]
    4e50:	e589      	or	Y, dp:0x89 <_g_NvramUser+0x2f>
    4e52:	1109      	call	0x5066 <__mlx4_flash_start+0x1066>
    4e54:	b339      	adc	A, ep:0x39 <_g_u16StartupDelay+0x1>
    4e56:	e78f      	or	Y, ep:0x8f <_g_NvramUser+0x35>
    4e58:	010a      	jmp	0x506e <__mlx4_flash_start+0x106e>
    4e5a:	1409      	call	0x466e <__mlx4_flash_start+0x66e>
    4e5c:	b686      	and	A, io:0x6 <_LinMess2>
    4e5e:	7338      	lod	A, ep:0x38 <_g_u16StartupDelay>
    4e60:	b581      	and	A, dp:0x81 <_g_NvramUser+0x27>
    4e62:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    4e64:	24a3      	or	X, #-93
    4e66:	4060      	jmp	fp3:0x00
    4e68:	622e      	lod	AL, [S-47]
    4e6a:	0501      	jmp	0x486e <__mlx4_flash_start+0x86e>
    4e6c:	2739      	or	X, ep:0x39 <_g_u16StartupDelay+0x1>
    4e6e:	c581      	or	AH, dp:0x81 <_g_NvramUser+0x27>
    4e70:	26ff      	or	X, [X+7]
    4e72:	e583      	or	Y, dp:0x83 <_g_NvramUser+0x29>
    4e74:	1001      	call	0x4e78 <__mlx4_flash_start+0xe78>
    4e76:	274c      	or	X, ep:0x4c <_l_u8LinInFrameMsgID>
    4e78:	b791      	and	A, ep:0x91 <_g_NvramUser+0x37>
    4e7a:	d78f      	and	AH, ep:0x8f <_g_NvramUser+0x35>
    4e7c:	8781      	or	AL, ep:0x81 <_g_NvramUser+0x27>
    4e7e:	bf87      	xor	A, ep:0x87 <_g_NvramUser+0x2d>
    4e80:	4792      	mov	ep:0x92 <_g_NvramUser+0x38>, YL
    4e82:	4060      	jmp	fp3:0x00
    4e84:	4d62      	mov	dp:0x62 <_g_NvramUser+0x8>, YH
    4e86:	4e87      	mov	io:0x7 <_LinProtectedID>, YH
    4e88:	b63d      	and	A, [S-62]
    4e8a:	721e      	lod	A, [S-31]
    4e8c:	4962      	mov	dp:0x62 <_g_NvramUser+0x8>, AH
    4e8e:	4d2e      	mov	dp:0x2e <_g_e8MotorRequest>, YH
    4e90:	4e8b      	mov	io:0xb <__bist_stat_size+0x3>, YH
    4e92:	b63d      	and	A, [S-62]
    4e94:	721f      	lod	A, [S-32]
    4e96:	492e      	mov	dp:0x2e <_g_e8MotorRequest>, AH
    4e98:	7492      	lod	PC, #-110
    4e9a:	be81      	xor	A, io:0x1 <__dp__+0x1>
    4e9c:	a581      	or	A, dp:0x81 <_g_NvramUser+0x27>
    4e9e:	1101      	call	0x50a2 <__mlx4_flash_start+0x10a2>
    4ea0:	4692      	mov	io:0x12 <__dp_noinit_size+0x2>, YL
    4ea2:	d245      	adc	AH, [S-70]
    4ea4:	7245      	lod	A, [S-70]
    4ea6:	c581      	or	AH, dp:0x81 <_g_NvramUser+0x27>
    4ea8:	6c01      	lod	YH, #1
    4eaa:	2768      	or	X, ep:0x68 <_g_NvramUser+0xe>
    4eac:	277b      	or	X, ep:0x7b <_g_NvramUser+0x21>
    4eae:	278a      	or	X, ep:0x8a <_g_NvramUser+0x30>
    4eb0:	26ff      	or	X, [X+7]
    4eb2:	26ff      	or	X, [X+7]
    4eb4:	26ff      	or	X, [X+7]
    4eb6:	26ff      	or	X, [X+7]
    4eb8:	275e      	or	X, ep:0x5e <_g_NvramUser+0x4>
    4eba:	26ff      	or	X, [X+7]
    4ebc:	b33b      	adc	A, ep:0x3b <_l_u8StallCountA>
    4ebe:	a781      	or	A, ep:0x81 <_g_NvramUser+0x27>
    4ec0:	0106      	jmp	0x50ce <__mlx4_flash_start+0x10ce>
    4ec2:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    4ec4:	733b      	lod	A, ep:0x3b <_l_u8StallCountA>
    4ec6:	b271      	adc	A, [S-114]
    4ec8:	7238      	lod	A, [S-57]
    4eca:	b68c      	and	A, io:0xc <__bist_stat_size+0x4>
    4ecc:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    4ece:	26ff      	or	X, [X+7]
    4ed0:	b308      	adc	A, ep:0x8 <__bist_stat_size>
    4ed2:	730e      	lod	A, ep:0xe <__bist_stat_size+0x6>
    4ed4:	bf82      	xor	A, ep:0x82 <_g_NvramUser+0x28>
    4ed6:	d345      	adc	AH, ep:0x45 <_g_DiagResponse+0x1>
    4ed8:	b209      	adc	A, [S-10]
    4eda:	720f      	lod	A, [S-16]
    4edc:	be81      	xor	A, io:0x1 <__dp__+0x1>
    4ede:	d792      	and	AH, ep:0x92 <_g_NvramUser+0x38>
    4ee0:	1101      	call	0x50e4 <__mlx4_flash_start+0x10e4>
    4ee2:	26ff      	or	X, [X+7]
    4ee4:	b683      	and	A, io:0x3 <_LinCmnd+0x1>
    4ee6:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    4ee8:	b638      	and	A, [S-57]
    4eea:	a688      	or	A, io:0x8 <__bist_stat_size>
    4eec:	1103      	call	0x50f4 <__mlx4_flash_start+0x10f4>
    4eee:	b33b      	adc	A, ep:0x3b <_l_u8StallCountA>
    4ef0:	f784      	and	Y, ep:0x84 <_g_NvramUser+0x2a>
    4ef2:	733b      	lod	A, ep:0x3b <_l_u8StallCountA>
    4ef4:	24a3      	or	X, #-93
    4ef6:	b30d      	adc	A, ep:0xd <__bist_stat_size+0x5>
    4ef8:	a788      	or	A, ep:0x88 <_g_NvramUser+0x2e>
    4efa:	0102      	jmp	0x5100 <__mlx4_flash_start+0x1100>
    4efc:	b581      	and	A, dp:0x81 <_g_NvramUser+0x27>
    4efe:	26ff      	or	X, [X+7]
    4f00:	b360      	adc	A, ep:0x60 <_g_NvramUser+0x6>
    4f02:	b161      	adc	A, dp:0x61 <_g_NvramUser+0x7>
    4f04:	f580      	and	Y, dp:0x80 <_g_NvramUser+0x26>
    4f06:	b6a7      	and	A, io:0x27 <_g_u8EmergencyRunOcc>
    4f08:	7260      	lod	A, [S-97]
    4f0a:	8781      	or	AL, ep:0x81 <_g_NvramUser+0x27>
    4f0c:	b6a7      	and	A, io:0x27 <_g_u8EmergencyRunOcc>
    4f0e:	7261      	lod	A, [S-98]
    4f10:	b581      	and	A, dp:0x81 <_g_NvramUser+0x27>
    4f12:	26ff      	or	X, [X+7]
    4f14:	b209      	adc	A, [S-10]
    4f16:	e68f      	or	Y, io:0xf <__bist_stat_size+0x7>
    4f18:	b36f      	adc	A, ep:0x6f <_g_NvramUser+0x15>
    4f1a:	1102      	call	0x5120 <__mlx4_flash_start+0x1120>
    4f1c:	f781      	and	Y, ep:0x81 <_g_NvramUser+0x27>
    4f1e:	736f      	lod	A, ep:0x6f <_g_NvramUser+0x15>
    4f20:	b308      	adc	A, ep:0x8 <__bist_stat_size>
    4f22:	4610      	mov	[S-17], YL
    4f24:	4716      	mov	ep:0x16 <__dp_noinit_size+0x6>, YL
    4f26:	4610      	mov	[S-17], YL
    4f28:	4716      	mov	ep:0x16 <__dp_noinit_size+0x6>, YL
    4f2a:	720d      	lod	A, [S-14]
    4f2c:	730c      	lod	A, ep:0xc <__bist_stat_size+0x4>
    4f2e:	b31e      	adc	A, ep:0x1e <__ramfunc_size>
    4f30:	a788      	or	A, ep:0x88 <_g_NvramUser+0x2e>
    4f32:	0104      	jmp	0x513c <__mlx4_flash_start+0x113c>
    4f34:	b31f      	adc	A, ep:0x1f <_g_u8StallTypeComm>
    4f36:	a788      	or	A, ep:0x88 <_g_NvramUser+0x2e>
    4f38:	1105      	call	0x5144 <__mlx4_flash_start+0x1144>
    4f3a:	8788      	or	AL, ep:0x88 <_g_NvramUser+0x2e>
    4f3c:	730c      	lod	A, ep:0xc <__bist_stat_size+0x4>
    4f3e:	b680      	and	A, io:0x0 <__dp__>
    4f40:	720d      	lod	A, [S-14]
    4f42:	27b5      	or	X, ep:0xb5 <__bss_dp_size+0x5>
    4f44:	3bea      	subc	X, ep:0xea <_ml_driver_mode+0x12>
    4f46:	b30c      	adc	A, ep:0xc <__bist_stat_size+0x4>
    4f48:	b10d      	adc	A, dp:0xd <__bist_stat_size+0x5>
    4f4a:	4050      	jmp	fp2:0x80
    4f4c:	4796      	mov	ep:0x96 <_g_NvramUser+0x3c>, YL
    4f4e:	4596      	mov	dp:0x96 <_g_NvramUser+0x3c>, YL
    4f50:	f588      	and	Y, dp:0x88 <_g_NvramUser+0x2e>
    4f52:	b6a7      	and	A, io:0x27 <_g_u8EmergencyRunOcc>
    4f54:	a68c      	or	A, io:0xc <__bist_stat_size+0x4>
    4f56:	0105      	jmp	0x5162 <__mlx4_flash_start+0x1162>
    4f58:	b20d      	adc	A, [S-14]
    4f5a:	f688      	and	Y, io:0x8 <__bist_stat_size>
    4f5c:	720d      	lod	A, [S-14]
    4f5e:	b582      	and	A, dp:0x82 <_g_NvramUser+0x28>
    4f60:	26ff      	or	X, [X+7]
    4f62:	720d      	lod	A, [S-14]
    4f64:	c781      	or	AH, ep:0x81 <_g_NvramUser+0x27>
    4f66:	b7a7      	and	A, ep:0xa7 <_g_NvramUser+0x4d>
    4f68:	730c      	lod	A, ep:0xc <__bist_stat_size+0x4>
    4f6a:	b10d      	adc	A, dp:0xd <__bist_stat_size+0x5>
    4f6c:	4792      	mov	ep:0x92 <_g_NvramUser+0x38>, YL
    4f6e:	4596      	mov	dp:0x96 <_g_NvramUser+0x3c>, YL
    4f70:	3beb      	subc	X, ep:0xeb <_ml_driver_mode+0x13>
    4f72:	7360      	lod	A, ep:0x60 <_g_NvramUser+0x6>
    4f74:	7161      	lod	A, dp:0x61 <_g_NvramUser+0x7>
    4f76:	b582      	and	A, dp:0x82 <_g_NvramUser+0x28>
    4f78:	26ff      	or	X, [X+7]
    4f7a:	1501      	call	0x497e <__mlx4_flash_start+0x97e>
    4f7c:	2800      	sub	X, #0
    4f7e:	b35c      	adc	A, ep:0x5c <_g_NvramUser+0x2>
    4f80:	a784      	or	A, ep:0x84 <_g_NvramUser+0x2a>
    4f82:	1109      	call	0x5196 <__mlx4_flash_start+0x1196>
    4f84:	f784      	and	Y, ep:0x84 <_g_NvramUser+0x2a>
    4f86:	735c      	lod	A, ep:0x5c <_g_NvramUser+0x2>
    4f88:	4804      	mulu	D, A, [Y++]
    4f8a:	b73e      	and	A, ep:0x3e <__data_dp_end+0x2>
    4f8c:	7307      	lod	A, ep:0x7 <_LinProtectedID>
    4f8e:	b36f      	adc	A, ep:0x6f <_g_NvramUser+0x15>
    4f90:	a784      	or	A, ep:0x84 <_g_NvramUser+0x2a>
    4f92:	0101      	jmp	0x5196 <__mlx4_flash_start+0x1196>
    4f94:	24a3      	or	X, #-93
    4f96:	5cc2      	neg	A
    4f98:	b10d      	adc	A, dp:0xd <__bist_stat_size+0x5>
    4f9a:	a588      	or	A, dp:0x88 <_g_NvramUser+0x2e>
    4f9c:	0103      	jmp	0x51a4 <__mlx4_flash_start+0x11a4>
    4f9e:	7ca8      	lod	X, #-88
    4fa0:	7d08      	lod	X, dp:0x8 <__bist_stat_size>
    4fa2:	24a3      	or	X, #-93
    4fa4:	b261      	adc	A, [S-98]
    4fa6:	4600      	mov	[S-1], YL
    4fa8:	e681      	or	Y, io:0x1 <__dp__+0x1>
    4faa:	0104      	jmp	0x51b4 <__mlx4_flash_start+0x11b4>
    4fac:	0001      	jmp	0x4fb0 <__mlx4_flash_start+0xfb0>
    4fae:	24a3      	or	X, #-93
    4fb0:	b783      	and	A, ep:0x83 <_g_NvramUser+0x29>
    4fb2:	27e7      	or	X, ep:0xe7 <_ml_driver_mode+0xf>
    4fb4:	5c00      	dec	S
    4fb6:	b35f      	adc	A, ep:0x5f <_g_NvramUser+0x5>
    4fb8:	a783      	or	A, ep:0x83 <_g_NvramUser+0x29>
    4fba:	1103      	call	0x51c2 <__mlx4_flash_start+0x11c2>
    4fbc:	b36f      	adc	A, ep:0x6f <_g_NvramUser+0x15>
    4fbe:	bf83      	xor	A, ep:0x83 <_g_NvramUser+0x29>
    4fc0:	736f      	lod	A, ep:0x6f <_g_NvramUser+0x15>
    4fc2:	b36f      	adc	A, ep:0x6f <_g_NvramUser+0x15>
    4fc4:	a788      	or	A, ep:0x88 <_g_NvramUser+0x2e>
    4fc6:	1102      	call	0x51cc <__mlx4_flash_start+0x11cc>
    4fc8:	b784      	and	A, ep:0x84 <_g_NvramUser+0x2a>
    4fca:	62bc      	lod	AL, io:0x3c <__data_dp_end>
    4fcc:	b781      	and	A, ep:0x81 <_g_NvramUser+0x27>
    4fce:	b260      	adc	A, [S-97]
    4fd0:	725b      	lod	A, [S-92]
    4fd2:	be87      	xor	A, io:0x7 <_LinProtectedID>
    4fd4:	8681      	or	AL, io:0x1 <__dp__+0x1>
    4fd6:	724c      	lod	A, [S-77]
    4fd8:	c681      	or	AH, io:0x1 <__dp__+0x1>
    4fda:	4696      	mov	io:0x16 <__dp_noinit_size+0x6>, YL
    4fdc:	8681      	or	AL, io:0x1 <__dp__+0x1>
    4fde:	b556      	and	A, dp:0x56 <__data_size>
    4fe0:	7137      	lod	A, dp:0x37 <_g_u8MotorStopDelay>
    4fe2:	c681      	or	AH, io:0x1 <__dp__+0x1>
    4fe4:	b556      	and	A, dp:0x56 <__data_size>
    4fe6:	7136      	lod	A, dp:0x36 <_l_u8VTIdx>
    4fe8:	b25b      	adc	A, [S-92]
    4fea:	be88      	xor	A, io:0x8 <__bist_stat_size>
    4fec:	4788      	mov	ep:0x88 <_g_NvramUser+0x2e>, YL
    4fee:	f693      	and	Y, io:0x13 <__dp_noinit_size+0x3>
    4ff0:	725b      	lod	A, [S-92]
    4ff2:	4696      	mov	io:0x16 <__dp_noinit_size+0x6>, YL
    4ff4:	0002      	jmp	0x4ffa <__mlx4_flash_start+0xffa>
    4ff6:	4d3e      	mov	dp:0x3e <__data_dp_end+0x2>, YH
    4ff8:	27fe      	or	X, ep:0xfe <_g_u16EXVStatusCurrentPositon>
    4ffa:	4d08      	mov	dp:0x8 <__bist_stat_size>, YH
    4ffc:	490a      	mov	dp:0xa <__bist_stat_size+0x2>, AH
    4ffe:	281f      	sub	X, #31
    5000:	b239      	adc	A, [S-58]
    5002:	a68f      	or	A, io:0xf <__bist_stat_size+0x7>
    5004:	0101      	jmp	0x5208 <__mlx4_flash_start+0x1208>
    5006:	2814      	sub	X, #20
    5008:	b35e      	adc	A, ep:0x5e <_g_NvramUser+0x4>
    500a:	a782      	or	A, ep:0x82 <_g_NvramUser+0x28>
    500c:	0103      	jmp	0x5214 <__mlx4_flash_start+0x1214>
    500e:	b689      	and	A, io:0x9 <__bist_stat_size+0x1>
    5010:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    5012:	24a3      	or	X, #-93
    5014:	b36f      	adc	A, ep:0x6f <_g_NvramUser+0x15>
    5016:	a781      	or	A, ep:0x81 <_g_NvramUser+0x27>
    5018:	0107      	jmp	0x5228 <__mlx4_flash_start+0x1228>
    501a:	b108      	adc	A, dp:0x8 <__bist_stat_size>
    501c:	e580      	or	Y, dp:0x80 <_g_NvramUser+0x26>
    501e:	b109      	adc	A, dp:0x9 <__bist_stat_size+0x1>
    5020:	ed80      	cmp	Y, dp:0x80 <_g_NvramUser+0x26>
    5022:	1102      	call	0x5228 <__mlx4_flash_start+0x1228>
    5024:	f782      	and	Y, ep:0x82 <_g_NvramUser+0x28>
    5026:	736f      	lod	A, ep:0x6f <_g_NvramUser+0x15>
    5028:	e24c      	add	Y, [S-77]
    502a:	0109      	jmp	0x523e <__mlx4_flash_start+0x123e>
    502c:	b36f      	adc	A, ep:0x6f <_g_NvramUser+0x15>
    502e:	bf87      	xor	A, ep:0x87 <_g_NvramUser+0x2d>
    5030:	736f      	lod	A, ep:0x6f <_g_NvramUser+0x15>
    5032:	4692      	mov	io:0x12 <__dp_noinit_size+0x2>, YL
    5034:	b308      	adc	A, ep:0x8 <__bist_stat_size>
    5036:	77e6      	lod	PC, ep:0xe6 <_ml_driver_mode+0xe>
    5038:	8681      	or	AL, io:0x1 <__dp__+0x1>
    503a:	b309      	adc	A, ep:0x9 <__bist_stat_size+0x1>
    503c:	77e6      	lod	PC, ep:0xe6 <_ml_driver_mode+0xe>
    503e:	b139      	adc	A, dp:0x39 <_g_u16StartupDelay+0x1>
    5040:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    5042:	7139      	lod	A, dp:0x39 <_g_u16StartupDelay+0x1>
    5044:	1106      	call	0x5252 <__mlx4_flash_start+0x1252>
    5046:	4d3e      	mov	dp:0x3e <__data_dp_end+0x2>, YH
    5048:	4930      	mov	dp:0x30 <_l_u8SynchFieldErrorCounter>, AH
    504a:	b35b      	adc	A, ep:0x5b <_g_NvramUser+0x1>
    504c:	a784      	or	A, ep:0x84 <_g_NvramUser+0x2a>
    504e:	1107      	call	0x525e <__mlx4_flash_start+0x125e>
    5050:	2849      	sub	X, #73
    5052:	b208      	adc	A, [S-9]
    5054:	b309      	adc	A, ep:0x9 <__bist_stat_size+0x1>
    5056:	c581      	or	AH, dp:0x81 <_g_NvramUser+0x27>
    5058:	e14c      	add	Y, dp:0x4c <_l_u8LinInFrameMsgID>
    505a:	0105      	jmp	0x5266 <__mlx4_flash_start+0x1266>
    505c:	6233      	lod	AL, [S-52]
    505e:	7cce      	lod	X, #-50
    5060:	7d08      	lod	X, dp:0x8 <__bist_stat_size>
    5062:	6282      	lod	AL, io:0x2 <_LinCmnd>
    5064:	26ca      	or	X, [--PC]
    5066:	820a      	add	AL, [S-11]
    5068:	8b0b      	sub	AL, ep:0xb <__bist_stat_size+0x3>
    506a:	8681      	or	AL, io:0x1 <__dp__+0x1>
    506c:	8f80      	cmp	AL, ep:0x80 <_g_NvramUser+0x26>
    506e:	0103      	jmp	0x5276 <__mlx4_flash_start+0x1276>
    5070:	b684      	and	A, io:0x4 <_LinMess>
    5072:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    5074:	24a3      	or	X, #-93
    5076:	b36f      	adc	A, ep:0x6f <_g_NvramUser+0x15>
    5078:	a782      	or	A, ep:0x82 <_g_NvramUser+0x28>
    507a:	0105      	jmp	0x5286 <__mlx4_flash_start+0x1286>
    507c:	b35e      	adc	A, ep:0x5e <_g_NvramUser+0x4>
    507e:	bf8d      	xor	A, ep:0x8d <_g_NvramUser+0x33>
    5080:	735e      	lod	A, ep:0x5e <_g_NvramUser+0x4>
    5082:	b581      	and	A, dp:0x81 <_g_NvramUser+0x27>
    5084:	29d4      	sub	X, dp:0xd4 <_LIN_nad>
    5086:	b35e      	adc	A, ep:0x5e <_g_NvramUser+0x4>
    5088:	f782      	and	Y, ep:0x82 <_g_NvramUser+0x28>
    508a:	735e      	lod	A, ep:0x5e <_g_NvramUser+0x4>
    508c:	b783      	and	A, ep:0x83 <_g_NvramUser+0x29>
    508e:	62bc      	lod	AL, io:0x3c <__data_dp_end>
    5090:	24a3      	or	X, #-93
    5092:	b58f      	and	A, dp:0x8f <_g_NvramUser+0x35>
    5094:	7139      	lod	A, dp:0x39 <_g_u16StartupDelay+0x1>
    5096:	b580      	and	A, dp:0x80 <_g_NvramUser+0x26>
    5098:	4d3e      	mov	dp:0x3e <__data_dp_end+0x2>, YH
    509a:	4940      	mov	dp:0x40 <__data_dp_end+0x4>, AH
    509c:	4942      	mov	dp:0x42 <__data_dp_end+0x6>, AH
    509e:	7144      	lod	A, dp:0x44 <_g_DiagResponse>
    50a0:	b738      	and	A, ep:0x38 <_g_u16StartupDelay>
    50a2:	a788      	or	A, ep:0x88 <_g_NvramUser+0x2e>
    50a4:	110b      	call	0x52bc <__mlx4_flash_start+0x12bc>
    50a6:	b239      	adc	A, [S-58]
    50a8:	7238      	lod	A, [S-57]
    50aa:	b685      	and	A, io:0x5 <_LinMess+0x1>
    50ac:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    50ae:	b23b      	adc	A, [S-60]
    50b0:	f684      	and	Y, io:0x4 <_LinMess>
    50b2:	723b      	lod	A, [S-60]
    50b4:	b25e      	adc	A, [S-95]
    50b6:	be8d      	xor	A, io:0xd <__bist_stat_size+0x5>
    50b8:	725e      	lod	A, [S-95]
    50ba:	24a1      	or	X, #-95
    50bc:	3805      	subc	X, #5
    50be:	3808      	subc	X, #8
    50c0:	346b      	and	X, #107
    50c2:	34b0      	and	X, #-80
    50c4:	4930      	mov	dp:0x30 <_l_u8SynchFieldErrorCounter>, AH
    50c6:	b34c      	adc	A, ep:0x4c <_l_u8LinInFrameMsgID>
    50c8:	c781      	or	AH, ep:0x81 <_g_NvramUser+0x27>
    50ca:	4796      	mov	ep:0x96 <_g_NvramUser+0x3c>, YL
    50cc:	b65b      	and	A, [S-92]
    50ce:	7236      	lod	A, [S-55]
    50d0:	8781      	or	AL, ep:0x81 <_g_NvramUser+0x27>
    50d2:	b65b      	and	A, [S-92]
    50d4:	7237      	lod	A, [S-56]
    50d6:	b364      	adc	A, ep:0x64 <_g_NvramUser+0xa>
    50d8:	bf84      	xor	A, ep:0x84 <_g_NvramUser+0x2a>
    50da:	0101      	jmp	0x52de <__mlx4_flash_start+0x12de>
    50dc:	b581      	and	A, dp:0x81 <_g_NvramUser+0x27>
    50de:	858a      	or	AL, dp:0x8a <_g_NvramUser+0x30>
    50e0:	715d      	lod	A, dp:0x5d <_g_NvramUser+0x3>
    50e2:	b164      	adc	A, dp:0x64 <_g_NvramUser+0xa>
    50e4:	bd83      	xor	A, dp:0x83 <_g_NvramUser+0x29>
    50e6:	8582      	or	AL, dp:0x82 <_g_NvramUser+0x28>
    50e8:	714d      	lod	A, dp:0x4d <_l_u8LinInFrameMsgID+0x1>
    50ea:	b36f      	adc	A, ep:0x6f <_g_NvramUser+0x15>
    50ec:	a788      	or	A, ep:0x88 <_g_NvramUser+0x2e>
    50ee:	5c00      	dec	S
    50f0:	0101      	jmp	0x52f4 <__mlx4_flash_start+0x12f4>
    50f2:	5c02      	dec	S, #3
    50f4:	580e      	inc	S, #15
    50f6:	0809      	clrb	dp:0x01.1
    50f8:	090c      	clrb	io:0x01.4
    50fa:	62e6      	lod	AL, Y
    50fc:	b16f      	adc	A, dp:0x6f <_g_NvramUser+0x15>
    50fe:	a588      	or	A, dp:0x88 <_g_NvramUser+0x2e>
    5100:	1103      	call	0x5308 <__mlx4_flash_start+0x1308>
    5102:	a584      	or	A, dp:0x84 <_g_NvramUser+0x2a>
    5104:	0105      	jmp	0x5310 <__mlx4_flash_start+0x1310>
    5106:	24a3      	or	X, #-93
    5108:	2892      	sub	X, #-110
    510a:	623a      	lod	AL, [S-59]
    510c:	a688      	or	A, io:0x8 <__bist_stat_size>
    510e:	0106      	jmp	0x531c <__mlx4_flash_start+0x131c>
    5110:	287a      	sub	X, #122
    5112:	623a      	lod	AL, [S-59]
    5114:	a788      	or	A, ep:0x88 <_g_NvramUser+0x2e>
    5116:	1102      	call	0x531c <__mlx4_flash_start+0x131c>
    5118:	be88      	xor	A, io:0x8 <__bist_stat_size>
    511a:	1101      	call	0x531e <__mlx4_flash_start+0x131e>
    511c:	2853      	sub	X, #83
    511e:	a781      	or	A, ep:0x81 <_g_NvramUser+0x27>
    5120:	1107      	call	0x5330 <__mlx4_flash_start+0x1330>
    5122:	287a      	sub	X, #122
    5124:	b14d      	adc	A, dp:0x4d <_l_u8LinInFrameMsgID+0x1>
    5126:	e580      	or	Y, dp:0x80 <_g_NvramUser+0x26>
    5128:	1101      	call	0x532c <__mlx4_flash_start+0x132c>
    512a:	28a6      	sub	X, #-90
    512c:	5cc2      	neg	A
    512e:	287a      	sub	X, #122
    5130:	6241      	lod	AL, [S-66]
    5132:	0001      	jmp	0x5136 <__mlx4_flash_start+0x1136>
    5134:	2711      	or	X, ep:0x11 <__dp_noinit_size+0x1>
    5136:	b14d      	adc	A, dp:0x4d <_l_u8LinInFrameMsgID+0x1>
    5138:	a581      	or	A, dp:0x81 <_g_NvramUser+0x27>
    513a:	1101      	call	0x533e <__mlx4_flash_start+0x133e>
    513c:	6346      	lod	AL, ep:0x46 <_g_DiagResponse+0x2>
    513e:	c581      	or	AH, dp:0x81 <_g_NvramUser+0x27>
    5140:	8d80      	cmp	AL, dp:0x80 <_g_NvramUser+0x26>
    5142:	714d      	lod	A, dp:0x4d <_l_u8LinInFrameMsgID+0x1>
    5144:	e580      	or	Y, dp:0x80 <_g_NvramUser+0x26>
    5146:	1101      	call	0x534a <__mlx4_flash_start+0x134a>
    5148:	0501      	jmp	0x4b4c <__mlx4_flash_start+0xb4c>
    514a:	287a      	sub	X, #122
    514c:	b36f      	adc	A, ep:0x6f <_g_NvramUser+0x15>
    514e:	bf87      	xor	A, ep:0x87 <_g_NvramUser+0x2d>
    5150:	736f      	lod	A, ep:0x6f <_g_NvramUser+0x15>
    5152:	3790      	and	X, ep:0x90 <_g_NvramUser+0x36>
    5154:	3468      	and	X, #104
    5156:	b302      	adc	A, ep:0x2 <_LinCmnd>
    5158:	b203      	adc	A, [S-4]
    515a:	4610      	mov	[S-17], YL
    515c:	4716      	mov	ep:0x16 <__dp_noinit_size+0x6>, YL
    515e:	734e      	lod	A, ep:0x4e <_g_u16CorrectionRatio>
    5160:	724f      	lod	A, [S-80]
    5162:	4c4f      	dadju	D, [X]
    5164:	6217      	lod	AL, [S-24]
    5166:	6233      	lod	AL, [S-52]
    5168:	b582      	and	A, dp:0x82 <_g_NvramUser+0x28>
    516a:	7170      	lod	A, dp:0x70 <_g_NvramUser+0x16>
    516c:	b580      	and	A, dp:0x80 <_g_NvramUser+0x26>
    516e:	484f      	macu	D, AL, [X]
    5170:	380a      	subc	X, #10
    5172:	3420      	and	X, #32
    5174:	3965      	subc	X, dp:0x65 <_g_NvramUser+0xb>
    5176:	3501      	and	X, dp:0x1 <__dp__+0x1>
    5178:	37a4      	and	X, ep:0xa4 <_g_NvramUser+0x4a>
    517a:	346b      	and	X, #107
    517c:	5806      	inc	S, #7
    517e:	090e      	clrb	io:0x01.6
    5180:	623a      	lod	AL, [S-59]
    5182:	484f      	macu	D, AL, [X]
    5184:	b302      	adc	A, ep:0x2 <_LinCmnd>
    5186:	b203      	adc	A, [S-4]
    5188:	4610      	mov	[S-17], YL
    518a:	4716      	mov	ep:0x16 <__dp_noinit_size+0x6>, YL
    518c:	834e      	add	AL, ep:0x4e <_g_u16CorrectionRatio>
    518e:	8a4f      	sub	AL, [S-80]
    5190:	734e      	lod	A, ep:0x4e <_g_u16CorrectionRatio>
    5192:	724f      	lod	A, [S-80]
    5194:	4c4f      	dadju	D, [X]
    5196:	3409      	and	X, #9
    5198:	3808      	subc	X, #8
    519a:	28eb      	sub	X, #-21
    519c:	623a      	lod	AL, [S-59]
    519e:	a688      	or	A, io:0x8 <__bist_stat_size>
    51a0:	1101      	call	0x53a4 <__mlx4_flash_start+0x13a4>
    51a2:	28fb      	sub	X, #-5
    51a4:	351b      	and	X, dp:0x1b <_g_e8EXVInitDirection>
    51a6:	b582      	and	A, dp:0x82 <_g_NvramUser+0x28>
    51a8:	b682      	and	A, io:0x2 <_LinCmnd>
    51aa:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    51ac:	b681      	and	A, io:0x1 <__dp__+0x1>
    51ae:	7201      	lod	A, [S-2]
    51b0:	2487      	or	X, #-121
    51b2:	6217      	lod	AL, [S-24]
    51b4:	b580      	and	A, dp:0x80 <_g_NvramUser+0x26>
    51b6:	0007      	jmp	0x51c6 <__mlx4_flash_start+0x11c6>
    51b8:	1107      	call	0x53c8 <__mlx4_flash_start+0x13c8>
    51ba:	d68f      	and	AH, io:0xf <__bist_stat_size+0x7>
    51bc:	d78f      	and	AH, ep:0x8f <_g_NvramUser+0x35>
    51be:	7234      	lod	A, [S-53]
    51c0:	7335      	lod	A, ep:0x35 <_g_u8NAD+0x1>
    51c2:	6228      	lod	AL, [S-41]
    51c4:	28e5      	sub	X, #-27
    51c6:	2906      	sub	X, dp:0x6 <_LinMess2>
    51c8:	6233      	lod	AL, [S-52]
    51ca:	4040      	jmp	fp2:0x00
    51cc:	3501      	and	X, dp:0x1 <__dp__+0x1>
    51ce:	580a      	inc	S, #11
    51d0:	0902      	clrb	io:0x00.2
    51d2:	62e6      	lod	AL, Y
    51d4:	28e7      	sub	X, #-25
    51d6:	623a      	lod	AL, [S-59]
    51d8:	a684      	or	A, io:0x4 <_LinMess>
    51da:	110d      	call	0x53f6 <__mlx4_flash_start+0x13f6>
    51dc:	b370      	adc	A, ep:0x70 <_g_NvramUser+0x16>
    51de:	4710      	mov	ep:0x10 <__dp_noinit_size>, YL
    51e0:	4710      	mov	ep:0x10 <__dp_noinit_size>, YL
    51e2:	624a      	lod	AL, [S-75]
    51e4:	6346      	lod	AL, ep:0x46 <_g_DiagResponse+0x2>
    51e6:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    51e8:	e15d      	add	Y, dp:0x5d <_g_NvramUser+0x3>
    51ea:	0109      	jmp	0x53fe <__mlx4_flash_start+0x13fe>
    51ec:	622e      	lod	AL, [S-47]
    51ee:	b370      	adc	A, ep:0x70 <_g_NvramUser+0x16>
    51f0:	4784      	mov	ep:0x84 <_g_NvramUser+0x2a>, YL
    51f2:	7370      	lod	A, ep:0x70 <_g_NvramUser+0x16>
    51f4:	28e6      	sub	X, #-26
    51f6:	4040      	jmp	fp2:0x00
    51f8:	624a      	lod	AL, [S-75]
    51fa:	351b      	and	X, dp:0x1b <_g_e8EXVInitDirection>
    51fc:	2853      	sub	X, #83
    51fe:	b370      	adc	A, ep:0x70 <_g_NvramUser+0x16>
    5200:	4040      	jmp	fp2:0x00
    5202:	4784      	mov	ep:0x84 <_g_NvramUser+0x2a>, YL
    5204:	7370      	lod	A, ep:0x70 <_g_NvramUser+0x16>
    5206:	7ccf      	lod	X, #-49
    5208:	7d34      	lod	X, dp:0x34 <_g_u8NAD>
    520a:	28d9      	sub	X, #-39
    520c:	351b      	and	X, dp:0x1b <_g_e8EXVInitDirection>
    520e:	580a      	inc	S, #11
    5210:	0902      	clrb	io:0x00.2
    5212:	62e6      	lod	AL, Y
    5214:	2907      	sub	X, dp:0x7 <_LinProtectedID>
    5216:	623a      	lod	AL, [S-59]
    5218:	a684      	or	A, io:0x4 <_LinMess>
    521a:	0101      	jmp	0x541e <__mlx4_flash_start+0x141e>
    521c:	28fb      	sub	X, #-5
    521e:	b15f      	adc	A, dp:0x5f <_g_NvramUser+0x5>
    5220:	a583      	or	A, dp:0x83 <_g_NvramUser+0x29>
    5222:	1103      	call	0x542a <__mlx4_flash_start+0x142a>
    5224:	b100      	adc	A, dp:0x0 <__dp__>
    5226:	a581      	or	A, dp:0x81 <_g_NvramUser+0x27>
    5228:	0102      	jmp	0x542e <__mlx4_flash_start+0x142e>
    522a:	b785      	and	A, ep:0x85 <_g_NvramUser+0x2b>
    522c:	62bc      	lod	AL, io:0x3c <__data_dp_end>
    522e:	24a3      	or	X, #-93
    5230:	3807      	subc	X, #7
    5232:	3809      	subc	X, #9
    5234:	3468      	and	X, #104
    5236:	6282      	lod	AL, io:0x2 <_LinCmnd>
    5238:	b638      	and	A, [S-57]
    523a:	a688      	or	A, io:0x8 <__bist_stat_size>
    523c:	0101      	jmp	0x5440 <__mlx4_flash_start+0x1440>
    523e:	2494      	or	X, #-108
    5240:	b101      	adc	A, dp:0x1 <__dp__+0x1>
    5242:	b68e      	and	A, io:0xe <__bist_stat_size+0x6>
    5244:	7201      	lod	A, [S-2]
    5246:	b68a      	and	A, io:0xa <__bist_stat_size+0x2>
    5248:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    524a:	3790      	and	X, ep:0x90 <_g_NvramUser+0x36>
    524c:	580e      	inc	S, #15
    524e:	0803      	clrb	dp:0x00.3
    5250:	0906      	clrb	io:0x00.6
    5252:	62e6      	lod	AL, Y
    5254:	2926      	sub	X, dp:0x26 <_g_e8ErrorOverTemperature>
    5256:	623a      	lod	AL, [S-59]
    5258:	a688      	or	A, io:0x8 <__bist_stat_size>
    525a:	010a      	jmp	0x5470 <__mlx4_flash_start+0x1470>
    525c:	248c      	or	X, #-116
    525e:	626f      	lod	AL, [S-112]
    5260:	1007      	call	0x5270 <__mlx4_flash_start+0x1270>
    5262:	b787      	and	A, ep:0x87 <_g_NvramUser+0x2d>
    5264:	b684      	and	A, io:0x4 <_LinMess>
    5266:	62ca      	lod	AL, [--PC]
    5268:	628e      	lod	AL, io:0xe <__bist_stat_size+0x6>
    526a:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    526c:	7370      	lod	A, ep:0x70 <_g_NvramUser+0x16>
    526e:	2a05      	sub	X, [S-6]
    5270:	2926      	sub	X, dp:0x26 <_g_e8ErrorOverTemperature>
    5272:	5c00      	dec	S
    5274:	b580      	and	A, dp:0x80 <_g_NvramUser+0x26>
    5276:	4d3e      	mov	dp:0x3e <__data_dp_end+0x2>, YH
    5278:	4954      	mov	dp:0x54 <_g_u16TargetCommutTimerPeriod>, AH
    527a:	4956      	mov	dp:0x56 <__data_size>, AH
    527c:	b33b      	adc	A, ep:0x3b <_l_u8StallCountA>
    527e:	a78d      	or	A, ep:0x8d <_g_NvramUser+0x33>
    5280:	1103      	call	0x5488 <__mlx4_flash_start+0x1488>
    5282:	4940      	mov	dp:0x40 <__data_dp_end+0x4>, AH
    5284:	4942      	mov	dp:0x42 <__data_dp_end+0x6>, AH
    5286:	7144      	lod	A, dp:0x44 <_g_DiagResponse>
    5288:	b78e      	and	A, ep:0x8e <_g_NvramUser+0x34>
    528a:	b763      	and	A, ep:0x63 <_g_NvramUser+0x9>
    528c:	773e      	lod	PC, ep:0x3e <__data_dp_end+0x2>
    528e:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    5290:	735a      	lod	A, ep:0x5a <_g_NvramUser>
    5292:	736a      	lod	A, ep:0x6a <_g_NvramUser+0x10>
    5294:	736b      	lod	A, ep:0x6b <_g_NvramUser+0x11>
    5296:	b303      	adc	A, ep:0x3 <_LinCmnd+0x1>
    5298:	4710      	mov	ep:0x10 <__dp_noinit_size>, YL
    529a:	734f      	lod	A, ep:0x4f <_g_u16CorrectionRatio+0x1>
    529c:	b302      	adc	A, ep:0x2 <_LinCmnd>
    529e:	4716      	mov	ep:0x16 <__dp_noinit_size+0x6>, YL
    52a0:	734e      	lod	A, ep:0x4e <_g_u16CorrectionRatio>
    52a2:	4c4e      	dadju	D, [X++]
    52a4:	34ef      	and	X, #-17
    52a6:	3985      	subc	X, dp:0x85 <_g_NvramUser+0x2b>
    52a8:	3790      	and	X, ep:0x90 <_g_NvramUser+0x36>
    52aa:	4c4f      	dadju	D, [X]
    52ac:	484f      	macu	D, AL, [X]
    52ae:	3806      	subc	X, #6
    52b0:	380a      	subc	X, #10
    52b2:	3428      	and	X, #40
    52b4:	3beb      	subc	X, ep:0xeb <_ml_driver_mode+0x13>
    52b6:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    52b8:	736d      	lod	A, ep:0x6d <_g_NvramUser+0x13>
    52ba:	b588      	and	A, dp:0x88 <_g_NvramUser+0x2e>
    52bc:	b6a7      	and	A, io:0x27 <_g_u8EmergencyRunOcc>
    52be:	726e      	lod	A, [S-111]
    52c0:	b23b      	adc	A, [S-60]
    52c2:	a68d      	or	A, io:0xd <__bist_stat_size+0x5>
    52c4:	1103      	call	0x54cc <__mlx4_flash_start+0x14cc>
    52c6:	4930      	mov	dp:0x30 <_l_u8SynchFieldErrorCounter>, AH
    52c8:	b78c      	and	A, ep:0x8c <_g_NvramUser+0x32>
    52ca:	735b      	lod	A, ep:0x5b <_g_NvramUser+0x1>
    52cc:	2282      	add	X, io:0x2 <_LinCmnd>
    52ce:	622b      	lod	AL, [S-44]
    52d0:	6281      	lod	AL, io:0x1 <__dp__+0x1>
    52d2:	3f88      	xor	X, ep:0x88 <_g_NvramUser+0x2e>
    52d4:	b680      	and	A, io:0x0 <__dp__>
    52d6:	7271      	lod	A, [S-114]
    52d8:	7c54      	lod	X, #84
    52da:	b307      	adc	A, ep:0x7 <_LinProtectedID>
    52dc:	773e      	lod	PC, ep:0x3e <__data_dp_end+0x2>
    52de:	4c04      	add	D, [Y++]
    52e0:	3805      	subc	X, #5
    52e2:	3808      	subc	X, #8
    52e4:	3449      	and	X, #73
    52e6:	3906      	subc	X, dp:0x6 <_LinMess2>
    52e8:	3512      	and	X, dp:0x12 <__dp_noinit_size+0x2>
    52ea:	37a0      	and	X, ep:0xa0 <_g_NvramUser+0x46>
    52ec:	623a      	lod	AL, [S-59]
    52ee:	b58c      	and	A, dp:0x8c <_g_NvramUser+0x32>
    52f0:	b55d      	and	A, dp:0x5d <_g_NvramUser+0x3>
    52f2:	580a      	inc	S, #11
    52f4:	0902      	clrb	io:0x00.2
    52f6:	62e6      	lod	AL, Y
    52f8:	2979      	sub	X, dp:0x79 <_g_NvramUser+0x1f>
    52fa:	623a      	lod	AL, [S-59]
    52fc:	c581      	or	AH, dp:0x81 <_g_NvramUser+0x27>
    52fe:	0102      	jmp	0x5504 <__mlx4_flash_end+0x14>
    5300:	3502      	and	X, dp:0x2 <_LinCmnd>
    5302:	2979      	sub	X, dp:0x79 <_g_NvramUser+0x1f>
    5304:	351b      	and	X, dp:0x1b <_g_e8EXVInitDirection>
    5306:	b271      	adc	A, [S-114]
    5308:	8681      	or	AL, io:0x1 <__dp__+0x1>
    530a:	7271      	lod	A, [S-114]
    530c:	a681      	or	A, io:0x1 <__dp__+0x1>
    530e:	1105      	call	0x551a <__mlx4_flash_end+0x2a>
    5310:	e686      	or	Y, io:0x6 <_LinMess2>
    5312:	0101      	jmp	0x5516 <__mlx4_flash_end+0x26>
    5314:	296c      	sub	X, dp:0x6c <_g_NvramUser+0x12>
    5316:	b584      	and	A, dp:0x84 <_g_NvramUser+0x2a>
    5318:	29d4      	sub	X, dp:0xd4 <_LIN_nad>
    531a:	3809      	subc	X, #9
    531c:	5806      	inc	S, #7
    531e:	0902      	clrb	io:0x00.2
    5320:	623a      	lod	AL, [S-59]
    5322:	29b2      	sub	X, dp:0xb2 <__bss_dp_size+0x2>
    5324:	623a      	lod	AL, [S-59]
    5326:	a688      	or	A, io:0x8 <__bist_stat_size>
    5328:	0101      	jmp	0x552c <__mlx4_flash_end+0x3c>
    532a:	29b2      	sub	X, dp:0xb2 <__bss_dp_size+0x2>
    532c:	b580      	and	A, dp:0x80 <_g_NvramUser+0x26>
    532e:	7143      	lod	A, dp:0x43 <__data_dp_end+0x7>
    5330:	7144      	lod	A, dp:0x44 <_g_DiagResponse>
    5332:	b304      	adc	A, ep:0x4 <_LinMess>
    5334:	b205      	adc	A, [S-6]
    5336:	4792      	mov	ep:0x92 <_g_NvramUser+0x38>, YL
    5338:	4696      	mov	io:0x16 <__dp_noinit_size+0x6>, YL
    533a:	4596      	mov	dp:0x96 <_g_NvramUser+0x3c>, YL
    533c:	7340      	lod	A, ep:0x40 <__data_dp_end+0x4>
    533e:	7241      	lod	A, [S-66]
    5340:	7142      	lod	A, dp:0x42 <__data_dp_end+0x6>
    5342:	4792      	mov	ep:0x92 <_g_NvramUser+0x38>, YL
    5344:	4696      	mov	io:0x16 <__dp_noinit_size+0x6>, YL
    5346:	4596      	mov	dp:0x96 <_g_NvramUser+0x3c>, YL
    5348:	8340      	add	AL, ep:0x40 <__data_dp_end+0x4>
    534a:	8a41      	sub	AL, [S-66]
    534c:	8942      	sub	AL, dp:0x42 <__data_dp_end+0x6>
    534e:	7340      	lod	A, ep:0x40 <__data_dp_end+0x4>
    5350:	7241      	lod	A, [S-66]
    5352:	7142      	lod	A, dp:0x42 <__data_dp_end+0x6>
    5354:	37a0      	and	X, ep:0xa0 <_g_NvramUser+0x46>
    5356:	b788      	and	A, ep:0x88 <_g_NvramUser+0x2e>
    5358:	b682      	and	A, io:0x2 <_LinCmnd>
    535a:	62ca      	lod	AL, [--PC]
    535c:	b33b      	adc	A, ep:0x3b <_l_u8StallCountA>
    535e:	f784      	and	Y, ep:0x84 <_g_NvramUser+0x2a>
    5360:	733b      	lod	A, ep:0x3b <_l_u8StallCountA>
    5362:	24a3      	or	X, #-93
    5364:	6281      	lod	AL, io:0x1 <__dp__+0x1>
    5366:	b271      	adc	A, [S-114]
    5368:	e685      	or	Y, io:0x5 <_LinMess+0x1>
    536a:	0103      	jmp	0x5572 <_INDXtbl+0x32>
    536c:	b784      	and	A, ep:0x84 <_g_NvramUser+0x2a>
    536e:	b585      	and	A, dp:0x85 <_g_NvramUser+0x2b>
    5370:	29bb      	sub	X, dp:0xbb <__bss_dp_size+0xb>
    5372:	b786      	and	A, ep:0x86 <_g_NvramUser+0x2c>
    5374:	b587      	and	A, dp:0x87 <_g_NvramUser+0x2d>
    5376:	b763      	and	A, ep:0x63 <_g_NvramUser+0x9>
    5378:	b561      	and	A, dp:0x61 <_g_NvramUser+0x7>
    537a:	b683      	and	A, io:0x3 <_LinCmnd+0x1>
    537c:	77bc      	lod	PC, ep:0xbc <__bss_dp_size+0xc>
    537e:	b682      	and	A, io:0x2 <_LinCmnd>
    5380:	75bc      	lod	PC, dp:0xbc <__bss_dp_size+0xc>
    5382:	3b33      	subc	X, ep:0x33 <_g_u8SAE_SendErrorState>
    5384:	580f      	inc	S, #16
    5386:	080b      	clrb	dp:0x01.3
    5388:	0902      	clrb	io:0x00.2
    538a:	62e6      	lod	AL, Y
    538c:	29c2      	sub	X, dp:0xc2 <__bss_dp_size+0x12>
    538e:	623a      	lod	AL, [S-59]
    5390:	a688      	or	A, io:0x8 <__bist_stat_size>
    5392:	0105      	jmp	0x559e <_INDXtbl+0x5e>
    5394:	b726      	and	A, ep:0x26 <_g_e8ErrorOverTemperature>
    5396:	bf8f      	xor	A, ep:0x8f <_g_NvramUser+0x35>
    5398:	0101      	jmp	0x559c <_INDXtbl+0x5c>
    539a:	2982      	sub	X, dp:0x82 <_g_NvramUser+0x28>
    539c:	29c2      	sub	X, dp:0xc2 <__bss_dp_size+0x12>
    539e:	623a      	lod	AL, [S-59]
    53a0:	b785      	and	A, ep:0x85 <_g_NvramUser+0x2b>
    53a2:	b682      	and	A, io:0x2 <_LinCmnd>
    53a4:	62ca      	lod	AL, [--PC]
    53a6:	24a3      	or	X, #-93
    53a8:	7172      	lod	A, dp:0x72 <_g_NvramUser+0x18>
    53aa:	b738      	and	A, ep:0x38 <_g_u16StartupDelay>
    53ac:	7370      	lod	A, ep:0x70 <_g_NvramUser+0x16>
    53ae:	b787      	and	A, ep:0x87 <_g_NvramUser+0x2d>
    53b0:	b75f      	and	A, ep:0x5f <_g_NvramUser+0x5>
    53b2:	734f      	lod	A, ep:0x4f <_g_u16CorrectionRatio+0x1>
    53b4:	b786      	and	A, ep:0x86 <_g_NvramUser+0x2c>
    53b6:	b75f      	and	A, ep:0x5f <_g_NvramUser+0x5>
    53b8:	734e      	lod	A, ep:0x4e <_g_u16CorrectionRatio>
    53ba:	4c4e      	dadju	D, [X++]
    53bc:	4c4f      	dadju	D, [X]
    53be:	b784      	and	A, ep:0x84 <_g_NvramUser+0x2a>
    53c0:	b75f      	and	A, ep:0x5f <_g_NvramUser+0x5>
    53c2:	773e      	lod	PC, ep:0x3e <__data_dp_end+0x2>
    53c4:	3469      	and	X, #105
    53c6:	3807      	subc	X, #7
    53c8:	380a      	subc	X, #10
    53ca:	37a0      	and	X, ep:0xa0 <_g_NvramUser+0x46>
    53cc:	b585      	and	A, dp:0x85 <_g_NvramUser+0x2b>
    53ce:	b55d      	and	A, dp:0x5d <_g_NvramUser+0x3>
    53d0:	8581      	or	AL, dp:0x81 <_g_NvramUser+0x27>
    53d2:	580e      	inc	S, #15
    53d4:	0803      	clrb	dp:0x00.3
    53d6:	0906      	clrb	io:0x00.6
    53d8:	62e6      	lod	AL, Y
    53da:	29e9      	sub	X, dp:0xe9 <_ml_driver_mode+0x11>
    53dc:	623a      	lod	AL, [S-59]
    53de:	be88      	xor	A, io:0x8 <__bist_stat_size>
    53e0:	110c      	call	0x55fa <_start+0x12>
    53e2:	2a3c      	sub	X, [S-61]
    53e4:	627c      	lod	AL, [S-125]
    53e6:	0101      	jmp	0x55ea <_start+0x2>
    53e8:	29e9      	sub	X, dp:0xe9 <_ml_driver_mode+0x11>
    53ea:	623a      	lod	AL, [S-59]
    53ec:	c581      	or	AH, dp:0x81 <_g_NvramUser+0x27>
    53ee:	0107      	jmp	0x55fe <_start+0x16>
    53f0:	bf84      	xor	A, ep:0x84 <_g_NvramUser+0x2a>
    53f2:	1104      	call	0x55fc <_start+0x14>
    53f4:	a681      	or	A, io:0x1 <__dp__+0x1>
    53f6:	1102      	call	0x55fc <_start+0x14>
    53f8:	29ef      	sub	X, dp:0xef <_g_u8MotorHoldingCurrEna>
    53fa:	29e9      	sub	X, dp:0xe9 <_ml_driver_mode+0x11>
    53fc:	29ef      	sub	X, dp:0xef <_g_u8MotorHoldingCurrEna>
    53fe:	b101      	adc	A, dp:0x1 <__dp__+0x1>
    5400:	e584      	or	Y, dp:0x84 <_g_NvramUser+0x2a>
    5402:	0103      	jmp	0x560a <__ram_section_init>
    5404:	b372      	adc	A, ep:0x72 <_g_NvramUser+0x18>
    5406:	b684      	and	A, io:0x4 <_LinMess>
    5408:	62ca      	lod	AL, [--PC]
    540a:	b365      	adc	A, ep:0x65 <_g_NvramUser+0xb>
    540c:	a784      	or	A, ep:0x84 <_g_NvramUser+0x2a>
    540e:	1101      	call	0x5612 <__ram_section_init+0x8>
    5410:	2a1b      	sub	X, [S-28]
    5412:	3448      	and	X, #72
    5414:	3790      	and	X, ep:0x90 <_g_NvramUser+0x36>
    5416:	3804      	subc	X, #4
    5418:	3e40      	xor	X, [S-65]
    541a:	3f8c      	xor	X, ep:0x8c <_g_NvramUser+0x32>
    541c:	b723      	and	A, ep:0x23 <_g_i16ChipTemperature+0x1>
    541e:	bf84      	xor	A, ep:0x84 <_g_NvramUser+0x2a>
    5420:	0105      	jmp	0x562c <__ram_section_init+0x22>
    5422:	623a      	lod	AL, [S-59]
    5424:	bf88      	xor	A, ep:0x88 <_g_NvramUser+0x2e>
    5426:	1101      	call	0x562a <__ram_section_init+0x20>
    5428:	2a0e      	sub	X, [S-15]
    542a:	2a3a      	sub	X, [S-59]
    542c:	3e98      	xor	X, io:0x18 <__data_dp_start>
    542e:	580b      	inc	S, #12
    5430:	090d      	clrb	io:0x01.5
    5432:	62e6      	lod	AL, Y
    5434:	2a17      	sub	X, [S-24]
    5436:	3468      	and	X, #104
    5438:	3790      	and	X, ep:0x90 <_g_NvramUser+0x36>
    543a:	3806      	subc	X, #6
    543c:	380a      	subc	X, #10
    543e:	b370      	adc	A, ep:0x70 <_g_NvramUser+0x16>
    5440:	bf88      	xor	A, ep:0x88 <_g_NvramUser+0x2e>
    5442:	010d      	jmp	0x565e <_STACK_IT+0x12>
    5444:	b638      	and	A, [S-57]
    5446:	be88      	xor	A, io:0x8 <__bist_stat_size>
    5448:	110a      	call	0x565e <_STACK_IT+0x12>
    544a:	2a3c      	sub	X, [S-61]
    544c:	627c      	lod	AL, [S-125]
    544e:	0101      	jmp	0x5652 <_STACK_IT+0x6>
    5450:	2a17      	sub	X, [S-24]
    5452:	b723      	and	A, ep:0x23 <_g_i16ChipTemperature+0x1>
    5454:	bf84      	xor	A, ep:0x84 <_g_NvramUser+0x2a>
    5456:	110e      	call	0x5674 <_STACK_IT+0x28>
    5458:	623a      	lod	AL, [S-59]
    545a:	7c05      	lod	X, #5
    545c:	2a17      	sub	X, [S-24]
    545e:	580e      	inc	S, #15
    5460:	0805      	clrb	dp:0x00.5
    5462:	0902      	clrb	io:0x00.2
    5464:	62e6      	lod	AL, Y
    5466:	2a2f      	sub	X, [S-48]
    5468:	627c      	lod	AL, [S-125]
    546a:	2a2f      	sub	X, [S-48]
    546c:	623a      	lod	AL, [S-59]
    546e:	be88      	xor	A, io:0x8 <__bist_stat_size>
    5470:	0103      	jmp	0x5678 <_STACK_IT+0x2c>
    5472:	2a2f      	sub	X, [S-48]
    5474:	622b      	lod	AL, [S-44]
    5476:	2a72      	sub	X, [S-115]
    5478:	4d3e      	mov	dp:0x3e <__data_dp_end+0x2>, YH
    547a:	4930      	mov	dp:0x30 <_l_u8SynchFieldErrorCounter>, AH
    547c:	3449      	and	X, #73
    547e:	3809      	subc	X, #9
    5480:	3805      	subc	X, #5
    5482:	37a0      	and	X, ep:0xa0 <_g_NvramUser+0x46>
    5484:	3986      	subc	X, dp:0x86 <_g_NvramUser+0x2c>
    5486:	580e      	inc	S, #15
    5488:	0803      	clrb	dp:0x00.3
    548a:	0903      	clrb	io:0x00.3
    548c:	62e6      	lod	AL, Y
    548e:	2a43      	sub	X, [S-68]
    5490:	2a60      	sub	X, [S-97]
    5492:	627c      	lod	AL, [S-125]
    5494:	0101      	jmp	0x5698 <__fatal+0xa>
    5496:	2a43      	sub	X, [S-68]
    5498:	623a      	lod	AL, [S-59]
    549a:	b330      	adc	A, ep:0x30 <_l_u8SynchFieldErrorCounter>
    549c:	b231      	adc	A, [S-50]
    549e:	8781      	or	AL, ep:0x81 <_g_NvramUser+0x27>
    54a0:	8e80      	cmp	AL, io:0x0 <__dp__>
    54a2:	7330      	lod	A, ep:0x30 <_l_u8SynchFieldErrorCounter>
    54a4:	7231      	lod	A, [S-50]
    54a6:	b588      	and	A, dp:0x88 <_g_NvramUser+0x2e>
    54a8:	e75d      	or	Y, ep:0x5d <_g_NvramUser+0x3>
    54aa:	b589      	and	A, dp:0x89 <_g_NvramUser+0x2f>
    54ac:	ee5d      	cmp	Y, [S-94]
    54ae:	1102      	call	0x56b4 <__fatal+0x26>
    54b0:	b782      	and	A, ep:0x82 <_g_NvramUser+0x28>
    54b2:	733b      	lod	A, ep:0x3b <_l_u8StallCountA>
    54b4:	b58a      	and	A, dp:0x8a <_g_NvramUser+0x30>
    54b6:	e75d      	or	Y, ep:0x5d <_g_NvramUser+0x3>
    54b8:	b58b      	and	A, dp:0x8b <_g_NvramUser+0x31>
    54ba:	ee5d      	cmp	Y, [S-94]
    54bc:	0001      	jmp	0x54c0 <__mlx4_flash_start+0x14c0>
    54be:	2918      	sub	X, dp:0x18 <__data_dp_start>
    54c0:	623a      	lod	AL, [S-59]
    54c2:	a688      	or	A, io:0x8 <__bist_stat_size>
    54c4:	1101      	call	0x56c8 <__fatal+0x3a>
    54c6:	2a43      	sub	X, [S-68]
    54c8:	b201      	adc	A, [S-2]
    54ca:	b33b      	adc	A, ep:0x3b <_l_u8StallCountA>
    54cc:	a782      	or	A, ep:0x82 <_g_NvramUser+0x28>
    54ce:	1105      	call	0x56da <__fatal+0x4c>
    54d0:	7c05      	lod	X, #5
    54d2:	e684      	or	Y, io:0x4 <_LinMess>
    54d4:	0101      	jmp	0x56d8 <__fatal+0x4a>
    54d6:	29e2      	sub	X, dp:0xe2 <_ml_driver_mode+0xa>
    54d8:	2a1b      	sub	X, [S-28]
    54da:	e684      	or	Y, io:0x4 <_LinMess>
    54dc:	0103      	jmp	0x56e4 <__fatal+0x56>
    54de:	b68f      	and	A, io:0xf <__bist_stat_size+0x7>
    54e0:	62b5      	lod	AL, io:0x35 <_g_u8NAD+0x1>
    54e2:	24a3      	or	X, #-93
    54e4:	b783      	and	A, ep:0x83 <_g_NvramUser+0x29>
    54e6:	b682      	and	A, io:0x2 <_LinCmnd>
    54e8:	62ca      	lod	AL, [--PC]
    54ea:	b780      	and	A, ep:0x80 <_g_NvramUser+0x26>
    54ec:	733b      	lod	A, ep:0x3b <_l_u8StallCountA>
    54ee:	24a3      	or	X, #-93

Disassembly of section .mlx4_table:

00005540 <_INDXtbl>:
    5540:	c0c0      	add	AH, #-64
    5542:	c0c0      	add	AH, #-64
    5544:	c0c0      	add	AH, #-64
    5546:	c0c0      	add	AH, #-64
    5548:	c0c0      	add	AH, #-64
    554a:	c0c0      	add	AH, #-64
    554c:	c0c0      	add	AH, #-64
    554e:	c0c0      	add	AH, #-64
    5550:	c0c0      	add	AH, #-64
    5552:	c0c0      	add	AH, #-64
    5554:	c0c0      	add	AH, #-64
    5556:	c0c0      	add	AH, #-64
    5558:	c0c0      	add	AH, #-64
    555a:	c0c0      	add	AH, #-64
    555c:	c0c0      	add	AH, #-64
    555e:	c0c0      	add	AH, #-64
    5560:	c0c0      	add	AH, #-64
    5562:	c0c0      	add	AH, #-64
    5564:	c0c0      	add	AH, #-64
    5566:	c0c0      	add	AH, #-64
    5568:	c0c0      	add	AH, #-64
    556a:	c0c0      	add	AH, #-64
    556c:	c0c0      	add	AH, #-64
    556e:	c0c0      	add	AH, #-64
    5570:	c0c0      	add	AH, #-64
    5572:	c0c0      	add	AH, #-64
    5574:	c0c0      	add	AH, #-64
    5576:	c0c0      	add	AH, #-64
    5578:	c0c0      	add	AH, #-64
    557a:	c0c0      	add	AH, #-64
    557c:	1110      	call	0x579e <__prestart+0x78>
    557e:	c0c0      	add	AH, #-64
    5580:	2b0b      	sub	X, ep:0xb <__bist_stat_size+0x3>
    5582:	a0a0      	add	A, #-96
    5584:	a0a0      	add	A, #-96
    5586:	a0a0      	add	A, #-96
    5588:	a0a0      	add	A, #-96
    558a:	a0a0      	add	A, #-96
    558c:	a0a0      	add	A, #-96
    558e:	a0a0      	add	A, #-96
    5590:	2707      	or	X, ep:0x7 <_LinProtectedID>
    5592:	a0a0      	add	A, #-96
    5594:	a0a0      	add	A, #-96
    5596:	a0a0      	add	A, #-96
    5598:	a0a0      	add	A, #-96
    559a:	a0a0      	add	A, #-96
    559c:	a0a0      	add	A, #-96
    559e:	a0a0      	add	A, #-96
    55a0:	a0a0      	add	A, #-96
    55a2:	a0a0      	add	A, #-96
    55a4:	a0a0      	add	A, #-96
    55a6:	a0a0      	add	A, #-96
    55a8:	a0a0      	add	A, #-96
    55aa:	a0a0      	add	A, #-96
    55ac:	a0a0      	add	A, #-96
    55ae:	a0a0      	add	A, #-96
    55b0:	a0a0      	add	A, #-96
    55b2:	a0a0      	add	A, #-96
    55b4:	a0a0      	add	A, #-96
    55b6:	a0a0      	add	A, #-96
    55b8:	a0a0      	add	A, #-96
    55ba:	a0a0      	add	A, #-96
    55bc:	a0a0      	add	A, #-96
    55be:	a0a0      	add	A, #-96

000055c0 <_AUTOADDtbl>:
    55c0:	2610      	or	X, [S-17]
    55c2:	1626      	call	0x5210 <__mlx4_flash_start+0x1210>
    55c4:	0000      	nop
    55c6:	0000      	nop

Disassembly of section .mlx16_vectors:

0000bf68 <__vectors>:
    bf68:	54f0      	mov	UPr, #0
    bf6a:	76da 5726 	jmpf	0x5726 <__prestart>
    bf6e:	a55a      	or	A, dp:0x5a <_g_NvramUser>
    bf70:	54f8      	mov	UPr, #8
    bf72:	76da 564c 	jmpf	0x564c <_STACK_IT>
    bf76:	0000      	nop
    bf78:	54f8      	mov	UPr, #8
    bf7a:	6402      	lod	YL, #2
    bf7c:	76da 568e 	jmpf	0x568e <__fatal>
    bf80:	54f8      	mov	UPr, #8
    bf82:	6403      	lod	YL, #3
    bf84:	76da 568e 	jmpf	0x568e <__fatal>
    bf88:	54f8      	mov	UPr, #8
    bf8a:	6404      	lod	YL, #4
    bf8c:	76da 568e 	jmpf	0x568e <__fatal>
    bf90:	54f0      	mov	UPr, #0
    bf92:	6405      	lod	YL, #5
    bf94:	76da 568e 	jmpf	0x568e <__fatal>
    bf98:	54f0      	mov	UPr, #0
    bf9a:	6406      	lod	YL, #6
    bf9c:	76da 568e 	jmpf	0x568e <__fatal>
    bfa0:	54f0      	mov	UPr, #0
    bfa2:	6407      	lod	YL, #7
    bfa4:	76da 568e 	jmpf	0x568e <__fatal>
    bfa8:	54f0      	mov	UPr, #0
    bfaa:	6408      	lod	YL, #8
    bfac:	76da 568e 	jmpf	0x568e <__fatal>
    bfb0:	54d4      	psup	#4
    bfb2:	76da 5dc0 	jmpf	0x5dc0 <_linit>
    bfb6:	0000      	nop
    bfb8:	54d5      	psup	#5
    bfba:	76da a0d8 	jmpf	0xa0d8 <_TIMER_IT>
    bfbe:	0000      	nop
    bfc0:	54d4      	psup	#4
    bfc2:	76da 85f8 	jmpf	0x85f8 <_ADC_IT>
    bfc6:	0000      	nop
    bfc8:	54f0      	mov	UPr, #0
    bfca:	640c      	lod	YL, #12
    bfcc:	76da 568e 	jmpf	0x568e <__fatal>
    bfd0:	54d3      	psup	#3
    bfd2:	76da 9484 	jmpf	0x9484 <_EXT0_IT>
    bfd6:	0000      	nop
    bfd8:	54f0      	mov	UPr, #0
    bfda:	640e      	lod	YL, #14
    bfdc:	76da 568e 	jmpf	0x568e <__fatal>
    bfe0:	54f0      	mov	UPr, #0
    bfe2:	640f      	lod	YL, #15
    bfe4:	76da 568e 	jmpf	0x568e <__fatal>
    bfe8:	54f0      	mov	UPr, #0
    bfea:	6410      	lod	YL, #16
    bfec:	76da 568e 	jmpf	0x568e <__fatal>
    bff0:	54d2      	psup	#2
    bff2:	76da 895c 	jmpf	0x895c <_EXT4_IT>
    bff6:	0000      	nop
    bff8:	54f0      	mov	UPr, #0
    bffa:	6412      	lod	YL, #18
    bffc:	76da 568e 	jmpf	0x568e <__fatal>

Disassembly of section .system_services:

0000bf60 <mlx_enter_protected_mode>:
    bf60:	08b3      	clrb	MH.3
    bf62:	5401      	ret
    bf64:	0000      	nop

Disassembly of section .ramfunc:

00000740 <_WriteTMTR>:
 *  Write TM_TR register
 */
__attribute__ ((noinline, section(".ramfunc")))
void WriteTMTR (void)
{
    __asm__ __volatile__
 740:	7eda 6000 	lod	X, #24576
 744:	7ada 11b4 	lod	Y, #4532
 748:	54c6      	movsw	[X++], [Y++]
 74a:	72d8 2054 	lod	A, 0x2054 <__ep__+0x1054>
 74e:	a410      	or	A, #16
 750:	52d8 2054 	mov	0x2054 <__ep__+0x1054>, A
 754:	54c6      	movsw	[X++], [Y++]
 756:	b4ef      	and	A, #-17
 758:	52d8 2054 	mov	0x2054 <__ep__+0x1054>, A
 75c:	5401      	ret

Disassembly of section .text:

000055e8 <_start>:
/*
 * Clears M register
 */
static INLINE void SYS_clearCpuStatus (void)
{
    __asm__ __volatile__ (
    55e8:	7000      	lod	A, #0
    55ea:	52e3      	mov	M, A
                             * Note that UPR register (== M[11:8]) was already
                             * initialized during execution of the reset vector
                             * (see JMPVECTOR macro)
                             */

    PRIO = 0xFFFF;          /* set lowest priorties (undefined after reset) */
    55ec:	70ff      	lod	A, #-1
    55ee:	52d8 2004 	mov	0x2004 <__ep__+0x1004>, A

    SET_STACK(&stack);
    55f2:	72da 033e 	lod	A, #830
    55f6:	52ef      	mov	S, A

    _low_level_init();
    55f8:	82db 693a 	callf	0x693a <__low_level_init>
    _ram_section_init();    /* Initialize .data and .bss sections */
    55fc:	1006      	call	0x560a <__ram_section_init>
    _premain();
    55fe:	82db 6a8c 	callf	0x6a8c <__premain>
    (void)main();
    5602:	82db 6fda 	callf	0x6fda <_main>
    _fatal();
    5606:	1043      	call	0x568e <__fatal>
    5608:	5401      	ret

0000560a <__ram_section_init>:
    uint16 *r;
#endif /* !RAM_APPLICATION */


    /* clear .bss and .dp.bss sections */
    for (w = &_bss_dp_start; w < &_bss_dp_end; ) {
    560a:	7ada 003c 	lod	Y, #60
    560e:	eeda 00ec 	cmp	Y, #236
    5612:	1c03      	jnc	0x561a <__ram_section_init+0x10>
        *w++ = 0;
    5614:	7000      	lod	A, #0
    5616:	52d6      	mov	[Y++], A
    5618:	07fa      	jmp	0x560e <__ram_section_init+0x4>
    }

    for (w = &_bss_start; w < &_bss_end; ) {
    561a:	7ada 0152 	lod	Y, #338
    561e:	eeda 0336 	cmp	Y, #822
    5622:	1c03      	jnc	0x562a <__ram_section_init+0x20>
        *w++ = 0;
    5624:	7000      	lod	A, #0
    5626:	52d6      	mov	[Y++], A
    5628:	07fa      	jmp	0x561e <__ram_section_init+0x14>
    }

#if !defined (RAM_APPLICATION)  /* skip ROM-to-RAM loading for RAM application */
    /* initialize .data and .dp.data sections */
    r = &_data_load_start;      /* copy data from rom */
    562a:	7eda a336 	lod	X, #41782

    for (w = &_data_dp_start; w < &_data_dp_end; ) {
    562e:	7ada 0018 	lod	Y, #24
    5632:	eeda 003c 	cmp	Y, #60
    5636:	1c02      	jnc	0x563c <__ram_section_init+0x32>
        *w++ = *r++;
    5638:	54ce      	movsw	[Y++], [X++]
    563a:	07fb      	jmp	0x5632 <__ram_section_init+0x28>
    }

    for (w = &_data_start; w < &_data_end; ) {
    563c:	7ada 00fc 	lod	Y, #252
    5640:	eeda 0152 	cmp	Y, #338
    5644:	1c02      	jnc	0x564a <__ram_section_init+0x40>
        *w++ = *r++;
    5646:	54ce      	movsw	[Y++], [X++]
    5648:	07fb      	jmp	0x5640 <__ram_section_init+0x36>
    564a:	5401      	ret

0000564c <_STACK_IT>:
 */
__MLX_TEXT__ void STACK_IT(void)
{
//	SET_STACK( &stack);
	/* Chip header is valid and chip successfully initialised; LIN Command Reset use AWD to reset chip */
	if ( (bistHeader == C_CHIP_HEADER) && ((bistResetInfo == C_CHIP_STATE_LIN_CMD_RESET) || (bistResetInfo == C_CHIP_STATE_LOADER_PROG_RESET)) )
    564c:	72d8 0336 	lod	A, 0x336 <__bss_end>
    5650:	aeda b598 	cmp	A, #46488
    5654:	1d19      	jne	0x5688 <_STACK_IT+0x3c>
    5656:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    565a:	aeda 3072 	cmp	A, #12402
    565e:	1905      	je	0x566a <_STACK_IT+0x1e>
    5660:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    5664:	aeda 3212 	cmp	A, #12818
    5668:	1d0f      	jne	0x5688 <_STACK_IT+0x3c>
	{
		/* INLINE MLX16_RESET (Don't use stack) */
		do
		{
			if ( (PLL_CTRL & PLL_EN) != 0 )								/* Only delay in case of PLL is active */
    566a:	72d8 203e 	lod	A, 0x203e <__ep__+0x103e>
    566e:	b401      	and	A, #1
    5670:	1903      	je	0x5678 <_STACK_IT+0x2c>
			{
				DELAY_US( 250);											/* Should be called with period > 200us, otherwise bit AWD_WRITE_FAIL will be set and further acknowledgment will fail during next 200 us */
    5672:	7eda 06d6 	lod	X, #1750
    5676:	1bff      	djnz	X, 0x5676 <_STACK_IT+0x2a>
			}
			AWD_CTRL = (AWD_ATT | AWD_WRITE_FAIL | (3u << 8) | 1);		/* Set 1:1 pre-scaler and minimal period; AWD timeout will be 100 us */
    5678:	72da 6301 	lod	A, #25345
    567c:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
		} while ( AWD_CTRL & (AWD_ATT | AWD_WRITE_FAIL) );
    567e:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    5680:	b6da 6000 	and	A, #24576
    5684:	1d72      	jne	0x566a <_STACK_IT+0x1e>
		for ( ; ; ) {
    5686:	07ff      	jmp	0x5686 <_STACK_IT+0x3a>
			/* wait for reset */
		}
	}
	__asm__( "mov yl, #01");
    5688:	6401      	lod	YL, #1
	__asm__( "jmp __fatal");
    568a:	0001      	jmp	0x568e <__fatal>
    568c:	5401      	ret

0000568e <__fatal>:
 * 0x079C: Address of failure (from stack)
 */
__MLX_TEXT__ void _fatal (void)
{
	/* YL = Error-reason; Don't use stack (MMP151125-1) */
	__asm__("lod X, 0x2026");													/* X = [FL_CTRL0] */
    568e:	7ed8 2026 	lod	X, 0x2026 <__ep__+0x1026>
	__asm__("and X, #0x07");													/* X[2:0] = ([FL_CTRL0] & (FL_DBE | FL_SBE | FL_DETECT)) */
    5692:	3407      	and	X, #7
	__asm__("lod A, 0x2040");													/* A = [PLL_STAT] */
    5694:	72d8 2040 	lod	A, 0x2040 <__ep__+0x1040>
	__asm__("and A, #0x03");													/* A[1:0] = (([PLL_STAT] & (PLL_CM | PLL_LOCKED)) */
    5698:	b403      	and	A, #3
	__asm__("asl A, #2");
    569a:	44a2      	asl	A, #2
	__asm__("asl A, #2");														/* A[5:4] = (([PLL_STAT] & (PLL_CM | PLL_LOCKED)) << 4) */
    569c:	44a2      	asl	A, #2
	__asm__("or  A, X");														/* A(L) = ([FL_CTRL0] & (FL_DBE | FL_SBE | FL_DETECT)) | (([PLL_STAT] & (PLL_CM | PLL_LOCKED)) << 4) */
    569e:	a6ee      	or	A, X
	__asm__("lod YH, AL");														/* YH = ([FL_CTRL0] & (FL_DBE | FL_SBE | FL_DETECT)) | (([PLL_STAT] & (PLL_CM | PLL_LOCKED)) << 4) */
    56a0:	6ee0      	lod	YH, AL
	__asm__("mov _bistError, Y");
    56a2:	5ad8 033a 	mov	0x33a <_bistError>, Y
	__asm__("lod A, [S-2]");													/* Save address of failed instruction */
    56a6:	7201      	lod	A, [S-2]
	__asm__("mov _bistErrorInfo, A");											/* Failure address */
    56a8:	52d8 033c 	mov	0x33c <_bistErrorInfo>, A

#if _SUPPORT_CRASH_RECOVERY
	/* Crash recovery */
	if ( (bistResetInfo == C_CHIP_STATE_FATAL_RECOVER_ENA) && ((uint8)(bistError & 0xFF) < 0x05) )	/* MMP151125-1 */
    56ac:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    56b0:	aeda 1a45 	cmp	A, #6725
    56b4:	1d26      	jne	0x5702 <__fatal+0x74>
    56b6:	72d8 033a 	lod	A, 0x33a <_bistError>
    56ba:	8c04      	cmp	AL, #4
    56bc:	1e22      	jug	0x5702 <__fatal+0x74>
	{
		/* Crash recovery is enabled, and type of IRQ is between 0x01 and 0x04 */
		bistResetInfo = C_CHIP_STATE_FATAL_CRASH_RECOVERY;						/* Start recovery (on-going) */
    56be:	72da 1872 	lod	A, #6258
    56c2:	52d8 0338 	mov	0x338 <_bistResetInfo>, A
		SET_STACK( &stack);														/* Re-initialise stack */
    56c6:	72da 033e 	lod	A, #830
    56ca:	52ef      	mov	S, A
		ENTER_SYSTEM_MODE();													/* Protected mode, highest priority (0) (MMP141023-1) */
    56cc:	4407      	mov	R, #0
    56ce:	500c      	call	fp0:0x60
    56d0:	54f0      	mov	UPr, #0
		XI0_PEND = CLR_T1_INT4;
    56d2:	7040      	lod	A, #64
    56d4:	52d8 2034 	mov	0x2034 <__ep__+0x1034>, A
		XI2_PEND = 0xFFFF;														/* Clear all XI2_PEND flags */
    56d8:	70ff      	lod	A, #-1
    56da:	52d8 2038 	mov	0x2038 <__ep__+0x1038>, A
		XI4_PEND = (XI4_OVT | XI4_UV | XI4_OV | XI4_OC_DRV);
    56de:	72da e100 	lod	A, #57600
    56e2:	52d8 203c 	mov	0x203c <__ep__+0x103c>, A
		g_u8Mlx4ErrorState = (uint8) C_MLX4_STATE_IMMEDIATE_RST;				/* Reset MLX4 always */
    56e6:	6080      	lod	AL, #-128
    56e8:	42d8 010e 	mov	0x10e <_g_u8Mlx4ErrorState>, AL
		PEND = CLR_TIMER_IT;													/* Core-Timer */
    56ec:	7020      	lod	A, #32
    56ee:	52d8 2008 	mov	0x2008 <__ep__+0x1008>, A
		SET_PRIORITY( 7);														/* Protected mode, low priority (7) */
    56f2:	54f7      	mov	UPr, #7
		(void) FlashBackgroundTest( 0);
    56f4:	7000      	lod	A, #0
    56f6:	82db 6d3a 	callf	0x6d3a <_FlashBackgroundTest>
				NVRAM_SavePage( NVRAM1_PAGE2 | NVRAM_PAGE_WR_SKIP_WAIT);
			}
		}
#endif /* (_DEBUG_FATAL != FALSE) */

		(void) main();
    56fa:	82db 6fda 	callf	0x6fda <_main>

		/* Should never come here, as main should not be left */
		__asm__( "mov YL, #0x19");												/* C_MLX16_MAIN_FATAL */
    56fe:	6419      	lod	YL, #25
		/* lint -e{974} */ _fatal();
    5700:	17c6      	call	0x568e <__fatal>
	}
#endif /* _SUPPORT_CRASH_RECOVERY */

	SET_STACK( &stack);															/* Re-initialise stack (MMP141023-1) */
    5702:	72da 033e 	lod	A, #830
    5706:	52ef      	mov	S, A
	ENTER_SYSTEM_MODE();														/* Protected mode, highest priority (0) (MMP141023-1) */
    5708:	4407      	mov	R, #0
    570a:	500c      	call	fp0:0x60
    570c:	54f0      	mov	UPr, #0
	FL_CTRL0 &= ~(FL_DBE | FL_SBE);												/* Clear DBE and SBE errors (MMP141023-1) */
    570e:	72d8 2026 	lod	A, 0x2026 <__ep__+0x1026>
    5712:	b4f9      	and	A, #-7
    5714:	52d8 2026 	mov	0x2026 <__ep__+0x1026>, A
		}
	}
#endif /* (_DEBUG_FATAL != FALSE) */

	/* Disable motor driver first, before waiting for watchdog */
	DRVCFG_DIS_UVWT();															/* Tri-state (disconnect) the phase U, V, W and T (MMP130919-1) */
    5718:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    571c:	b6da fe00 	and	A, #65024
    5720:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A

	for (;;) {
    5724:	07ff      	jmp	0x5724 <__fatal+0x96>

00005726 <__prestart>:
 *
 * NOTE: Function with the same name (i.e. low_level_init) linked from
 * application directory overrides this function
 */
__MLX_TEXT__ void _prestart(void)
{
    5726:	5801      	inc	S, #2
    5728:	7000      	lod	A, #0
    572a:	52e3      	mov	M, A
                             * Note that UPR register (== M[11:8]) was already
                             * initialized during execution of the reset vector
                             * (see JMPVECTOR macro)
                             */

    PRIO = 0xFFFF;          /* set lowest priorties (undefined after reset) */
    572c:	70ff      	lod	A, #-1
    572e:	52d8 2004 	mov	0x2004 <__ep__+0x1004>, A

    SET_STACK(&stack);      /* Init stack */
    5732:	72da 033e 	lod	A, #830
    5736:	52ef      	mov	S, A

    NVRAM_LoadAll();        /* Load NVRAM before trimming (NVRAM will be used by trimming) (MMP110921-1) */
    5738:	1130      	call	0x599a <_NVRAM_LoadAll>
         * 0x10E9: CRC8
         * 0x10EA: Bit 7:3: Project Software version ID, Bit 2:0: Patch Software version ID
         * 0x10EB: Project-ID
         * 0x10EC-0x10FB: Patch-table
         */
        if ((FL_CTRL0 & FL_DETECT) == 0)
    573a:	72d8 2026 	lod	A, 0x2026 <__ep__+0x1026>
    573e:	b401      	and	A, #1
    5740:	1d27      	jne	0x5790 <__prestart+0x6a>
 * const uint16_t u16Length: Length (in 16-bit words)
 *
 * returns a 8-bit (extended to 16-bit) CRC (Sum with carry) calculation over the specified area.
 */
__MLX_TEXT__ static __inline__ uint16 nvram_CalcCRC( const uint16_t *pu16BeginAddress, const uint16_t u16Length)
{
    5742:	62d8 10e8 	lod	AL, 0x10e8 <__ep__+0xe8>
    5746:	5cf2      	usex	A
    5748:	4422      	asl	A
    574a:	7ada 10e8 	lod	Y, #4328
    574e:	eae2      	sub	Y, A
    5750:	62d8 10e8 	lod	AL, 0x10e8 <__ep__+0xe8>
    5754:	5cf2      	usex	A
    5756:	7ee2      	lod	X, A
    5758:	7014      	lod	A, #20
    575a:	aaee      	sub	A, X
    575c:	4432      	lsr	A
    uint16 u16Result;
    uint16 u16Result2;  /* Clobbering of the register */
    uint16 u16Result3;  /* Clobbering of the register */
    __asm__ __volatile__
    575e:	7ee2      	lod	X, A
    5760:	7000      	lod	A, #0
    5762:	08a7      	clrb	ML.7
    5764:	b2d6      	adc	A, [Y++]
    5766:	1bfe      	djnz	X, 0x5764 <__prestart+0x3e>
    5768:	92e4      	adc	AL, AH
    576a:	9000      	adc	AL, #0
    576c:	5cf2      	usex	A
        {
            /* This is a ROM chip */
            uint16 u16CRC = nvram_CalcCRC( ((uint16*) 0x10E8) - u16PatchSize,
                                           ((END_MLX_PATCH_ADDR + 1) - 0x10E8 - u16PatchSize)/2 );

            if ( u16CRC == 0xFFU )
    576e:	aeda 00ff 	cmp	A, #255
    5772:	1d0e      	jne	0x5790 <__prestart+0x6a>
            {
                /* Correct Checksum */
                if ( (u16PatchVersion & C_NVRAM_PATCH_MASK) == C_NVRAM_PATCH_ID )
    5774:	72d8 10ea 	lod	A, 0x10ea <__ep__+0xea>
    5778:	b4f8      	and	A, #-8
    577a:	aeda 04b8 	cmp	A, #1208
    577e:	1d08      	jne	0x5790 <__prestart+0x6a>
                {
                    /* Correct Project-ID and ROM Firmware version */
                    uint16 *u16PatchAddr = (uint16*) BGN_MLX_PATCH_ADDR;
    5780:	7eda 10ec 	lod	X, #4332
                    uint16 *u16PatchIo = (uint16*) &PATCH0_I;
    5784:	7ada 200c 	lod	Y, #8204
                    do
                    {
                        *u16PatchIo++ = *u16PatchAddr++;
    5788:	54ce      	movsw	[Y++], [X++]
                    } while ( u16PatchIo <= (uint16*) &PATCH3_A);
    578a:	eeda 201a 	cmp	Y, #8218
    578e:	1a7c      	jule	0x5788 <__prestart+0x62>
     *
     *****************************************************************************
     */
    __MLX_TEXT__  static INLINE void bist_CheckReset (void)
    {
        if ( bistHeader == C_CHIP_HEADER )                                     /* Chip header is valid and chip successfully initialized by ... */
    5790:	72d8 0336 	lod	A, 0x336 <__bss_end>
    5794:	aeda b598 	cmp	A, #46488
    5798:	1901      	je	0x579c <__prestart+0x76>
    579a:	0037      	jmp	0x580a <__prestart+0xe4>
        {
            if ( ((AWD_CTRL & AWD_RST) != 0) || WD_BOOT_CHECK() )              /* Check both Analog Watchdog and Digital Watchdog */
    579c:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    579e:	ac00      	cmp	A, #0
    57a0:	1a84      	jsl	0x57aa <__prestart+0x84>
    57a2:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    57a6:	8c00      	cmp	AL, #0
    57a8:	1e98      	jsge	0x57da <__prestart+0xb4>
            {
                if ( (bistResetInfo != C_CHIP_STATE_LIN_CMD_RESET) &&
    57aa:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    57ae:	aeda 3072 	cmp	A, #12402
    57b2:	1d01      	jne	0x57b6 <__prestart+0x90>
    57b4:	0031      	jmp	0x5818 <__prestart+0xf2>
    57b6:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    57ba:	aeda 3212 	cmp	A, #12818
    57be:	192c      	je	0x5818 <__prestart+0xf2>
                     (bistResetInfo != C_CHIP_STATE_LOADER_PROG_RESET) )
                {
                    if ( (bistResetInfo == C_CHIP_STATE_COLD_START) ||         /* Chip-state is Cold-start or (pass including RAM-init) or ... */
    57c0:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    57c4:	1905      	je	0x57d0 <__prestart+0xaa>
    57c6:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    57ca:	aeda 1a45 	cmp	A, #6725
    57ce:	1d03      	jne	0x57d6 <__prestart+0xb0>
                         (bistResetInfo == C_CHIP_STATE_FATAL_RECOVER_ENA) )   /* ... Chip-state is fatal-recovery enabled (fully initialized) */
                    {
                        bistResetInfo = C_CHIP_STATE_WATCHDOG_RESET;
    57d0:	72da 5c92 	lod	A, #23698
    57d4:	000d      	jmp	0x57f0 <__prestart+0xca>
                    }
                    else
                    {
                        bistResetInfo = C_CHIP_STATE_COLD_START;
    57d6:	7c00      	lod	X, #0
    57d8:	0015      	jmp	0x5804 <__prestart+0xde>
                    /* LIN Command Reset
                     * or
                     * Loader enter Programming mode Reset */
                }
            }
            else if ( (bistResetInfo != C_CHIP_STATE_LIN_CMD_RESET) &&         /* LIN Command Reset must be passed through Analod Watchdog reset */
    57da:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    57de:	aeda 3072 	cmp	A, #12402
    57e2:	1909      	je	0x57f6 <__prestart+0xd0>
    57e4:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    57e8:	aeda 3212 	cmp	A, #12818
    57ec:	1904      	je	0x57f6 <__prestart+0xd0>
                      (bistResetInfo != C_CHIP_STATE_LOADER_PROG_RESET) )      /* Loader Prog Reset must be passed through Analog Watchdog reset */
            {
                bistResetInfo = C_CHIP_STATE_COLD_START;
    57ee:	7000      	lod	A, #0
    57f0:	52d8 0338 	mov	0x338 <_bistResetInfo>, A
    57f4:	0011      	jmp	0x5818 <__prestart+0xf2>
            }
            else if ( bistResetInfo == C_CHIP_STATE_FATAL_RECOVER_ENA )
    57f6:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    57fa:	aeda 1a45 	cmp	A, #6725
    57fe:	1d0c      	jne	0x5818 <__prestart+0xf2>
            {
                bistResetInfo = C_CHIP_STATE_UV_RESET;
    5800:	7eda 56d2 	lod	X, #22226
    5804:	5ed8 0338 	mov	0x338 <_bistResetInfo>, X
    5808:	0007      	jmp	0x5818 <__prestart+0xf2>
            }
        }
        else
        {
            bistResetInfo = C_CHIP_STATE_COLD_START;
    580a:	7000      	lod	A, #0
    580c:	52d8 0338 	mov	0x338 <_bistResetInfo>, A
            bistHeader = C_CHIP_HEADER;
    5810:	7eda b598 	lod	X, #46488
    5814:	5ed8 0336 	mov	0x336 <__bss_end>, X

    bist_CheckReset();      /* Check the reason of the reset and store in non initialized memory */

#ifdef HAS_NVRAM_CRC
    /* Incase of Watchdog-reset or LIN-command reset, skip CRC check as it's already performed at cold-start */
    if (
    5818:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    581c:	aeda 3072 	cmp	A, #12402
    5820:	1919      	je	0x5854 <__prestart+0x12e>
    5822:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    5826:	aeda 3212 	cmp	A, #12818
    582a:	1914      	je	0x5854 <__prestart+0x12e>
    582c:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    5830:	aeda 5c92 	cmp	A, #23698
    5834:	190f      	je	0x5854 <__prestart+0x12e>
 * const uint16_t u16Length: Length (in 16-bit words)
 *
 * returns a 8-bit (extended to 16-bit) CRC (Sum with carry) calculation over the specified area.
 */
__MLX_TEXT__ static __inline__ uint16 nvram_CalcCRC( const uint16_t *pu16BeginAddress, const uint16_t u16Length)
{
    5836:	7ada 1180 	lod	Y, #4480
    uint16 u16Result;
    uint16 u16Result2;  /* Clobbering of the register */
    uint16 u16Result3;  /* Clobbering of the register */
    __asm__ __volatile__
    583a:	7c20      	lod	X, #32
    583c:	7000      	lod	A, #0
    583e:	08a7      	clrb	ML.7
    5840:	b2d6      	adc	A, [Y++]
    5842:	1bfe      	djnz	X, 0x5840 <__prestart+0x11a>
    5844:	92e4      	adc	AL, AH
    5846:	9000      	adc	AL, #0
    5848:	5cf2      	usex	A
        uint16 u16CRC;

        /* Melexis Production area - CRC1 */
        u16CRC = nvram_CalcCRC( (uint16*) BGN_MLX_CALIB_ADDRESS_AREA1,
                                ((END_MLX_CALIB_ADDRESS_AREA1 + 1) - BGN_MLX_CALIB_ADDRESS_AREA1)/2 );
        if ( u16CRC != 0xFF )
    584a:	aeda 00ff 	cmp	A, #255
    584e:	1902      	je	0x5854 <__prestart+0x12e>
        {
#ifdef HAS_NVRAM_CRC_FAIL_HANG
            /* Area #1 is corrupt */
            asm( "mov yl, #0xC8");              /* C_ERR_INV_MLXPAGE_CRC1 */    /* MLX NVRAM CRC #1 failure */
    5850:	64c8      	lod	YL, #-56
            asm( "jmpf __fatal");
    5852:	071d      	jmp	0x568e <__fatal>
     *      5. Trimming of the RC Oscillator
     *      6. Trimming of Watchdog RC Oscillator
     *      7. Trimming of the ADC Reference voltages VRH1..3
     *      8. Configure PLL
     */
    CONTROL = OUTB_WE | OUTC_WE;                                            /* Grant access to ANA_OUTx registers */
    5854:	6030      	lod	AL, #48
    5856:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
    ANA_OUTB = EEP_ANA_OUTB_PT35;                                           /* Vdd, Bias, Bandgap */
    585a:	72d8 11a8 	lod	A, 0x11a8 <__ep__+0x1a8>
    585e:	52d8 201e 	mov	0x201e <__ep__+0x101e>, A
    ANA_OUTC = EEP_ANA_OUTC_PT35 | 0x8000;                                  /* PLL, Oscillator, Ena CK_TRIM */
    5862:	72d8 11aa 	lod	A, 0x11aa <__ep__+0x1aa>
    5866:	a6da 8000 	or	A, #32768
    586a:	52d8 2020 	mov	0x2020 <__ep__+0x1020>, A
    ANA_OUTD = EEP_ANA_OUTD_PT35;                                           /* ADC references 1 and 2 trimming */
    586e:	72d8 11ac 	lod	A, 0x11ac <__ep__+0x1ac>
    5872:	52d8 204a 	mov	0x204a <__ep__+0x104a>, A
    ANA_OUTE = (EEP_ANA_OUTE_PT35 & 0x00FF) | 0xC000;                       /* ADC references 3; only low 8 bits are relevant; ADC @ 4MHz */
    5876:	72d8 11ae 	lod	A, 0x11ae <__ep__+0x1ae>
    587a:	b6da 00ff 	and	A, #255
    587e:	a6da c000 	or	A, #49152
    5882:	52d8 204c 	mov	0x204c <__ep__+0x104c>, A
    CONTROL &= ~(OUTB_WE | OUTC_WE);
    5886:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    588a:	94cf      	and	AL, #-49
    588c:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL

#if (MCU_PLL_MULT <= 80)    /* if CPU clock <= 20 MHz */
    CONTROL_EXT = (CONTROL_EXT & ~RDY_OPTION) | RDY_OPT_FL;                 /* use flash-ready option */
#else
    CONTROL_EXT = (CONTROL_EXT & ~RDY_OPTION) | RDY_OPT_1;                  /* use 1 wait-state */
    5890:	72d8 2054 	lod	A, 0x2054 <__ep__+0x1054>
    5894:	b4f9      	and	A, #-7
    5896:	a402      	or	A, #2
    5898:	52d8 2054 	mov	0x2054 <__ep__+0x1054>, A
#endif

    if ( (FL_CTRL0 & FL_DETECT) != 0 )
    589c:	72d8 2026 	lod	A, 0x2026 <__ep__+0x1026>
    58a0:	b401      	and	A, #1
    58a2:	1914      	je	0x58cc <__prestart+0x1a6>
    {
        /* This is a flash chip */
        if ((EEP_TM_TR_LSW | EEP_TM_TR_MSW) != 0)                           /* Check if both Upper 16-bits and Lower 16-bits of TM_TR are NON-ZERO */
    58a4:	72d8 11b4 	lod	A, 0x11b4 <__ep__+0x1b4>
    58a8:	7ad8 11b6 	lod	Y, 0x11b6 <__ep__+0x1b6>
    58ac:	a6e6      	or	A, Y
    58ae:	190e      	je	0x58cc <__prestart+0x1a6>
    extern uint16 _ramfunc_end;

    uint16 *w;
    uint16 *r;

    r = &_ramfunc_load_start;
    58b0:	7eda 55c8 	lod	X, #21960

    for (w = &_ramfunc_start; w < &_ramfunc_end; ) {
    58b4:	7ada 0740 	lod	Y, #1856
    58b8:	eeda 075e 	cmp	Y, #1886
    58bc:	1c05      	jnc	0x58c8 <__prestart+0x1a2>
        *w++ = *r++;
    58be:	54ce      	movsw	[Y++], [X++]
        *w++ = *r++;
    58c0:	54ce      	movsw	[Y++], [X++]
        *w++ = *r++;
    58c2:	54ce      	movsw	[Y++], [X++]
        *w++ = *r++;
    58c4:	54ce      	movsw	[Y++], [X++]
    58c6:	07f8      	jmp	0x58b8 <__prestart+0x192>
    {
        /* This is a flash chip */
        if ((EEP_TM_TR_LSW | EEP_TM_TR_MSW) != 0)                           /* Check if both Upper 16-bits and Lower 16-bits of TM_TR are NON-ZERO */
        {
            install_ram_functions();                                        /* .. install RAM functions (TM_TR can be updated only from RAM ..  */
            WriteTMTR();                                                    /* .. and init TM_TR register to trim the Flash; can start PLL now  */
    58c8:	82db 0740 	callf	0x740 <_WriteTMTR>

__MLX_TEXT__ static void init_PLL (void)
{
    uint_fast8_t i;

    PLL_CTRL = ((uint16)DEF_FBDIV << 8)
    58cc:	72da 6fd1 	lod	A, #28625
    58d0:	52d8 203e 	mov	0x203e <__ep__+0x103e>, A
                | PLL_EN;

    /* The hardware itself takes care that the PLL has locked and therefore
     * reached its final stable frequency before enabling its use.
     */
    for ( i = 0; i < NSAMPLES; i++ )
    58d4:	7800      	lod	Y, #0
    {
        if ( PLL_STAT & PLL_LOCKED )
    58d6:	72d8 2040 	lod	A, 0x2040 <__ep__+0x1040>
    58da:	b401      	and	A, #1
    58dc:	1d03      	jne	0x58e4 <__prestart+0x1be>
                | PLL_EN;

    /* The hardware itself takes care that the PLL has locked and therefore
     * reached its final stable frequency before enabling its use.
     */
    for ( i = 0; i < NSAMPLES; i++ )
    58de:	e001      	add	Y, #1
    58e0:	ec63      	cmp	Y, #99
    58e2:	1a79      	jule	0x58d6 <__prestart+0x1b0>
            break;  /* PLL has successfully locked */
        }
        /* else : try locking again */
    }

    if ( NSAMPLES == i )
    58e4:	ec64      	cmp	Y, #100
    58e6:	1d01      	jne	0x58ea <__prestart+0x1c4>
    {
        /* Locking failed */
        /* TBD */
        for (;;); /* loop until WD reset for the time being */
    58e8:	07ff      	jmp	0x58e8 <__prestart+0x1c2>

    /*
     * Calibrate 1MHz internal clock using CK_TRIM divider
     * This 1MHz clock is used by 15-bit core timer, watchdog and EEPROM
     */
    CK_TRIM = DEF_CK_TRIM;
    58ea:	6024      	lod	AL, #36
    58ec:	42d8 2029 	mov	0x2029 <__ep__+0x1029>, AL

#ifdef HAS_RAM_TEST
    if (       (bistResetInfo == C_CHIP_STATE_LIN_CMD_RESET)
    58f0:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    58f4:	aeda 3072 	cmp	A, #12402
    58f8:	190e      	je	0x5916 <__prestart+0x1f0>
    58fa:	82db 6646 	callf	0x6646 <_LDR_GetState>
    58fe:	8c00      	cmp	AL, #0
    5900:	1d0a      	jne	0x5916 <__prestart+0x1f0>
    5902:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    5906:	aeda 3212 	cmp	A, #12818
    590a:	1905      	je	0x5916 <__prestart+0x1f0>
    590c:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    5910:	aeda 5c92 	cmp	A, #23698
    5914:	1d02      	jne	0x591a <__prestart+0x1f4>
       )
    {
        /* Else: skip RAM test during Flash reprogramming (loader state != 0)
         * otherwise stFixedRamNAD.nad stored in no-init RAM will be corrupted
         */
        __asm__ __volatile__ ("jmp _start");
    5916:	0668      	jmp	0x55e8 <_start>
    5918:	5403      	ret	#4
    }
    else
    {
        /* We're about to start the application .. */
        /* .. execute the RAM test first */
        __asm__ __volatile__ ("jmp _RAM_Test");
    591a:	76da 68ea 	jmpf	0x68ea <_RAM_Test>
    591e:	5403      	ret	#4

00005920 <_MLX16_RESET>:
 */
static INLINE uint16 SYS_getCpuStatus (void)
{
    uint16 status;

    __asm__ __volatile__ (
    5920:	7ae3      	lod	Y, M
 *      In this case analog WD is used for reset. The PLL disabling is done
 *      to decrease AWD reset failure rate
 */
__MLX_TEXT__  void MLX16_RESET (void)
{
    ATOMIC_CODE (
    5922:	4407      	mov	R, #0
    5924:	500c      	call	fp0:0x60
    5926:	54f0      	mov	UPr, #0
    5928:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    592a:	b430      	and	A, #48
    592c:	ac10      	cmp	A, #16
    592e:	1914      	je	0x5958 <_MLX16_RESET+0x38>
    5930:	1e03      	jug	0x5938 <_MLX16_RESET+0x18>
    5932:	ac00      	cmp	A, #0
    5934:	190c      	je	0x594e <_MLX16_RESET+0x2e>
    5936:	002f      	jmp	0x5996 <_MLX16_RESET+0x76>
    5938:	ac20      	cmp	A, #32
    593a:	1903      	je	0x5942 <_MLX16_RESET+0x22>
    593c:	ac30      	cmp	A, #48
    593e:	1904      	je	0x5948 <_MLX16_RESET+0x28>
    5940:	002a      	jmp	0x5996 <_MLX16_RESET+0x76>
    5942:	6000      	lod	AL, #0
    5944:	4282      	mov	io:0x2 <_LinCmnd>, AL
    5946:	07fd      	jmp	0x5942 <_MLX16_RESET+0x22>
    5948:	6000      	lod	AL, #0
    594a:	4282      	mov	io:0x2 <_LinCmnd>, AL
    594c:	07ff      	jmp	0x594c <_MLX16_RESET+0x2c>
    594e:	6001      	lod	AL, #1
    5950:	4282      	mov	io:0x2 <_LinCmnd>, AL
    5952:	6010      	lod	AL, #16
    5954:	4283      	mov	io:0x3 <_LinCmnd+0x1>, AL
    5956:	07ff      	jmp	0x5956 <_MLX16_RESET+0x36>
    5958:	6282      	lod	AL, io:0x2 <_LinCmnd>
    595a:	66e0      	lod	YL, AL
    595c:	5cf6      	usex	Y
    595e:	44a6      	asl	Y, #2
    5960:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    5962:	b403      	and	A, #3
    5964:	4422      	asl	A
    5966:	ac00      	cmp	A, #0
    5968:	1b03      	jsle	0x5970 <_MLX16_RESET+0x50>
    596a:	42e9      	mov	Cx, AL
    596c:	4426      	asl	Y
    596e:	1ffe      	djnz	Cx, 0x596c <_MLX16_RESET+0x4c>
    5970:	ec7d      	cmp	Y, #125
    5972:	1c01      	jnc	0x5976 <_MLX16_RESET+0x56>
    5974:	07ff      	jmp	0x5974 <_MLX16_RESET+0x54>
    5976:	7eda 06d6 	lod	X, #1750
    597a:	1bff      	djnz	X, 0x597a <_MLX16_RESET+0x5a>
    597c:	72da 6301 	lod	A, #25345
    5980:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
    5982:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    5984:	b6da 6000 	and	A, #24576
    5988:	1d76      	jne	0x5976 <_MLX16_RESET+0x56>
    598a:	72d8 203e 	lod	A, 0x203e <__ep__+0x103e>
    598e:	b4fe      	and	A, #-2
    5990:	52d8 203e 	mov	0x203e <__ep__+0x103e>, A
    5994:	07ff      	jmp	0x5994 <_MLX16_RESET+0x74>
/*
 * Set M register value
 */
static INLINE void SYS_setCpuStatus (uint16 status)
{
    __asm__ __volatile__ (
    5996:	5ae3      	mov	M, Y
    5998:	5401      	ret

0000599a <_NVRAM_LoadAll>:
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
        WD_T = 0;                       /* .. acknowledge the watchdog */
    599a:	72d8 2024 	lod	A, 0x2024 <__ep__+0x1024>
    599e:	b401      	and	A, #1
    59a0:	1908      	je	0x59b2 <_NVRAM_LoadAll+0x18>
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    59a2:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    59a4:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    59a6:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    59a8:	b430      	and	A, #48
    59aa:	1977      	je	0x599a <_NVRAM_LoadAll>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    59ac:	6000      	lod	AL, #0
    59ae:	4282      	mov	io:0x2 <_LinCmnd>, AL
    59b0:	07f4      	jmp	0x599a <_NVRAM_LoadAll>
    while ((NV_CTRL & NV_BUSY) != 0) {  /* wait if previous access is ongoing */
        WDG_Manager(); /* polling */
    }

    /* yso: EEPROM Select and Mode select should in two different commands according to spr */
    NV_CTRL = NV_SEL;                   /* select NVRAM2 (both pages) */
    59b2:	72da 8000 	lod	A, #32768
    59b6:	52d8 2024 	mov	0x2024 <__ep__+0x1024>, A
    NV_CTRL = NV_CONF_RECALL | NV_SEL;  /* Execute Recall command (Flash -> RAM) for NVRAM2 */
    59ba:	72da 8001 	lod	A, #32769
    59be:	52d8 2024 	mov	0x2024 <__ep__+0x1024>, A
    59c2:	72d8 2024 	lod	A, 0x2024 <__ep__+0x1024>
    59c6:	b401      	and	A, #1
    59c8:	1908      	je	0x59da <_NVRAM_LoadAll+0x40>
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    59ca:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    59cc:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    59ce:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    59d0:	b430      	and	A, #48
    59d2:	1977      	je	0x59c2 <_NVRAM_LoadAll+0x28>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    59d4:	6000      	lod	AL, #0
    59d6:	4282      	mov	io:0x2 <_LinCmnd>, AL
    59d8:	07f4      	jmp	0x59c2 <_NVRAM_LoadAll+0x28>
    while ((NV_CTRL & NV_BUSY) != 0) {  /* wait until command will be finished */
        WDG_Manager(); /* polling */
    }

    NV_CTRL = 0;                        /* select NVRAM1 (both pages) */
    59da:	7000      	lod	A, #0
    59dc:	52d8 2024 	mov	0x2024 <__ep__+0x1024>, A
    NV_CTRL = NV_CONF_RECALL;           /* Execute Recall (Flash -> RAM) for NVRAM1 */
    59e0:	7001      	lod	A, #1
    59e2:	52d8 2024 	mov	0x2024 <__ep__+0x1024>, A
    59e6:	72d8 2024 	lod	A, 0x2024 <__ep__+0x1024>
    59ea:	b401      	and	A, #1
    59ec:	1908      	je	0x59fe <_NVRAM_LoadAll+0x64>
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    59ee:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    59f0:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    59f2:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    59f4:	b430      	and	A, #48
    59f6:	1977      	je	0x59e6 <_NVRAM_LoadAll+0x4c>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    59f8:	6000      	lod	AL, #0
    59fa:	4282      	mov	io:0x2 <_LinCmnd>, AL
    59fc:	07f4      	jmp	0x59e6 <_NVRAM_LoadAll+0x4c>
    59fe:	5401      	ret

00005a00 <_NVRAM_SavePage>:
__MLX_TEXT__  void NVRAM_SavePage (uint16_t page)
{
    uint16_t mode;


    switch (page & ~NVRAM_PAGE_WR_SKIP_WAIT) {
    5a00:	7ee2      	lod	X, A
    5a02:	b6da 7fff 	and	A, #32767
    5a06:	ac01      	cmp	A, #1
    5a08:	1906      	je	0x5a16 <_NVRAM_SavePage+0x16>
    5a0a:	1803      	jc	0x5a12 <_NVRAM_SavePage+0x12>
    5a0c:	ac02      	cmp	A, #2
    5a0e:	1905      	je	0x5a1a <_NVRAM_SavePage+0x1a>
    5a10:	5401      	ret
        case NVRAM1_PAGE1:
            mode = 0 | NV1_MEM_ALLC | 0;
    5a12:	7810      	lod	Y, #16
            break;
    5a14:	0004      	jmp	0x5a1e <_NVRAM_SavePage+0x1e>

        case NVRAM1_PAGE2:
            mode = 0 | NV1_MEM_ALLC | NV1_MEM_SEL;
    5a16:	7818      	lod	Y, #24
            break;
    5a18:	0002      	jmp	0x5a1e <_NVRAM_SavePage+0x1e>

        case NVRAM2_PAGE1:
            mode = NV_SEL | NV2_MEM_ALLC | 0;
    5a1a:	7ada 8400 	lod	Y, #33792
    5a1e:	72d8 2024 	lod	A, 0x2024 <__ep__+0x1024>
    5a22:	b401      	and	A, #1
    5a24:	1908      	je	0x5a36 <_NVRAM_SavePage+0x36>
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    5a26:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    5a28:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    5a2a:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    5a2c:	b430      	and	A, #48
    5a2e:	1977      	je	0x5a1e <_NVRAM_SavePage+0x1e>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    5a30:	6000      	lod	AL, #0
    5a32:	4282      	mov	io:0x2 <_LinCmnd>, AL
    5a34:	07f4      	jmp	0x5a1e <_NVRAM_SavePage+0x1e>
        while ((NV_CTRL & NV_BUSY) != 0) {  /* wait if previous access is ongoing */
            WDG_Manager(); /* polling */
        }

        /* yso: EEPROM Select and Mode select should in two different commands according to spr */
        NV_CTRL = mode;                     /* select NVRAM chip and page           */
    5a36:	5ad8 2024 	mov	0x2024 <__ep__+0x1024>, Y
        NV_CTRL = mode | NV_CONF_STORE;     /* Execute Store command (RAM -> Flash) */
    5a3a:	e403      	or	Y, #3
    5a3c:	5ad8 2024 	mov	0x2024 <__ep__+0x1024>, Y

		if ( (page & NVRAM_PAGE_WR_SKIP_WAIT) == 0 )
    5a40:	2c00      	cmp	X, #0
    5a42:	1a8c      	jsl	0x5a5c <_NVRAM_SavePage+0x5c>
    5a44:	72d8 2024 	lod	A, 0x2024 <__ep__+0x1024>
    5a48:	b401      	and	A, #1
    5a4a:	1908      	je	0x5a5c <_NVRAM_SavePage+0x5c>
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    5a4c:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    5a4e:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    5a50:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    5a52:	b430      	and	A, #48
    5a54:	1977      	je	0x5a44 <_NVRAM_SavePage+0x44>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    5a56:	6000      	lod	AL, #0
    5a58:	4282      	mov	io:0x2 <_LinCmnd>, AL
    5a5a:	07f4      	jmp	0x5a44 <_NVRAM_SavePage+0x44>
    5a5c:	5401      	ret

00005a5e <_NVRAM_BufferFill>:
 *
 * Notes:
 *  1. NVRAM buffer has only word-size access for writing
 */
__MLX_TEXT__  void NVRAM_BufferFill (uint16_t address, uint8_t data)
{
    5a5e:	7ae2      	lod	Y, A
    5a60:	6203      	lod	AL, [S-4]
    5a62:	5cf2      	usex	A
    5a64:	7ee2      	lod	X, A
    uint16_t *dst;
    uint16_t w;


    if ((address & 1) != 0) {                                   /* if address is odd ..                 */
    5a66:	72e6      	lod	A, Y
    5a68:	b401      	and	A, #1
    5a6a:	1908      	je	0x5a7c <_NVRAM_BufferFill+0x1e>
        address &= ~1;                                          /* .. make it even ..                   */
    5a6c:	f4fe      	and	Y, #-2
        dst = (uint16_t *)(address);
        w = *dst;                                               /* .. and read the word                 */
    5a6e:	72f0      	lod	A, [Y]
        w = (w & 0x00FF) | ((uint16_t)data << 8);               /* replace high-byte with a data byte   */
    5a70:	b6da 00ff 	and	A, #255
    5a74:	36da 00ff 	and	X, #255
    5a78:	7eec      	swap	X
    5a7a:	0003      	jmp	0x5a82 <_NVRAM_BufferFill+0x24>
    }
    else {                                                      /* else: address is even                */
        dst = (uint16_t *)(address);
        w = *dst;                                               /* .. and read the word                 */
    5a7c:	72f0      	lod	A, [Y]
        w = (w & 0xFF00) | data;                                /* replace low-byte with a data byte    */
    5a7e:	b6da ff00 	and	A, #65280
    5a82:	a6ee      	or	A, X
    }

    *dst = w;                                                   /* write the word back to memory        */
    5a84:	52f0      	mov	[Y], A
    5a86:	5401      	ret

00005a88 <_NVRAM_SaveAll>:
 * Notes:
 *  1. Should NOT be used by application. Use NVRAM_Save instead.
 */
__MLX_TEXT__  void NVRAM_SaveAll (void)
{
    NVRAM_SavePage(NVRAM1_PAGE1);
    5a88:	7000      	lod	A, #0
    5a8a:	17ba      	call	0x5a00 <_NVRAM_SavePage>
    NVRAM_SavePage(NVRAM1_PAGE2);
    5a8c:	7001      	lod	A, #1
    5a8e:	17b8      	call	0x5a00 <_NVRAM_SavePage>
    NVRAM_SavePage(NVRAM2_PAGE1);
    5a90:	7002      	lod	A, #2
    5a92:	17b6      	call	0x5a00 <_NVRAM_SavePage>
    5a94:	5401      	ret

00005a96 <_ml_ReleaseBuffer>:
    5a96:	602f      	lod	AL, #47
    5a98:	0033      	jmp	0x5b00 <_ml_ContFrame+0x6>

00005a9a <_ml_ReleaseBufferProg>:
    5a9a:	9401      	and	AL, #1
    5a9c:	44a0      	asl	AL, #2
    5a9e:	44a0      	asl	AL, #2
    5aa0:	840f      	or	AL, #15
    5aa2:	002e      	jmp	0x5b00 <_ml_ContFrame+0x6>

00005aa4 <_ml_DataReady>:
    5aa4:	6ae0      	lod	AH, AL
    5aa6:	6015      	lod	AL, #21
    5aa8:	7eda 0008 	lod	X, #8
    5aac:	7ada 00cc 	lod	Y, #204
    5ab0:	54c6      	movsw	[X++], [Y++]
    5ab2:	54c6      	movsw	[X++], [Y++]
    5ab4:	54c6      	movsw	[X++], [Y++]
    5ab6:	54c6      	movsw	[X++], [Y++]
    5ab8:	0023      	jmp	0x5b00 <_ml_ContFrame+0x6>

00005aba <_ml_AssignFrameToMessageID>:
    5aba:	6a03      	lod	AH, [S-4]
    5abc:	d43f      	and	AH, #63
    5abe:	0004      	jmp	0x5ac8 <_ml_EnableMessage+0x4>

00005ac0 <_ml_DisableMessage>:
    5ac0:	6802      	lod	AH, #2
    5ac2:	0001      	jmp	0x5ac6 <_ml_EnableMessage+0x2>

00005ac4 <_ml_EnableMessage>:
    5ac4:	6803      	lod	AH, #3
    5ac6:	44d4      	rr	AH, #2
    5ac8:	44a0      	asl	AL, #2
    5aca:	44a0      	asl	AL, #2
    5acc:	8406      	or	AL, #6
    5ace:	0018      	jmp	0x5b00 <_ml_ContFrame+0x6>

00005ad0 <_ml_AutoAddressingConfig>:
    5ad0:	44a0      	asl	AL, #2
    5ad2:	44a0      	asl	AL, #2
    5ad4:	840d      	or	AL, #13
    5ad6:	0014      	jmp	0x5b00 <_ml_ContFrame+0x6>

00005ad8 <_ml_SetSlewRate>:
    5ad8:	44a2      	asl	A, #2
    5ada:	44a2      	asl	A, #2
    5adc:	a407      	or	A, #7
    5ade:	0010      	jmp	0x5b00 <_ml_ContFrame+0x6>

00005ae0 <_ml_SetOptions>:
    5ae0:	6a03      	lod	AH, [S-4]
    5ae2:	44a4      	asl	AH, #2
    5ae4:	86e4      	or	AL, AH
    5ae6:	44a0      	asl	AL, #2
    5ae8:	44a0      	asl	AL, #2
    5aea:	840b      	or	AL, #11
    5aec:	c607      	or	AH, [S-8]
    5aee:	44a4      	asl	AH, #2
    5af0:	c605      	or	AH, [S-6]
    5af2:	dc01      	xor	AH, #1
    5af4:	0005      	jmp	0x5b00 <_ml_ContFrame+0x6>

00005af6 <_ml_DiscardFrame>:
    5af6:	6005      	lod	AL, #5
    5af8:	0003      	jmp	0x5b00 <_ml_ContFrame+0x6>

00005afa <_ml_ContFrame>:
    5afa:	6ae0      	lod	AH, AL
    5afc:	6025      	lod	AL, #37
    5afe:	0000      	nop
    5b00:	54e2      	mov	Cx, #2
    5b02:	52d8 0002 	mov	0x2 <_LinCmnd>, A
    5b06:	7ae2      	lod	Y, A
    5b08:	6041      	lod	AL, #65
    5b0a:	42d8 200a 	mov	0x200a <__ep__+0x100a>, AL
    5b0e:	7eda 03e8 	lod	X, #1000
    5b12:	62d8 200a 	lod	AL, 0x200a <__ep__+0x100a>
    5b16:	9402      	and	AL, #2
    5b18:	1d03      	jne	0x5b20 <_ml_ContFrame+0x26>
    5b1a:	1bfb      	djnz	X, 0x5b12 <_ml_ContFrame+0x18>
    5b1c:	7002      	lod	A, #2
    5b1e:	5401      	ret
    5b20:	7ee6      	lod	X, Y
    5b22:	340f      	and	X, #15
    5b24:	72d8 0000 	lod	A, 0x0 <__dp__>
    5b28:	6800      	lod	AH, #0
    5b2a:	aeee      	cmp	A, X
    5b2c:	1d02      	jne	0x5b32 <_ml_ContFrame+0x38>
    5b2e:	7000      	lod	A, #0
    5b30:	5401      	ret
    5b32:	72e6      	lod	A, Y
    5b34:	1fe6      	djnz	Cx, 0x5b02 <_ml_ContFrame+0x8>
    5b36:	7001      	lod	A, #1
    5b38:	5401      	ret

00005b3a <_ml_LinModuleVersion>:
    5b3a:	602a      	lod	AL, #42
    5b3c:	17e1      	call	0x5b00 <_ml_ContFrame+0x6>
    5b3e:	ac00      	cmp	A, #0
    5b40:	1d11      	jne	0x5b64 <_ml_LinModuleVersion+0x2a>
    5b42:	72d8 0000 	lod	A, 0x0 <__dp__>
    5b46:	940f      	and	AL, #15
    5b48:	8c0a      	cmp	AL, #10
    5b4a:	1d0c      	jne	0x5b64 <_ml_LinModuleVersion+0x2a>
    5b4c:	66e4      	lod	YL, AH
    5b4e:	601a      	lod	AL, #26
    5b50:	17d7      	call	0x5b00 <_ml_ContFrame+0x6>
    5b52:	ac00      	cmp	A, #0
    5b54:	1d07      	jne	0x5b64 <_ml_LinModuleVersion+0x2a>
    5b56:	72d8 0000 	lod	A, 0x0 <__dp__>
    5b5a:	940f      	and	AL, #15
    5b5c:	8c0a      	cmp	AL, #10
    5b5e:	1d02      	jne	0x5b64 <_ml_LinModuleVersion+0x2a>
    5b60:	62e8      	lod	AL, YL
    5b62:	5401      	ret
    5b64:	7000      	lod	A, #0
    5b66:	5401      	ret

00005b68 <_ml_GetState>:
    5b68:	44a2      	asl	A, #2
    5b6a:	44a2      	asl	A, #2
    5b6c:	a40c      	or	A, #12
    5b6e:	17c8      	call	0x5b00 <_ml_ContFrame+0x6>
    5b70:	ac00      	cmp	A, #0
    5b72:	1d0b      	jne	0x5b8a <_ml_GetState+0x22>
    5b74:	72d8 0000 	lod	A, 0x0 <__dp__>
    5b78:	8c0c      	cmp	AL, #12
    5b7a:	1d07      	jne	0x5b8a <_ml_GetState+0x22>
    5b7c:	62e4      	lod	AL, AH
    5b7e:	44f4      	asr	AH, #2
    5b80:	44f4      	asr	AH, #2
    5b82:	4ad8 3003 	mov	0x330 <_LinStatus>, AH
    5b86:	b40f      	and	A, #15
    5b88:	5401      	ret
    5b8a:	70ff      	lod	A, #-1
    5b8c:	5401      	ret

00005b8e <_ml_SetBaudRate>:
    5b8e:	44a0      	asl	AL, #2
    5b90:	44a0      	asl	AL, #2
    5b92:	8402      	or	AL, #2
    5b94:	7a03      	lod	Y, [S-4]
    5b96:	6ae8      	lod	AH, YL
    5b98:	07b3      	jmp	0x5b00 <_ml_ContFrame+0x6>

00005b9a <_ml_SetAutoBaudRateMode>:
    5b9a:	6ae0      	lod	AH, AL
    5b9c:	6002      	lod	AL, #2
    5b9e:	84e0      	or	AL, #-32
    5ba0:	07af      	jmp	0x5b00 <_ml_ContFrame+0x6>

00005ba2 <_ml_Connect>:
    5ba2:	6002      	lod	AL, #2
    5ba4:	0008      	jmp	0x5bb6 <_ml_GotoSleep+0x4>

00005ba6 <_ml_Disconnect>:
    5ba6:	6001      	lod	AL, #1
    5ba8:	0006      	jmp	0x5bb6 <_ml_GotoSleep+0x4>

00005baa <_ml_SwitchToFast>:
    5baa:	600f      	lod	AL, #15
    5bac:	0004      	jmp	0x5bb6 <_ml_GotoSleep+0x4>

00005bae <_ml_WakeUp>:
    5bae:	6008      	lod	AL, #8
    5bb0:	0002      	jmp	0x5bb6 <_ml_GotoSleep+0x4>

00005bb2 <_ml_GotoSleep>:
    5bb2:	6004      	lod	AL, #4
    5bb4:	0000      	nop
    5bb6:	44a0      	asl	AL, #2
    5bb8:	44a0      	asl	AL, #2
    5bba:	8401      	or	AL, #1
    5bbc:	07a1      	jmp	0x5b00 <_ml_ContFrame+0x6>

00005bbe <_ml_GetLinEventData>:
__MLX_TEXT__  void ml_GetLinEventData (void)
{
    uint16_t LinCommand;


    SLVIT = 0xAAU;                      /* Disable all slave interrupts                 */
    5bbe:	60aa      	lod	AL, #-86
    5bc0:	42d8 200b 	mov	0x200b <__ep__+0x100b>, AL
    LinMessage = LinMess;               /* Get the message from the shared memory area  */
    5bc4:	7104      	lod	A, dp:0x4 <_LinMess>
    5bc6:	51d6      	mov	dp:0xd6 <_LinMessage>, A
#if defined (DEBUG_HAS_MLX4_EVENT_BUFFER)
    events[idx & BUF_MASK] = LinMessage;
    idx++;
#endif

    CLEAR_MLX4_INT();                   /* Clear pending M4_SHEM interrupt */
    5bc8:	7810      	lod	Y, #16
    5bca:	5ad8 2008 	mov	0x2008 <__ep__+0x1008>, Y

    LinCommand = LinMessage & 0x000FU;  /* get the command: LinCommand = LinMessage[3:0]    */
    5bce:	b40f      	and	A, #15

#if defined (_DEBUG_LIN_MARK)
    markv(1, 0x8A00, LinCommand);       /* Mark instruction : display the command received */
#endif /* _DEBUG_LIN_MARK */

    if (evMESSrcvd == LinCommand)  {    /* if message received then copy LinFrame to LinFrameDataBuffer (4 words) */
    5bd0:	ac03      	cmp	A, #3
    5bd2:	1d09      	jne	0x5be6 <_ml_GetLinEventData+0x28>
         * so can copy a word at a time.
         */
        uint16_t const *src = (uint16_t const *)LinFrame;
        uint16_t *dst       = (uint16_t *)LinFrameDataBuffer;

        *dst++ = *src++;    /* copy 4 words => 8 bytes */
    5bd4:	7108      	lod	A, dp:0x8 <__bist_stat_size>
    5bd6:	51cc      	mov	dp:0xcc <_LinFrameDataBuffer>, A
        *dst++ = *src++;
    5bd8:	790a      	lod	Y, dp:0xa <__bist_stat_size+0x2>
    5bda:	59ce      	mov	dp:0xce <_LinFrameDataBuffer+0x2>, Y
        *dst++ = *src++;
    5bdc:	710c      	lod	A, dp:0xc <__bist_stat_size+0x4>
    5bde:	51d0      	mov	dp:0xd0 <_LinFrameDataBuffer+0x4>, A
        *dst++ = *src++;
    5be0:	790e      	lod	Y, dp:0xe <__bist_stat_size+0x6>
    5be2:	59d2      	mov	dp:0xd2 <_LinFrameDataBuffer+0x6>, Y

        (void)ml_ReleaseBuffer();           /* release LinFrame[] buffer for MLX4;
    5be4:	1758      	call	0x5a96 <_ml_ReleaseBuffer>
                                             * of the LIN ISR
                                             */
    }
    /* else : LinFrame (shared) is not copied to LinFrameDataBuffer (mlx16 private) */

    SLVCMD = 0x42U;                     /* Do the handshake and let the Mlx4 go */
    5be6:	6042      	lod	AL, #66
    5be8:	42d8 200a 	mov	0x200a <__ep__+0x100a>, AL
    5bec:	5401      	ret

00005bee <_ml_ProccessLinEvent>:

/* ----------------------------------------------------------------------------
 * Process LIN event
 */
__MLX_TEXT__  void ml_ProccessLinEvent (void)
{
    5bee:	5803      	inc	S, #4
    ml_LinError Error;
    uint16_t LinCommand;

    LinCommand = LinMessage & 0x000FU;  /* get the command: LinCommand = LinMessage[3:0]    */
    5bf0:	79d6      	lod	Y, dp:0xd6 <_LinMessage>
    5bf2:	72e6      	lod	A, Y
    5bf4:	b40f      	and	A, #15
    5bf6:	5203      	mov	[S-4], A
        }
    }
#else /* standard LIN handler */

#if defined (HAS_LIN_AUTOADDRESSING)
    if ( LinCommand == evCOOLAUTO )    /* Cooling Auto-Addressing pulse */
    5bf8:	ac07      	cmp	A, #7
    5bfa:	1d07      	jne	0x5c0a <_ml_ProccessLinEvent+0x1c>
    {
        ml_uint8 CoolingPulse = (ml_uint8) ((LinMessage >> 4) & 0x000F);
    5bfc:	44b6      	lsr	Y, #2
    5bfe:	44b6      	lsr	Y, #2
    5c00:	72e6      	lod	A, Y
    5c02:	b40f      	and	A, #15
        mlu_AutoAddressingStep( CoolingPulse);
    5c04:	82db 79c4 	callf	0x79c4 <_mlu_AutoAddressingStep>
    5c08:	00c7      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>
    }
    else
    {

#endif /* HAS_LIN_AUTOADDRESSING */
    ml_MessageID LinID = (LinMessage >> 8) & 0x003F; /* get the LinID: LinID = LinMessage[13:8] */
    5c0a:	72e6      	lod	A, Y
    5c0c:	6000      	lod	AL, #0
    5c0e:	72e4      	swap	A
    5c10:	b43f      	and	A, #63
    5c12:	5201      	mov	[S-2], A

#if (LIN_PIN_LOADER != 0)
    if (ml_driver_mode != kLinLoaderMode) {  /* --- Application mode --------------------------- */
    5c14:	62d8 00d8 	lod	AL, 0xd8 <_ml_driver_mode>
    5c18:	8c55      	cmp	AL, #85
    5c1a:	1d01      	jne	0x5c1e <_ml_ProccessLinEvent+0x30>
    5c1c:	009d      	jmp	0x5d58 <_ml_ProccessLinEvent+0x16a>
        if (LDR_GetState() == 0) {
    5c1e:	82db 6646 	callf	0x6646 <_LDR_GetState>
    5c22:	8c00      	cmp	AL, #0
    5c24:	1901      	je	0x5c28 <_ml_ProccessLinEvent+0x3a>
    5c26:	006a      	jmp	0x5cfc <_ml_ProccessLinEvent+0x10e>
#endif
            switch(LinCommand) {
    5c28:	7203      	lod	A, [S-4]
    5c2a:	a0ff      	add	A, #-1
    5c2c:	ac04      	cmp	A, #4
    5c2e:	1a01      	jule	0x5c32 <_ml_ProccessLinEvent+0x44>
    5c30:	00b3      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>
    5c32:	4422      	asl	A
    5c34:	7ae2      	lod	Y, A
    5c36:	e2da 6be0 	add	Y, #27616
    5c3a:	72f0      	lod	A, [Y]
    5c3c:	76e2      	jmp	A
                     * LinMessage[7:4]      New state
                     * LinMessage[3:0]      event code
                     */
                    ml_uint16 NewState;

                    NewState = LinMessage & 0x00F0U;
    5c3e:	79d6      	lod	Y, dp:0xd6 <_LinMessage>
    5c40:	72e6      	lod	A, Y
    5c42:	b6da 00f0 	and	A, #240
                    if ((stSLEEP << 4) == NewState) {           /* signal to application only transition to SLEEP state */
    5c46:	ac40      	cmp	A, #64
    5c48:	1901      	je	0x5c4c <_ml_ProccessLinEvent+0x5e>
    5c4a:	00a6      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>

#if defined (DEBUG_HAS_SLEEP_STATE_MARKER)
                    IO_EXTIO = IO4_OUT | IO4_ENABLE;            /* IO4 = 1 */
#endif

                        ml_StateReason Reason = (ml_StateReason)((LinMessage >> 12) & 0x000FU);    /* decode the reason of SLEEP */
    5c4c:	44c6      	rl	Y, #2
    5c4e:	44c6      	rl	Y, #2
    5c50:	f40f      	and	Y, #15
                        mlu_LinSleepMode(Reason);
    5c52:	72e6      	lod	A, Y
    5c54:	82db 7942 	callf	0x7942 <_mlu_LinSleepMode>
                    }
                    /* else: skip signaling other transitions */
                    }
                    break;
    5c58:	009f      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>

                case evERR :    /* error detected by the LIN task */
                    /* get the error type */
                    Error = (LinMessage >> 4) & 0x000F;
    5c5a:	79d6      	lod	Y, dp:0xd6 <_LinMessage>
    5c5c:	72e6      	lod	A, Y
    5c5e:	44b2      	lsr	A, #2
    5c60:	44b2      	lsr	A, #2
    5c62:	b40f      	and	A, #15
    5c64:	7ee2      	lod	X, A

                    if (ml_erBit == Error) {
    5c66:	ac05      	cmp	A, #5
    5c68:	1d0e      	jne	0x5c86 <_ml_ProccessLinEvent+0x98>
                        *
                        * LinMessage[12:15] Crashed Byte
                        *                   0-8: data byte number
                        *                   15: collision before start of TX
                        */
                        crashedBit = (ml_uint8) ((LinMessage >> 8) & 0x000F);
    5c6a:	6400      	lod	YL, #0
    5c6c:	7ae8      	swap	Y
    5c6e:	72e6      	lod	A, Y
    5c70:	b40f      	and	A, #15
                        crashedByte = (ml_uint8) ((LinMessage >> 12) & 0x000F);
    5c72:	44b6      	lsr	Y, #2
    5c74:	44b6      	lsr	Y, #2

                        /* If collision was during TX of STOP bit,
                         * report it as a separate error (SAE J2602)
                         */
                        if ( ((crashedBit == 0) || (crashedBit > 9)) && (crashedByte != 15) ) {
    5c76:	80ff      	add	AL, #-1
    5c78:	8c08      	cmp	AL, #8
    5c7a:	1a17      	jule	0x5caa <_ml_ProccessLinEvent+0xbc>
    5c7c:	62e8      	lod	AL, YL
    5c7e:	8c0f      	cmp	AL, #15
    5c80:	1914      	je	0x5caa <_ml_ProccessLinEvent+0xbc>
                            Error = ml_erStopBitTX;
    5c82:	7c10      	lod	X, #16
    5c84:	0012      	jmp	0x5caa <_ml_ProccessLinEvent+0xbc>
                        }
                        /* else : collision was during TX of the data bits */
                    }
                    else if (ml_erBreakDetected == Error) {
    5c86:	ac0c      	cmp	A, #12
    5c88:	1d05      	jne	0x5c94 <_ml_ProccessLinEvent+0xa6>
                        ml_uint8 nbytes; /* number of received bytes */

                        nbytes = (LinMessage >> 12) & 0x000F;  /* get LINmess+3 parameter */
    5c8a:	44c6      	rl	Y, #2
    5c8c:	44c6      	rl	Y, #2
    5c8e:	f40f      	and	Y, #15
                        if(nbytes == 0)
    5c90:	1d0c      	jne	0x5caa <_ml_ProccessLinEvent+0xbc>
                        {
                            /* TODO also check if ID byte = 0, otherwise it is a real stop bit error */
                            break;
    5c92:	0082      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>
                        }
                    }
                    else if (ml_erLinModuleReset == Error)  {
    5c94:	ac02      	cmp	A, #2
    5c96:	1d09      	jne	0x5caa <_ml_ProccessLinEvent+0xbc>
                        ml_uint8 subcode;

                        subcode = (LinMessage >> 8) & 0x000F;  /* get LINmess+2 parameter */
    5c98:	6400      	lod	YL, #0
    5c9a:	7ae8      	swap	Y
    5c9c:	72e6      	lod	A, Y
    5c9e:	b40f      	and	A, #15

                        if (subcode == erCRASHTX) {
    5ca0:	8c02      	cmp	AL, #2
    5ca2:	1d03      	jne	0x5caa <_ml_ProccessLinEvent+0xbc>
                            /* Propagation delay error : TX/RX propagation can not
                             * be calculated by LIN module due to collision at start bit
                             * of the own response. Both dominant and recessive collisions
                             * could be the reason of this error
                             */
                            (void)ml_Disconnect();  /* for safety and clarity (MLX4 is already in disconnected state) */
    5ca4:	1780      	call	0x5ba6 <_ml_Disconnect>
                            (void)ml_Connect();
    5ca6:	177d      	call	0x5ba2 <_ml_Connect>
                            Error = ml_erBit; /* map this error to "collision error" for application */
    5ca8:	7c05      	lod	X, #5
                        }
                    }
                    /* else :  Nothing for other errors */

                    mlu_ErrorDetected(Error); /* notify application about error */
    5caa:	72ee      	lod	A, X
    5cac:	82db 792c 	callf	0x792c <_mlu_ErrorDetected>
                    break;
    5cb0:	0073      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>
                case evMESSrcvd :/* Message received (data is available in the buffer) */

#if defined (DEBUG_HAS_SLEEP_STATE_MARKER)
                    IO_EXTIO = IO4_ENABLE;  /* IO4 = 0 */
#endif
                    LINPresc = LinMess;     /* Copy LIN prescaller |XXXX|XXXX|PRES|XXXX| */
    5cb2:	7104      	lod	A, dp:0x4 <_LinMess>
    5cb4:	52d8 014e 	mov	0x14e <_LINPresc>, A
                    LINBaud  = LinMess2;    /* Copy LIN baud (divider) */
    5cb8:	6106      	lod	AL, dp:0x6 <_LinMess2>
    5cba:	42d8 0150 	mov	0x150 <_LINBaud>, AL

#if (LIN_PIN_LOADER != 0)
                    if (LinID != D_DIA) {  /* fast check if it is not MRF frame */
    5cbe:	6201      	lod	AL, [S-2]
    5cc0:	8c10      	cmp	AL, #16
    5cc2:	1902      	je	0x5cc8 <_ml_ProccessLinEvent+0xda>
                        mlu_MessageReceived(LinID); /* notify application */
    5cc4:	7201      	lod	A, [S-2]
    5cc6:	000a      	jmp	0x5cdc <_ml_ProccessLinEvent+0xee>
                    }
                    else if ( ldr_isReadByIdMessage(LinFrameDataBuffer, ML_FALSE) ) { /* check if we received a Read By ID for the loader */
    5cc8:	54ca 0000 	pushw	#0
    5ccc:	72da 00cc 	lod	A, #204
    5cd0:	10ce      	call	0x5e6e <_ldr_isReadByIdMessage>
    5cd2:	5c01      	dec	S, #2
    5cd4:	8c00      	cmp	AL, #0
    5cd6:	1901      	je	0x5cda <_ml_ProccessLinEvent+0xec>
    5cd8:	0034      	jmp	0x5d42 <_ml_ProccessLinEvent+0x154>
                        ml_ldr_ReadByIdMessage(LinFrameDataBuffer[3]);
                    }
                    else {
                        mlu_MessageReceived(D_DIA); /* notify application */
    5cda:	7010      	lod	A, #16
    5cdc:	82db 795a 	callf	0x795a <_mlu_MessageReceived>
                    }
#else
                    mlu_MessageReceived(LinID); /* notify application */
#endif /* LIN_PIN_LOADER */                    
                    break;
    5ce0:	005b      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>

#if defined (DEBUG_HAS_SLEEP_STATE_MARKER)
                    IO_EXTIO = IO4_ENABLE;  /* IO4 = 0 */
#endif

                    LINPresc = LinMess;     /* Copy LIN prescaller |XXXX|XXXX|PRES|XXXX| */
    5ce2:	7104      	lod	A, dp:0x4 <_LinMess>
    5ce4:	52d8 014e 	mov	0x14e <_LINPresc>, A
                    LINBaud  = LinMess2;    /* Copy LIN baud (divider) */
    5ce8:	6106      	lod	AL, dp:0x6 <_LinMess2>
    5cea:	42d8 0150 	mov	0x150 <_LINBaud>, AL

                    mlu_DataRequest(LinID);
    5cee:	7201      	lod	A, [S-2]
    5cf0:	82db 78c8 	callf	0x78c8 <_mlu_DataRequest>
                    break;
    5cf4:	0051      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>

                case evENDtx :  /* Transmit done (without any collision) */
                    mlu_DataTransmitted();
    5cf6:	82db 791e 	callf	0x791e <_mlu_DataTransmitted>
                    break;
    5cfa:	004e      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>
        }
        /*
         * state != 0 => flash reprogramming states
         */
        else {
            switch(LinCommand) {
    5cfc:	7203      	lod	A, [S-4]
    5cfe:	ac03      	cmp	A, #3
    5d00:	190d      	je	0x5d1c <_ml_ProccessLinEvent+0x12e>
    5d02:	1e03      	jug	0x5d0a <_ml_ProccessLinEvent+0x11c>
    5d04:	ac02      	cmp	A, #2
    5d06:	1905      	je	0x5d12 <_ml_ProccessLinEvent+0x124>
    5d08:	0047      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>
    5d0a:	7203      	lod	A, [S-4]
    5d0c:	ac04      	cmp	A, #4
    5d0e:	191d      	je	0x5d4a <_ml_ProccessLinEvent+0x15c>
    5d10:	0043      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>
                case evERR :    /* error detected by the LIN task */
                    /*
                     * There is no recovering from critical error erCRASH, erCRASHTX
                     * A reset should be applied to recover from such errors
                     */
                    Error = (LinMessage >> 4) & 0x000F; /* get the error type */
    5d12:	61d6      	lod	AL, dp:0xd6 <_LinMessage>
    5d14:	44b2      	lsr	A, #2
    5d16:	44b2      	lsr	A, #2
    5d18:	b40f      	and	A, #15
    5d1a:	002f      	jmp	0x5d7a <_ml_ProccessLinEvent+0x18c>
                    ml_ldr_ErrorDetected(Error);        /* notify flash loader about error */
                    break;

                case evMESSrcvd :/* Message received (data is available in the buffer) */

                    LINPresc = LinMess;     /* Copy LIN prescaller |XXXX|XXXX|PRES|XXXX| */
    5d1c:	7104      	lod	A, dp:0x4 <_LinMess>
    5d1e:	52d8 014e 	mov	0x14e <_LINPresc>, A
                    LINBaud  = LinMess2;    /* Copy LIN baud (divider) */
    5d22:	6106      	lod	AL, dp:0x6 <_LinMess2>
    5d24:	42d8 0150 	mov	0x150 <_LINBaud>, AL

                    if (LinID == D_DIA) {
    5d28:	6201      	lod	AL, [S-2]
    5d2a:	8c10      	cmp	AL, #16
    5d2c:	1901      	je	0x5d30 <_ml_ProccessLinEvent+0x142>
    5d2e:	0034      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>
                        if ( ldr_isReadByIdMessage(LinFrameDataBuffer, ML_TRUE) ) { /* check if we received a Read By ID for the loader */
    5d30:	54ca 0001 	pushw	#1
    5d34:	72da 00cc 	lod	A, #204
    5d38:	109a      	call	0x5e6e <_ldr_isReadByIdMessage>
    5d3a:	5c01      	dec	S, #2
    5d3c:	8c00      	cmp	AL, #0
    5d3e:	1d01      	jne	0x5d42 <_ml_ProccessLinEvent+0x154>
    5d40:	002b      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>
                            ml_ldr_ReadByIdMessage(LinFrameDataBuffer[3]);
    5d42:	61cf      	lod	AL, dp:0xcf <_LinFrameDataBuffer+0x3>
    5d44:	5cf2      	usex	A
    5d46:	1207      	call	0x6156 <_ml_ldr_ReadByIdMessage>
    5d48:	0027      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>
                    }
                    break;

                case evMESSrqst :/* ID received, TX identified, request data */

                    LINPresc = LinMess;     /* Copy LIN prescaller |XXXX|XXXX|PRES|XXXX| */
    5d4a:	7104      	lod	A, dp:0x4 <_LinMess>
    5d4c:	52d8 014e 	mov	0x14e <_LINPresc>, A
                    LINBaud  = LinMess2;    /* Copy LIN baud (divider) */
    5d50:	6106      	lod	AL, dp:0x6 <_LinMess2>
    5d52:	42d8 0150 	mov	0x150 <_LINBaud>, AL
    5d56:	001d      	jmp	0x5d92 <_ml_ProccessLinEvent+0x1a4>
            }
        }
    }
    else {
         /* --- Loader mode -------------------------------------------------- */
         switch(LinCommand) {
    5d58:	7203      	lod	A, [S-4]
    5d5a:	ac03      	cmp	A, #3
    5d5c:	1910      	je	0x5d7e <_ml_ProccessLinEvent+0x190>
    5d5e:	1e03      	jug	0x5d66 <_ml_ProccessLinEvent+0x178>
    5d60:	ac02      	cmp	A, #2
    5d62:	1907      	je	0x5d72 <_ml_ProccessLinEvent+0x184>
    5d64:	0019      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>
    5d66:	7203      	lod	A, [S-4]
    5d68:	ac04      	cmp	A, #4
    5d6a:	1913      	je	0x5d92 <_ml_ProccessLinEvent+0x1a4>
    5d6c:	ac05      	cmp	A, #5
    5d6e:	1913      	je	0x5d96 <_ml_ProccessLinEvent+0x1a8>
    5d70:	0013      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>
             case evERR :    /* error detected by the LIN task */
                 Error = (LinMessage >> 4) & 0x000F; /* get the error type */
    5d72:	44b6      	lsr	Y, #2
    5d74:	44b6      	lsr	Y, #2
    5d76:	f40f      	and	Y, #15
                 ml_ldr_ErrorDetected(Error); /* notify flash loader about error */
    5d78:	72e6      	lod	A, Y
    5d7a:	1155      	call	0x6026 <_ml_ldr_ErrorDetected>
                 break;
    5d7c:	000d      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>

             case evMESSrcvd : /* Message received (data is available in the buffer) */
                 if ( (LinID == D_DIA) /* MRF diag frame */
    5d7e:	6201      	lod	AL, [S-2]
    5d80:	8c10      	cmp	AL, #16
    5d82:	1d0a      	jne	0x5d98 <_ml_ProccessLinEvent+0x1aa>
    5d84:	61cc      	lod	AL, dp:0xcc <_LinFrameDataBuffer>
    5d86:	8dd4      	cmp	AL, dp:0xd4 <_LIN_nad>
    5d88:	1902      	je	0x5d8e <_ml_ProccessLinEvent+0x1a0>
    5d8a:	8c7f      	cmp	AL, #127
    5d8c:	1d05      	jne	0x5d98 <_ml_ProccessLinEvent+0x1aa>
                      && (   (LinFrameDataBuffer[0] == LIN_nad)
                          || (LinFrameDataBuffer[0] == 0x7F /* wildcard */ )))
                 {
                     ml_DiagReceived();  /* notify loader */
    5d8e:	1231      	call	0x61f2 <_ml_DiagReceived>
    5d90:	0003      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>
                     /* ignore message */
                 }
                 break;

             case evMESSrqst :   /* message ID received, TX identified, request data */
                 (void)ml_DiscardFrame();   /* other requests are not expected in the loader mode */
    5d92:	16b1      	call	0x5af6 <_ml_DiscardFrame>
                 break;
    5d94:	0001      	jmp	0x5d98 <_ml_ProccessLinEvent+0x1aa>

             case evENDtx :  /* Transmit done (without any collision) */
                 ml_DiagRequest();
    5d96:	11fb      	call	0x618e <_ml_DiagRequest>
#if defined (HAS_LIN_AUTOADDRESSING)
    }
#endif /* HAS_LIN_AUTOADDRESSING */
#endif /* STANDALONE_LOADER */

    SLVIT = 0xABU;  /* Enable Event interrupt (SLVIT[8] = 1) (get ready for the next interrupt) */
    5d98:	60ab      	lod	AL, #-85
    5d9a:	42d8 200b 	mov	0x200b <__ep__+0x100b>, AL
    5d9e:	5405      	ret	#6

00005da0 <_ml_SetLoaderNAD>:
/* ----------------------------------------------------------------------------
 * To set NAD for Loader (by default value is MLX_NAD).
 */
__MLX_TEXT__ ml_Status ml_SetLoaderNAD(ml_uint8 Nad)
{
    stFixedRamNAD.nad = Nad;
    5da0:	42d8 0014 	mov	0x14 <__dp_noinit_size+0x4>, AL
    stFixedRamNAD.key = _mlx_NAD_Security_Key;
    5da4:	7ada 0010 	lod	Y, #16
    5da8:	7eda 72ef 	lod	X, #29423
    5dac:	5ef0      	mov	[Y], X
    5dae:	7eda e861 	lod	X, #59489
    5db2:	5ef2      	mov	[Y+2], X
    LIN_nad = Nad;
    5db4:	41d4      	mov	dp:0xd4 <_LIN_nad>, AL
    return ML_SUCCESS;
}
    5db6:	7000      	lod	A, #0
    5db8:	5401      	ret

00005dba <_ml_GetLoaderNAD>:
/* ----------------------------------------------------------------------------
 * To get NAD of Loader.
 */
__MLX_TEXT__ ml_uint8 ml_GetLoaderNAD(void)
{
    return LIN_nad;
    5dba:	61d4      	lod	AL, dp:0xd4 <_LIN_nad>
    5dbc:	5cf2      	usex	A
}
    5dbe:	5401      	ret

00005dc0 <_linit>:
 * This function is called whenever an EVENT interrupt from the LIN task (Mlx4)
 * occurs
 */
void __interrupt__ ml_LinInterruptHandler(void);
__MLX_TEXT__  void ml_LinInterruptHandler(void)
{
    5dc0:	52df      	push	A
    5dc2:	5edf      	push	X
    5dc4:	5adf      	push	Y
    5dc6:	4c83      	push	D
    ml_GetLinEventData();
    5dc8:	16fa      	call	0x5bbe <_ml_GetLinEventData>
    ml_ProccessLinEvent();
    5dca:	1711      	call	0x5bee <_ml_ProccessLinEvent>
    5dcc:	4cc3      	pop	D
    5dce:	7acf      	pop	Y
    5dd0:	7ecf      	pop	X
    5dd2:	72cf      	pop	A
    5dd4:	4407      	mov	R, #0
    5dd6:	72cb      	pop	M
    5dd8:	5401      	ret

00005dda <_ml_GetBaudRate>:
 *
 *  With this max presc 8 the limit for PLL is:
 *  PLL_max = 2^(pres+1) * div * baud = 2^9 * 100 * 1000 = 51.2 MHz
 */
__MLX_TEXT__ ml_uint16 ml_GetBaudRate (void)
{
    5dda:	5803      	inc	S, #4
#if (FPLL < 50000)

    uint8_t presc = (uint8_t)((LINPresc & 0x00F0) >> 4);  /* Prescaller |XXXX|XXXX|PRES|XXXX| */
    5ddc:	66d8 014e 	lod	YL, 0x14e <_LINPresc>
    5de0:	f6da 00f0 	and	Y, #240
    5de4:	44b6      	lsr	Y, #2
    5de6:	44b6      	lsr	Y, #2
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    5de8:	4cc2 9f80 	mov	D, #14000000
    5dec:	00d5 
    5dee:	62d8 0150 	lod	AL, 0x150 <_LINBaud>
    5df2:	5cf2      	usex	A
    5df4:	ec00      	cmp	Y, #0
    5df6:	1b03      	jsle	0x5dfe <_ml_GetBaudRate+0x24>
    5df8:	46e9      	mov	Cx, YL
    5dfa:	4422      	asl	A
    5dfc:	1ffe      	djnz	Cx, 0x5dfa <_ml_GetBaudRate+0x20>
    5dfe:	5203      	mov	[S-4], A
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    5e00:	4c80      	mov	YA, D
    5e02:	7e03      	lod	X, [S-4]
    5e04:	4c63      	divu	YA, X
    5e06:	4c63      	divu	YA, X
    5e08:	5203      	mov	[S-4], A

#else
    #warning "Function can't work with FPLL > 50MHz (overflow in 2nd argument of divU16_U32byU16)"
    return 0U;
#endif
}
    5e0a:	5405      	ret	#6

00005e0c <_ml_InitLinModule>:
     * Assuming that LIN interrupt priority (if availabe for configuration)
     * is set by the application
     */

#if (LIN_PIN_LOADER != 0)
    if (   (0 == LDR_GetState())
    5e0c:	82db 6646 	callf	0x6646 <_LDR_GetState>
    5e10:	8c00      	cmp	AL, #0
    5e12:	1d0a      	jne	0x5e28 <_ml_InitLinModule+0x1c>
    5e14:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    5e18:	aeda 3212 	cmp	A, #12818
    5e1c:	1905      	je	0x5e28 <_ml_InitLinModule+0x1c>
#if defined (LDR_RESET_ON_ENTER_PROG_MODE)
        && (bistResetInfo != C_CHIP_STATE_LOADER_PROG_RESET)
#endif /* LDR_RESET_ON_ENTER_PROG_MODE */
       )
    {  /* if we're in loader state 0 (application mode) .. */
        ENABLE_MLX4_INT();      /* .. enable LIN interrupt                          */
    5e1e:	72d8 2006 	lod	A, 0x2006 <__ep__+0x1006>
    5e22:	a410      	or	A, #16
    5e24:	52d8 2006 	mov	0x2006 <__ep__+0x1006>, A
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    5e28:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    5e2a:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    5e2c:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    5e2e:	b430      	and	A, #48
    5e30:	1902      	je	0x5e36 <_ml_InitLinModule+0x2a>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    5e32:	6000      	lod	AL, #0
    5e34:	4282      	mov	io:0x2 <_LinCmnd>, AL
    /* MLX4/MLX16 synchronization.
     * If the Mlx16 is here before the Mlx4, it will wait for MLX4.
     * If the Mlx4 reached this point before MLX16, then the Mlx16 does not wait
     */
    WDG_Manager();              /* keep system alive    */
    SLVCMD = 0x84U;             /* signal to MLX4       */
    5e36:	6084      	lod	AL, #-124
    5e38:	42d8 200a 	mov	0x200a <__ep__+0x100a>, AL

    while ( (SLVCMD & 0x04U) == 0U ) {
    5e3c:	62d8 200a 	lod	AL, 0x200a <__ep__+0x100a>
    5e40:	b404      	and	A, #4
    5e42:	197c      	je	0x5e3c <_ml_InitLinModule+0x30>
     * (event). Before that, it is going to send an event to indicate a state
     * change. Now that the initialization of both chips is done (the LIN part
     * still needs to be configured!) enable the interrupts to allow inter-chip
     * communication
     */
    SLVIT = 0xABU;          /* Enable Mlx4 Event interrupt */
    5e44:	60ab      	lod	AL, #-85
    5e46:	42d8 200b 	mov	0x200b <__ep__+0x100b>, AL

#if (LIN_PIN_LOADER != 0)
    ml_driver_mode = kLinAppMode;
    5e4a:	6000      	lod	AL, #0
    5e4c:	42d8 00d8 	mov	0xd8 <_ml_driver_mode>, AL

    /* Initial NAD */
    if (stFixedRamNAD.key == _mlx_NAD_Security_Key)
    5e50:	72d8 0010 	lod	A, 0x10 <__dp_noinit_size>
    5e54:	7ad8 0012 	lod	Y, 0x12 <__dp_noinit_size+0x2>
    5e58:	4cb2 72ef 	cmp	YA, #-396266769
    5e5c:	e861 
    5e5e:	1d03      	jne	0x5e66 <_ml_InitLinModule+0x5a>
    {
        LIN_nad = stFixedRamNAD.nad;
    5e60:	62d8 0014 	lod	AL, 0x14 <__dp_noinit_size+0x4>
    5e64:	0001      	jmp	0x5e68 <_ml_InitLinModule+0x5c>
    }
    else
    {
        LIN_nad = MLX_NAD_DEFAULT;
    5e66:	6001      	lod	AL, #1
    5e68:	41d4      	mov	dp:0xd4 <_LIN_nad>, AL
    }
#endif /* LIN_PIN_LOADER */

    return ML_SUCCESS;
}
    5e6a:	7000      	lod	A, #0
    5e6c:	5401      	ret

00005e6e <_ldr_isReadByIdMessage>:
 *
 * Inputs: LIN_nad(Global), READ_BY_ID_BC, LDR_SUPPLIER_ID, LDR_FUNCTION_ID
 *
 */
__MLX_TEXT__ ml_bool ldr_isReadByIdMessage (const void *buffer, ml_bool CheckWildcard)
{
    5e6e:	5801      	inc	S, #2
    5e70:	7ae2      	lod	Y, A
    5e72:	6205      	lod	AL, [S-6]
    5e74:	5cf2      	usex	A
    5e76:	5201      	mov	[S-2], A
    uint16_t const *src = (uint16_t const *)buffer;

    if ( ( (src[0] == (READ_BY_ID_BC[0] | 0x7F )) ||    /* LIN_nad or wildcard (0x7F) */
    5e78:	7ef0      	lod	X, [Y]
    5e7a:	2eda 067f 	cmp	X, #1663
    5e7e:	1907      	je	0x5e8e <_ldr_isReadByIdMessage+0x20>
    5e80:	61d4      	lod	AL, dp:0xd4 <_LIN_nad>
    5e82:	b6da 06ff 	and	A, #1791
    5e86:	a6da 0600 	or	A, #1536
    5e8a:	2ee2      	cmp	X, A
    5e8c:	1d15      	jne	0x5eb8 <_ldr_isReadByIdMessage+0x4a>
    5e8e:	72f2      	lod	A, [Y+2]
    5e90:	8cb2      	cmp	AL, #-78
    5e92:	1d12      	jne	0x5eb8 <_ldr_isReadByIdMessage+0x4a>
    5e94:	7ef4      	lod	X, [Y+4]
    5e96:	2c13      	cmp	X, #19
    5e98:	1d04      	jne	0x5ea2 <_ldr_isReadByIdMessage+0x34>
    5e9a:	72f6      	lod	A, [Y+6]
    5e9c:	aeda cafe 	cmp	A, #51966
    5ea0:	1909      	je	0x5eb4 <_ldr_isReadByIdMessage+0x46>
    5ea2:	6201      	lod	AL, [S-2]
    5ea4:	8c01      	cmp	AL, #1
    5ea6:	1d08      	jne	0x5eb8 <_ldr_isReadByIdMessage+0x4a>
    5ea8:	2eda 7fff 	cmp	X, #32767
    5eac:	1d05      	jne	0x5eb8 <_ldr_isReadByIdMessage+0x4a>
    5eae:	72f6      	lod	A, [Y+6]
    5eb0:	acff      	cmp	A, #-1
    5eb2:	1d02      	jne	0x5eb8 <_ldr_isReadByIdMessage+0x4a>
             )
           )
         )
       )
    {
        return ML_TRUE;
    5eb4:	7001      	lod	A, #1
    5eb6:	5403      	ret	#4
    }
    else
    {
        return ML_FALSE;
    5eb8:	7000      	lod	A, #0
    }
}
    5eba:	5403      	ret	#4
 *  LinFrameDataBuffer[]: out, LIN frame buffer
 *  LIN_nad : in, LIN Node Address
 *  MLX4_error: in/out
 */
__MLX_TEXT__  static void ml_PrepareErrorResponse (ml_MLX16_error_t MLX16_error)
{
    5ebc:	5801      	inc	S, #2
    5ebe:	5201      	mov	[S-2], A
    LinFrameDataBuffer[0] = LIN_nad;    /* NAD */
    5ec0:	61d4      	lod	AL, dp:0xd4 <_LIN_nad>
    5ec2:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL
    LinFrameDataBuffer[1] = 3;          /* PCI */
    5ec4:	6003      	lod	AL, #3
    5ec6:	41cd      	mov	dp:0xcd <_LinFrameDataBuffer+0x1>, AL
    LinFrameDataBuffer[2] = 0x7F;       /* RSID */
    5ec8:	607f      	lod	AL, #127
    5eca:	41ce      	mov	dp:0xce <_LinFrameDataBuffer+0x2>, AL
    LinFrameDataBuffer[3] = ML_ERROR_BIT | LDR_GetState();      /* NodeStatus */
    5ecc:	13bc      	call	0x6646 <_LDR_GetState>
    5ece:	8480      	or	AL, #-128
    5ed0:	41cf      	mov	dp:0xcf <_LinFrameDataBuffer+0x3>, AL
    LinFrameDataBuffer[4] = (ml_uint8)MLX16_error | MLX4_error; /* Combine MLX16_error (4 MSBs) and MLX4_error (4 LSBs) */
    5ed2:	61d9      	lod	AL, dp:0xd9 <_ml_driver_mode+0x1>
    5ed4:	8601      	or	AL, [S-2]
    5ed6:	41d0      	mov	dp:0xd0 <_LinFrameDataBuffer+0x4>, AL

    LinFrameDataBuffer[5] = 0xFF;       /* not used */
    5ed8:	60ff      	lod	AL, #-1
    5eda:	41d1      	mov	dp:0xd1 <_LinFrameDataBuffer+0x5>, AL
    LinFrameDataBuffer[6] = 0xFF;
    5edc:	41d2      	mov	dp:0xd2 <_LinFrameDataBuffer+0x6>, AL
    LinFrameDataBuffer[7] = 0xFF;
    5ede:	41d3      	mov	dp:0xd3 <_LinFrameDataBuffer+0x7>, AL
    /* Reset last error after reporting. If transmission of the status message
     * failed we will get another error which cause this failure. This _last_
     * detected error will be reported to master in next status frame.
     * Master aborts operation on any error.
     */
    MLX4_error = 0;  /* set to "No error" */
    5ee0:	6000      	lod	AL, #0
    5ee2:	41d9      	mov	dp:0xd9 <_ml_driver_mode+0x1>, AL
    5ee4:	5403      	ret	#4
 *
 * \note
 * 1. Assumes that SID of request is 0xB4
 */
__MLX_TEXT__  static uint8 ml_FlashUploadStatus (ml_MLX16_error_t MLX16_error)
{
    5ee6:	5801      	inc	S, #2
    5ee8:	7ae2      	lod	Y, A
    uint8 blReturn;

    if ((MLX16_error != ddErNONE) || (MLX4_error != 0)) {  /* MLX16 or MLX4 error */
    5eea:	aeda 00f0 	cmp	A, #240
    5eee:	1d02      	jne	0x5ef4 <_ldr_isReadByIdMessage+0x86>
    5ef0:	61d9      	lod	AL, dp:0xd9 <_ml_driver_mode+0x1>
    5ef2:	1904      	je	0x5efc <_ldr_isReadByIdMessage+0x8e>
        ml_PrepareErrorResponse(MLX16_error);
    5ef4:	72e6      	lod	A, Y
    5ef6:	17e2      	call	0x5ebc <_ldr_isReadByIdMessage+0x4e>
        blReturn = ML_FALSE;
    5ef8:	7000      	lod	A, #0
    5efa:	000e      	jmp	0x5f18 <_ldr_isReadByIdMessage+0xaa>
    }
    else { /* no error, reply status */
        LinFrameDataBuffer[0] = LIN_nad;            /* NAD */
    5efc:	61d4      	lod	AL, dp:0xd4 <_LIN_nad>
    5efe:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL
        LinFrameDataBuffer[1] = 2;                  /* PCI : length = 2 databytes (SID + status) */
    5f00:	6002      	lod	AL, #2
    5f02:	41cd      	mov	dp:0xcd <_LinFrameDataBuffer+0x1>, AL
        LinFrameDataBuffer[2] = 0xF4;               /* RSID = SID + 0x40 */
    5f04:	60f4      	lod	AL, #-12
    5f06:	41ce      	mov	dp:0xce <_LinFrameDataBuffer+0x2>, AL
        LinFrameDataBuffer[3] = LDR_GetState();     /* NodeStatus : since no error, error bit is not set */
    5f08:	139e      	call	0x6646 <_LDR_GetState>
    5f0a:	41cf      	mov	dp:0xcf <_LinFrameDataBuffer+0x3>, AL

        LinFrameDataBuffer[4] = 0xFF;               /* not used */
    5f0c:	60ff      	lod	AL, #-1
    5f0e:	41d0      	mov	dp:0xd0 <_LinFrameDataBuffer+0x4>, AL
        LinFrameDataBuffer[5] = 0xFF;
    5f10:	41d1      	mov	dp:0xd1 <_LinFrameDataBuffer+0x5>, AL
        LinFrameDataBuffer[6] = 0xFF;
    5f12:	41d2      	mov	dp:0xd2 <_LinFrameDataBuffer+0x6>, AL
        LinFrameDataBuffer[7] = 0xFF;
    5f14:	41d3      	mov	dp:0xd3 <_LinFrameDataBuffer+0x7>, AL
        blReturn = ML_TRUE;
    5f16:	7001      	lod	A, #1
    5f18:	5201      	mov	[S-2], A
    }

    (void)ml_DataReady(ML_END_OF_TX_DISABLED);      /* Signal to MLX4 that the data is ready */
    5f1a:	7000      	lod	A, #0
    5f1c:	15c3      	call	0x5aa4 <_ml_DataReady>

    return ( blReturn );
}
    5f1e:	7201      	lod	A, [S-2]
    5f20:	5403      	ret	#4
 *      LinFrameDataBuffer[]  LIN frame buffer
 *
 * Global variables used : ddDataAddress, ddDataCounter, ddDataSize, ddCurrentOp
 */
__MLX_TEXT__  static void ml_ReadData (ml_uint8 BufferIndex, ml_uint8 BufferSize)
{
    5f22:	5807      	inc	S, #8
    5f24:	660b      	lod	YL, [S-12]
    5f26:	5cf6      	usex	Y
    5f28:	7ee6      	lod	X, Y
    uint16_t size = BufferSize;
    uint8_t *src = (uint8_t *)(ddDataAddress + ddDataCounter);      /* read byte directly from memory */
    5f2a:	79e0      	lod	Y, dp:0xe0 <_ml_driver_mode+0x8>
    5f2c:	e1e8      	add	Y, dp:0xe8 <_ml_driver_mode+0x10>
    5f2e:	5a07      	mov	[S-8], Y
    uint8_t *dst = (uint8_t *)(&LinFrameDataBuffer[BufferIndex]);
    5f30:	7ae2      	lod	Y, A
    5f32:	e2da 00cc 	add	Y, #204


    do {
        if (ddDataCounter < ddDataSize) {   /* if there's something to send ..  */
    5f36:	71e8      	lod	A, dp:0xe8 <_ml_driver_mode+0x10>
    5f38:	5205      	mov	[S-6], A
    5f3a:	72e6      	lod	A, Y
    5f3c:	a001      	add	A, #1
    5f3e:	5203      	mov	[S-4], A
    5f40:	20ff      	add	X, #-1
    5f42:	5e01      	mov	[S-2], X
    5f44:	7e05      	lod	X, [S-6]
    5f46:	2de4      	cmp	X, dp:0xe4 <_ml_driver_mode+0xc>
    5f48:	1c04      	jnc	0x5f52 <_ldr_isReadByIdMessage+0xe4>
            *dst++ = *src++;                /* .. take it from memory           */
    5f4a:	7e07      	lod	X, [S-8]
    5f4c:	62de      	lod	AL, [X++]
    5f4e:	5e07      	mov	[S-8], X
    5f50:	0001      	jmp	0x5f54 <_ldr_isReadByIdMessage+0xe6>
        }
        else {                              /* no more data in memory .. */
            *dst++ = 0xFF;                  /* .. fill up the rest of the frame with 0xFF */
    5f52:	60ff      	lod	AL, #-1
    5f54:	42f0      	mov	[Y], AL
    5f56:	7a03      	lod	Y, [S-4]
        }

        ddDataCounter += 1;
    5f58:	7205      	lod	A, [S-6]
    5f5a:	a001      	add	A, #1
    5f5c:	51e8      	mov	dp:0xe8 <_ml_driver_mode+0x10>, A
    } while (--size != 0);
    5f5e:	7e01      	lod	X, [S-2]
    5f60:	1d6a      	jne	0x5f36 <_ldr_isReadByIdMessage+0xc8>

    if (ddDataCounter >= ddDataSize) {      /* if all requested data were sent .. */
    5f62:	ade4      	cmp	A, dp:0xe4 <_ml_driver_mode+0xc>
    5f64:	1802      	jc	0x5f6a <_ldr_isReadByIdMessage+0xfc>
        (void)ml_ContFrame(ML_DISABLED);    /* .. clear the Continuous Frames flag for the Mlx4 */
    5f66:	7000      	lod	A, #0
    5f68:	15c8      	call	0x5afa <_ml_ContFrame>
    5f6a:	5409      	ret	#10
 *  1. Can be a Single Frame or a First Frame
 *      Single Frame format : NAD RPCI RSID NodeStatus Data1 Data2 Data3 Data4
 *      First Frame format  : NAD RPCI RLEN RSID NodeStatus Data1 Data2 Data3
 */
__MLX_TEXT__  static void ml_SendReadResponse(void)
{
    5f6c:	5801      	inc	S, #2
    ml_uint16 ResponseLength;


    if (MLX4_error != 0) {
    5f6e:	61d9      	lod	AL, dp:0xd9 <_ml_driver_mode+0x1>
    5f70:	1904      	je	0x5f7a <_ldr_isReadByIdMessage+0x10c>
        ml_PrepareErrorResponse(ddErNONE); /* Error response */
    5f72:	72da 00f0 	lod	A, #240
    5f76:	17a2      	call	0x5ebc <_ldr_isReadByIdMessage+0x4e>
    5f78:	0039      	jmp	0x5fec <_ldr_isReadByIdMessage+0x17e>
    }
    else {  /* Prepare the Response */
        ResponseLength = ddDataSize + 2;    /* Length = flash data + status + SID */
    5f7a:	71e4      	lod	A, dp:0xe4 <_ml_driver_mode+0xc>
    5f7c:	7ae2      	lod	Y, A
    5f7e:	e002      	add	Y, #2
    5f80:	5a01      	mov	[S-2], Y

        if (ddDataSize > 4) {   /* if more than 4 bytes are requested than will send using Continuous Frames .. */
    5f82:	ac04      	cmp	A, #4
    5f84:	1a17      	jule	0x5fb4 <_ldr_isReadByIdMessage+0x146>

            (void)ml_ContFrame(ML_ENABLED);/* signal to MLX4 that some Continuous Frames are coming */
    5f86:	7001      	lod	A, #1
    5f88:	15b8      	call	0x5afa <_ml_ContFrame>
                                /* Next frames will be TX frames (see ml_DiagRequest) */

            ddFrameCounter = 0; /* reset frame counter */
    5f8a:	6000      	lod	AL, #0
    5f8c:	41ea      	mov	dp:0xea <_ml_driver_mode+0x12>, AL

            /* Fill the buffer for the First Frame (FF) */
            LinFrameDataBuffer[0] = LIN_nad;                                            /* NAD */
    5f8e:	61d4      	lod	AL, dp:0xd4 <_LIN_nad>
    5f90:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL
            LinFrameDataBuffer[1] = 0x10 | (ml_uint8) ((ResponseLength & 0x0F00) >> 8); /* PCI = 0001 xxxx where xxxx is length/256 */
    5f92:	7201      	lod	A, [S-2]
    5f94:	b6da 0f00 	and	A, #3840
    5f98:	6000      	lod	AL, #0
    5f9a:	72e4      	swap	A
    5f9c:	8410      	or	AL, #16
    5f9e:	41cd      	mov	dp:0xcd <_LinFrameDataBuffer+0x1>, AL
            LinFrameDataBuffer[2] = (ml_uint8) (ResponseLength & 0x00FF);               /* note : RLEN has to be < 4095 (spec)      */
    5fa0:	6601      	lod	YL, [S-2]
    5fa2:	45ce      	mov	dp:0xce <_LinFrameDataBuffer+0x2>, YL
            LinFrameDataBuffer[3] = 0xF4;                                               /* RSID =  SID + 0x40 */
    5fa4:	60f4      	lod	AL, #-12
    5fa6:	41cf      	mov	dp:0xcf <_LinFrameDataBuffer+0x3>, AL
            LinFrameDataBuffer[4] = LDR_GetState();                                     /* NodeStatus : since no error, error bit is not set */
    5fa8:	134e      	call	0x6646 <_LDR_GetState>
    5faa:	41d0      	mov	dp:0xd0 <_LinFrameDataBuffer+0x4>, AL
            ml_ReadData(5, 3);    /* FF: copy to LinFrameDataBuffer[5] next 3 bytes from (ddDataAddress + ddDataCounter) */
    5fac:	54ca 0003 	pushw	#3
    5fb0:	7005      	lod	A, #5
    5fb2:	001a      	jmp	0x5fe8 <_ldr_isReadByIdMessage+0x17a>
        }
        else { /* Single Frame (SF) is enough to deliver 4 (or less) bytes */

            /* Fill the buffer */
            LinFrameDataBuffer[0] = LIN_nad;
    5fb4:	61d4      	lod	AL, dp:0xd4 <_LIN_nad>
    5fb6:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL
            LinFrameDataBuffer[1] = (ml_uint8) ResponseLength;  /* RPCI = length */
    5fb8:	6201      	lod	AL, [S-2]
    5fba:	41cd      	mov	dp:0xcd <_LinFrameDataBuffer+0x1>, AL
            LinFrameDataBuffer[2] = 0xF4;                       /* RSID =  SID + 0x40 */
    5fbc:	60f4      	lod	AL, #-12
    5fbe:	41ce      	mov	dp:0xce <_LinFrameDataBuffer+0x2>, AL
            LinFrameDataBuffer[3] = LDR_GetState();             /* NodeStatus : since no error, error bit is not set */
    5fc0:	1342      	call	0x6646 <_LDR_GetState>
    5fc2:	41cf      	mov	dp:0xcf <_LinFrameDataBuffer+0x3>, AL
            /*
             * Intercept direct loader state reading from Flash (a word @ 0xBF66) and
             * replace it by the loader state returned by LDR_GetState()
             * TODO: MPT should not read loader state directly
             */
            if ((ddDataAddress == 0xBF66) && (ddDataSize == 2)) {   /* if a _word_ reading from address 0xBF66 is requested .. */
    5fc4:	71e0      	lod	A, dp:0xe0 <_ml_driver_mode+0x8>
    5fc6:	aeda bf66 	cmp	A, #48998
    5fca:	1d0b      	jne	0x5fe2 <_ldr_isReadByIdMessage+0x174>
    5fcc:	71e4      	lod	A, dp:0xe4 <_ml_driver_mode+0xc>
    5fce:	ac02      	cmp	A, #2
    5fd0:	1d08      	jne	0x5fe2 <_ldr_isReadByIdMessage+0x174>
                LinFrameDataBuffer[4] = LDR_GetState();             /* .. replace it by a state information (LSByte) */
    5fd2:	1339      	call	0x6646 <_LDR_GetState>
    5fd4:	41d0      	mov	dp:0xd0 <_LinFrameDataBuffer+0x4>, AL
                LinFrameDataBuffer[5] = 0;                          /* .. MSByte of the loader state is always 0 */
    5fd6:	6400      	lod	YL, #0
    5fd8:	45d1      	mov	dp:0xd1 <_LinFrameDataBuffer+0x5>, YL
                LinFrameDataBuffer[6] = 0xFF;                       /* frame padding */
    5fda:	60ff      	lod	AL, #-1
    5fdc:	41d2      	mov	dp:0xd2 <_LinFrameDataBuffer+0x6>, AL
                LinFrameDataBuffer[7] = 0xFF;                       /* frame padding */
    5fde:	41d3      	mov	dp:0xd3 <_LinFrameDataBuffer+0x7>, AL
    5fe0:	0005      	jmp	0x5fec <_ldr_isReadByIdMessage+0x17e>
            }
            else {
                ml_ReadData(4, 4);  /* SF: copy to LinFrameDataBuffer[4] next 4 bytes from (ddDataAddress + ddDataCounter) */
    5fe2:	54ca 0004 	pushw	#4
    5fe6:	7004      	lod	A, #4
    5fe8:	179c      	call	0x5f22 <_ldr_isReadByIdMessage+0xb4>
    5fea:	5c01      	dec	S, #2
            ml_ReadData(4, 4);      /* SF: copy to LinFrameDataBuffer[4] next 4 bytes from (ddDataAddress + ddDataCounter) */
#endif
        }
    }

    (void)ml_DataReady(ML_END_OF_TX_DISABLED);  /* Signal that the data is ready to send */
    5fec:	7000      	lod	A, #0
    5fee:	155a      	call	0x5aa4 <_ml_DataReady>
    5ff0:	5403      	ret	#4
/* ----------------------------------------------------------------------------
 * Send a response to a write request (to flash, RAM or EEPROM)
 * Frame format : NAD PCI RSID NodeStatus BLK1 BLK0 TIM1 TIM0
 */
__MLX_TEXT__  static void ml_SendWriteResponse(uint16_t timeout)
{
    5ff2:	5801      	inc	S, #2
    5ff4:	5201      	mov	[S-2], A
    if (MLX4_error != 0) {
    5ff6:	61d9      	lod	AL, dp:0xd9 <_ml_driver_mode+0x1>
    5ff8:	1904      	je	0x6002 <_ldr_isReadByIdMessage+0x194>
        ml_PrepareErrorResponse(ddErNONE); /* Error response */
    5ffa:	72da 00f0 	lod	A, #240
    5ffe:	175e      	call	0x5ebc <_ldr_isReadByIdMessage+0x4e>
    6000:	000f      	jmp	0x6020 <_ldr_isReadByIdMessage+0x1b2>
    }
    else {
        /* Fill the buffer */
        LinFrameDataBuffer[0] = LIN_nad;                            /* NAD */
    6002:	61d4      	lod	AL, dp:0xd4 <_LIN_nad>
    6004:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL
        LinFrameDataBuffer[1] = 0x06;                               /* PCI (Single Frame + Length) */
    6006:	6006      	lod	AL, #6
    6008:	41cd      	mov	dp:0xcd <_LinFrameDataBuffer+0x1>, AL
        LinFrameDataBuffer[2] = 0xF4;                               /* RSID = SID + 0x40 */
    600a:	60f4      	lod	AL, #-12
    600c:	41ce      	mov	dp:0xce <_LinFrameDataBuffer+0x2>, AL
        LinFrameDataBuffer[3] = LDR_GetState();                     /* NodeStatus : since no error, error bit is not set */
    600e:	131b      	call	0x6646 <_LDR_GetState>
    6010:	41cf      	mov	dp:0xcf <_LinFrameDataBuffer+0x3>, AL
        LinFrameDataBuffer[4] = (ml_uint8)(ddDataSize >> 8);        /* Size of next allowed block (MSB) */
    6012:	79e4      	lod	Y, dp:0xe4 <_ml_driver_mode+0xc>
    6014:	4dd0      	mov	dp:0xd0 <_LinFrameDataBuffer+0x4>, YH
        LinFrameDataBuffer[5] = (ml_uint8)(ddDataSize & 0x00FF);    /* Size of next allowed block (LSB) */
    6016:	45d1      	mov	dp:0xd1 <_LinFrameDataBuffer+0x5>, YL
        LinFrameDataBuffer[6] = (ml_uint8)(timeout >> 8);           /* command execution time (MSB)     */
    6018:	7201      	lod	A, [S-2]
    601a:	49d2      	mov	dp:0xd2 <_LinFrameDataBuffer+0x6>, AH
        LinFrameDataBuffer[7] = (ml_uint8)(timeout & 0xFF);         /* command execution time (LSB)     */
    601c:	6201      	lod	AL, [S-2]
    601e:	41d3      	mov	dp:0xd3 <_LinFrameDataBuffer+0x7>, AL
    }

    (void)ml_DataReady(ML_END_OF_TX_DISABLED);                      /* Signal to MLX4 that the data is ready */
    6020:	7000      	lod	A, #0
    6022:	1540      	call	0x5aa4 <_ml_DataReady>
    6024:	5403      	ret	#4

00006026 <_ml_ldr_ErrorDetected>:
{
    /*
     * Sometimes erShort error is detected by MLX4 during flash uploading due to
     * transition slow/fast mode. Ignore ml_erShort error during reprogramming
     */
    if (Error != ml_erShort) {
    6026:	ac0a      	cmp	A, #10
    6028:	1901      	je	0x602c <_ml_ldr_ErrorDetected+0x6>
        MLX4_error = (ml_uint8)Error;  /* save as last detected MLX4 error */
    602a:	41d9      	mov	dp:0xd9 <_ml_driver_mode+0x1>, AL
    602c:	5401      	ret
 * \param     add_info        additional information to write into `LinFrameDataBuffer[]'
 *
 * Globals: Same as for ml_ldr_ReadFlashCRC16
 */
__MLX_TEXT__ static void ml_ldr_SendCrcResponse (uint16 add_info)
{
    602e:	5807      	inc	S, #8
    6030:	5207      	mov	[S-8], A
    if (MLX4_error != 0) {
    6032:	61d9      	lod	AL, dp:0xd9 <_ml_driver_mode+0x1>
    6034:	1904      	je	0x603e <_ml_ldr_ErrorDetected+0x18>
        ml_PrepareErrorResponse(ddErNONE); /* Error response */
    6036:	72da 00f0 	lod	A, #240
    603a:	1740      	call	0x5ebc <_ldr_isReadByIdMessage+0x4e>
    603c:	0040      	jmp	0x60be <_ml_ldr_ErrorDetected+0x98>
    }
    else {

#if STANDALONE_LOADER != 1
        ml_Disconnect(); /* Disconnect Mlx4 from LIN bus; Preventing mlx4 unwanted interrupts */
    603e:	15b3      	call	0x5ba6 <_ml_Disconnect>
 * Calling this function ones increase calculation speed instead of every byte
 * function calling from 'mathlib'.
 */
__MLX_TEXT__ static uint16 ml_ldr_ReadFlashCRC16 (void)
{
    const uint8 *data = (uint8 *)ddDataAddress;
    6040:	79e0      	lod	Y, dp:0xe0 <_ml_driver_mode+0x8>
    6042:	5a05      	mov	[S-6], Y

    uint16 i;
    uint16 crc = 0xFFFF;
    6044:	78ff      	lod	Y, #-1

    for (i = 0; i < ddDataSize; i++) {
    6046:	7000      	lod	A, #0
    6048:	5201      	mov	[S-2], A
    604a:	71e4      	lod	A, dp:0xe4 <_ml_driver_mode+0xc>
    604c:	5203      	mov	[S-4], A
    604e:	7000      	lod	A, #0
    6050:	ae03      	cmp	A, [S-4]
    6052:	1c26      	jnc	0x60a0 <_ml_ldr_ErrorDetected+0x7a>
        crc  = (uint8)(crc >> 8) | (crc << 8);
    6054:	7ae8      	swap	Y
        crc ^= *data;
    6056:	7e05      	lod	X, [S-6]
    6058:	62de      	lod	AL, [X++]
    605a:	5e05      	mov	[S-6], X
    605c:	5cf2      	usex	A
    605e:	fee2      	xor	Y, A
        data++;
        crc ^= (uint8)(crc & 0xff) >> 4;
    6060:	62e8      	lod	AL, YL
    6062:	44b0      	lsr	AL, #2
    6064:	44b0      	lsr	AL, #2
    6066:	5cf2      	usex	A
    6068:	fee2      	xor	Y, A
        crc ^= (crc << 8) << 4;
    606a:	72e6      	lod	A, Y
    606c:	b40f      	and	A, #15
    606e:	44d2      	rr	A, #2
    6070:	44d2      	rr	A, #2
    6072:	fee2      	xor	Y, A
        crc ^= ((crc & 0xff) << 4) << 1;
    6074:	72e6      	lod	A, Y
    6076:	b6da 00ff 	and	A, #255
    607a:	44a2      	asl	A, #2
    607c:	44a2      	asl	A, #2
    607e:	4422      	asl	A
    6080:	fee2      	xor	Y, A

        if ((i & 0x0FFF) == 0)
    6082:	7201      	lod	A, [S-2]
    6084:	b6da 0fff 	and	A, #4095
    6088:	1d07      	jne	0x6098 <_ml_ldr_ErrorDetected+0x72>
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    608a:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    608c:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    608e:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    6090:	b430      	and	A, #48
    6092:	1902      	je	0x6098 <_ml_ldr_ErrorDetected+0x72>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    6094:	6000      	lod	AL, #0
    6096:	4282      	mov	io:0x2 <_LinCmnd>, AL
    const uint8 *data = (uint8 *)ddDataAddress;

    uint16 i;
    uint16 crc = 0xFFFF;

    for (i = 0; i < ddDataSize; i++) {
    6098:	7201      	lod	A, [S-2]
    609a:	a001      	add	A, #1
    609c:	5201      	mov	[S-2], A
    609e:	07d8      	jmp	0x6050 <_ml_ldr_ErrorDetected+0x2a>
        uint16 flash_block_crc = ml_ldr_ReadFlashCRC16();

        /* ...wait... */

        /* Fill the buffer */
        LinFrameDataBuffer[0] = LIN_nad;
    60a0:	61d4      	lod	AL, dp:0xd4 <_LIN_nad>
    60a2:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL
        LinFrameDataBuffer[1] = 0x06;           /* RPCI = length           */
    60a4:	6006      	lod	AL, #6
    60a6:	41cd      	mov	dp:0xcd <_LinFrameDataBuffer+0x1>, AL
        LinFrameDataBuffer[2] = 0xF4;           /* RSID =  SID + 0x40      */
    60a8:	60f4      	lod	AL, #-12
    60aa:	41ce      	mov	dp:0xce <_LinFrameDataBuffer+0x2>, AL
        LinFrameDataBuffer[3] = 0xFF;           /* 0xFF means CRC is ready (reserved) */
    60ac:	60ff      	lod	AL, #-1
    60ae:	41cf      	mov	dp:0xcf <_LinFrameDataBuffer+0x3>, AL
        LinFrameDataBuffer[4] = (uint8) (flash_block_crc >> 8) & 0xFF;    /* MSB of CRC   */
    60b0:	4dd0      	mov	dp:0xd0 <_LinFrameDataBuffer+0x4>, YH
        LinFrameDataBuffer[5] = (uint8) (flash_block_crc) & 0xFF;         /* LSB of CRC   */
    60b2:	45d1      	mov	dp:0xd1 <_LinFrameDataBuffer+0x5>, YL
        LinFrameDataBuffer[6] = (uint8) (add_info >> 8) & 0xFF;           /* MSB of word  */
    60b4:	7207      	lod	A, [S-8]
    60b6:	49d2      	mov	dp:0xd2 <_LinFrameDataBuffer+0x6>, AH
        LinFrameDataBuffer[7] = (uint8) (add_info) & 0xFF;                /* LSB of word  */
    60b8:	6607      	lod	YL, [S-8]
    60ba:	45d3      	mov	dp:0xd3 <_LinFrameDataBuffer+0x7>, YL

#if STANDALONE_LOADER != 1
        ml_Connect();                 /* Connect Mlx4 to LIN bus; Calculation of CRC is over */
    60bc:	1572      	call	0x5ba2 <_ml_Connect>
#endif /* !STANDALONE_LOADER */
    }
    (void)ml_DataReady(ML_DISABLED);  /* Signal that the data is ready to send               */
    60be:	7000      	lod	A, #0
    60c0:	14f1      	call	0x5aa4 <_ml_DataReady>
    60c2:	5409      	ret	#10

000060c4 <_ml_ldr_SwitchToProgMode>:

/* ----------------------------------------------------------------------------
 *  Switch to programming mode
 */
__MLX_TEXT__  void ml_ldr_SwitchToProgMode (ml_bool Reset)
{
    60c4:	5801      	inc	S, #2
    60c6:	5201      	mov	[S-2], A

    /*
     * Test is the application needs to be stopped
     * Note: mlu_ApplicationStop doesn't exits if LoaderState != 0
     */
    if ((LDR_GetState() == 0) && (mlu_ApplicationStop() != ML_SUCCESS)) { /* if application can not be stopped .. */
    60c8:	12be      	call	0x6646 <_LDR_GetState>
    60ca:	8c00      	cmp	AL, #0
    60cc:	1d09      	jne	0x60e0 <_ml_ldr_SwitchToProgMode+0x1c>
    60ce:	82db 7894 	callf	0x7894 <_mlu_ApplicationStop>
    60d2:	8c00      	cmp	AL, #0
    60d4:	1905      	je	0x60e0 <_ml_ldr_SwitchToProgMode+0x1c>

        /*
         * Stay in application mode (kLinAppMode)
         */

        ml_driver_mode = kLinAppMode; /* TODO: check this one */
    60d6:	6000      	lod	AL, #0
    60d8:	41d8      	mov	dp:0xd8 <_ml_driver_mode>, AL
        /*
         * Can be also used for LIN loader if binary compatibility is not required
         */
        (void)ml_ReleaseBufferProg(ML_DISABLED);    /* Disable prog mode, SID = 0xB2 */
    60da:	7000      	lod	A, #0
    60dc:	14de      	call	0x5a9a <_ml_ReleaseBufferProg>
    60de:	5403      	ret	#4
    }
    else {
        MLX16_MASK_ALL_INT();           /* mask all interrupts */
    60e0:	7000      	lod	A, #0
    60e2:	52d8 2006 	mov	0x2006 <__ep__+0x1006>, A

        if (   (0 == LDR_GetState())
    60e6:	12af      	call	0x6646 <_LDR_GetState>
    60e8:	8c00      	cmp	AL, #0
    60ea:	1d0b      	jne	0x6102 <_ml_ldr_SwitchToProgMode+0x3e>
    60ec:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    60f0:	aeda 3212 	cmp	A, #12818
    60f4:	1906      	je	0x6102 <_ml_ldr_SwitchToProgMode+0x3e>
#if defined (LDR_RESET_ON_ENTER_PROG_MODE)
            && (bistResetInfo != C_CHIP_STATE_LOADER_PROG_RESET) /* if reset reason isn't EnterProgMode */
#endif /* LDR_RESET_ON_ENTER_PROG_MODE */
           )
        {   /* in state 0 .. */
            NVRAM_SaveAll();            /* save NVRAM; will be restored on next reset       */
    60f6:	14c8      	call	0x5a88 <_NVRAM_SaveAll>
            ENABLE_MLX4_INT();          /* enable only LIN interrupt */
    60f8:	72d8 2006 	lod	A, 0x2006 <__ep__+0x1006>
    60fc:	a410      	or	A, #16
    60fe:	52d8 2006 	mov	0x2006 <__ep__+0x1006>, A
        }
        /* else : for other loader state use LIN interrupt polling */

        ml_driver_mode  = kLinLoaderMode;   /* loader mode */
    6102:	6055      	lod	AL, #85
    6104:	41d8      	mov	dp:0xd8 <_ml_driver_mode>, AL
        ddCurrentOp = 0;                    /* reset ddCurrentOp state machine */
    6106:	6000      	lod	AL, #0
    6108:	41da      	mov	dp:0xda <_ml_driver_mode+0x2>, AL
        Flash_InitDriver();
    610a:	12a8      	call	0x665c <_Flash_InitDriver>

        /*
         * Can be also used for LIN loader if binary compatibility is not required
         */
        (void)ml_ReleaseBufferProg(ML_ENABLED); /* Enable prog mode: sending of prepared buffer w/o message request */
    610c:	7001      	lod	A, #1
    610e:	14c5      	call	0x5a9a <_ml_ReleaseBufferProg>

        if (Reset == ML_TRUE) {
    6110:	6201      	lod	AL, [S-2]
    6112:	8c01      	cmp	AL, #1
    6114:	1d0c      	jne	0x612e <_ml_ldr_SwitchToProgMode+0x6a>
#if defined (LDR_RESET_ON_ENTER_PROG_MODE)
            bistResetInfo = C_CHIP_STATE_LOADER_PROG_RESET;
    6116:	72da 3212 	lod	A, #12818
    611a:	52d8 0338 	mov	0x338 <_bistResetInfo>, A
            MLX4_RESET();           /* reset the Mlx4   */
    611e:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    6122:	94fe      	and	AL, #-2
    6124:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
            MLX16_RESET();          /* reset the Mlx16  */
    6128:	82db 5920 	callf	0x5920 <_MLX16_RESET>
            for (;;) {
    612c:	07ff      	jmp	0x612c <_ml_ldr_SwitchToProgMode+0x68>
            }
#endif /* LDR_RESET_ON_ENTER_PROG_MODE */
        }
        else {
            /* Prepare the data to be sent */
            LinFrameDataBuffer[0] = LIN_nad;
    612e:	61d4      	lod	AL, dp:0xd4 <_LIN_nad>
    6130:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL
            LinFrameDataBuffer[1] = 0x06;   /* PCI */
    6132:	6006      	lod	AL, #6
    6134:	41cd      	mov	dp:0xcd <_LinFrameDataBuffer+0x1>, AL
            LinFrameDataBuffer[2] = 0xF2;   /* SID + 0x40 */
    6136:	60f2      	lod	AL, #-14
    6138:	41ce      	mov	dp:0xce <_LinFrameDataBuffer+0x2>, AL

            uint32_t version = ml_GetPlatformVersion();

            LinFrameDataBuffer[3] = (ml_uint8)(version >> 24);
    613a:	4cea 0004 	movu	YA, #4
    613e:	41cf      	mov	dp:0xcf <_LinFrameDataBuffer+0x3>, AL
            LinFrameDataBuffer[4] = (ml_uint8)(version >> 16);
    6140:	4cea 0401 	movu	YA, #1025
    6144:	41d0      	mov	dp:0xd0 <_LinFrameDataBuffer+0x4>, AL
            LinFrameDataBuffer[5] = (ml_uint8)(version >>  8);
    6146:	6000      	lod	AL, #0
    6148:	41d1      	mov	dp:0xd1 <_LinFrameDataBuffer+0x5>, AL
            LinFrameDataBuffer[6] = (ml_uint8)version;
    614a:	41d2      	mov	dp:0xd2 <_LinFrameDataBuffer+0x6>, AL

            LinFrameDataBuffer[7] = LDR_GetState();
    614c:	127c      	call	0x6646 <_LDR_GetState>
    614e:	41d3      	mov	dp:0xd3 <_LinFrameDataBuffer+0x7>, AL

            (void)ml_DataReady(ML_END_OF_TX_DISABLED);
    6150:	7000      	lod	A, #0
    6152:	14a8      	call	0x5aa4 <_ml_DataReady>
    6154:	5403      	ret	#4

00006156 <_ml_ldr_ReadByIdMessage>:
 *
 * \param Id            identifier value of ReadById message
 */
__MLX_TEXT__ void ml_ldr_ReadByIdMessage (uint8_t Id)
{
    if (_mlx_MsgEnterProgModeID == Id) { /* EnterProgMode frame was requested */
    6156:	8c33      	cmp	AL, #51
    6158:	1d03      	jne	0x6160 <_ml_ldr_ReadByIdMessage+0xa>
#if defined (LDR_RESET_ON_ENTER_PROG_MODE)
        ml_ldr_SwitchToProgMode(ML_TRUE);
    615a:	7001      	lod	A, #1
    615c:	17b3      	call	0x60c4 <_ml_ldr_SwitchToProgMode>
    615e:	5401      	ret
#else /* LDR_RESET_ON_ENTER_PROG_MODE */
        ml_ldr_SwitchToProgMode(ML_FALSE);
#endif /* LDR_RESET_ON_ENTER_PROG_MODE */
    }
    else if (_mlx_MsgLinProdID == Id) {  /* LIN product identification frame was requested */
    6160:	ac00      	cmp	A, #0
    6162:	1d14      	jne	0x618c <_ml_ldr_ReadByIdMessage+0x36>
 * Send positive response with Loader identifiers
 */
__MLX_TEXT__ void ml_ldr_SendLinProdIDResponse (void)
{
    /* Enable prog mode: sending of prepared data buffer w/o message request */
    (void)ml_ReleaseBufferProg(ML_ENABLED);
    6164:	7001      	lod	A, #1
    6166:	1499      	call	0x5a9a <_ml_ReleaseBufferProg>

    /* Prepare the data to be sent */
    LinFrameDataBuffer[0] = LIN_nad;
    6168:	61d4      	lod	AL, dp:0xd4 <_LIN_nad>
    616a:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL
    LinFrameDataBuffer[1] = 0x06;   /* PCI */
    616c:	6006      	lod	AL, #6
    616e:	41cd      	mov	dp:0xcd <_LinFrameDataBuffer+0x1>, AL
    LinFrameDataBuffer[2] = 0xF2;   /* SID + 0x40 */
    6170:	60f2      	lod	AL, #-14
    6172:	41ce      	mov	dp:0xce <_LinFrameDataBuffer+0x2>, AL
    LinFrameDataBuffer[3] = (ml_uint8)(LDR_SUPPLIER_ID);
    6174:	6013      	lod	AL, #19
    6176:	41cf      	mov	dp:0xcf <_LinFrameDataBuffer+0x3>, AL
    LinFrameDataBuffer[4] = (ml_uint8)(LDR_SUPPLIER_ID >> 8);
    6178:	6000      	lod	AL, #0
    617a:	41d0      	mov	dp:0xd0 <_LinFrameDataBuffer+0x4>, AL
    LinFrameDataBuffer[5] = (ml_uint8)(LDR_FUNCTION_ID);
    617c:	60fe      	lod	AL, #-2
    617e:	41d1      	mov	dp:0xd1 <_LinFrameDataBuffer+0x5>, AL
    LinFrameDataBuffer[6] = (ml_uint8)(LDR_FUNCTION_ID >> 8);
    6180:	60ca      	lod	AL, #-54
    6182:	41d2      	mov	dp:0xd2 <_LinFrameDataBuffer+0x6>, AL
#if defined (HAS_ROM_LOADER)
    LinFrameDataBuffer[7] = 0;
#else
    LinFrameDataBuffer[7] = 1;
    6184:	6001      	lod	AL, #1
    6186:	41d3      	mov	dp:0xd3 <_LinFrameDataBuffer+0x7>, AL
#endif
    (void)ml_DataReady(ML_END_OF_TX_DISABLED);
    6188:	7000      	lod	A, #0
    618a:	148c      	call	0x5aa4 <_ml_DataReady>
    618c:	5401      	ret

0000618e <_ml_DiagRequest>:
#if 0
    WDG_Manager();
#endif


    switch (pendingAction) {
    618e:	61eb      	lod	AL, dp:0xeb <_ml_driver_mode+0x13>
    6190:	8c03      	cmp	AL, #3
    6192:	1d15      	jne	0x61be <_ml_DiagRequest+0x30>

#if STANDALONE_LOADER == 0
        case ddFastProt:
            (void)ml_ContFrame(ML_DISABLED);
    6194:	7000      	lod	A, #0
    6196:	14b1      	call	0x5afa <_ml_ContFrame>
            (void)ml_Disconnect();
    6198:	1506      	call	0x5ba6 <_ml_Disconnect>
            /* Set baudrate */
            (void)ml_SetFastBaudRate(peCurrentValue);
    619a:	61dc      	lod	AL, dp:0xdc <_ml_driver_mode+0x4>
    619c:	5cf2      	usex	A
    619e:	1377      	call	0x688e <_ml_SetFastBaudRate>
            /* Configure the Mlx4 software */
            (void)ml_SetOptions (1U,        /* IDStopBitLength = 1.5 Bit (Melexis LIN Master has 1.5 Tbit stop bit */
    61a0:	54ca 0000 	pushw	#0
    61a4:	54ca 0001 	pushw	#1
    61a8:	54ca 0000 	pushw	#0
    61ac:	7001      	lod	A, #1
    61ae:	1498      	call	0x5ae0 <_ml_SetOptions>
                            0U,             /* TXStopBitLength = 1 Bit */
                            ML_ENABLED,     /* StateChangeSignal */
                            ML_LIGHTSLEEP   /* SleepMode: lightsleep mode */
                           );
            (void)ml_SetSlewRate(ML_SLEWFAST);
    61b0:	7001      	lod	A, #1
    61b2:	1492      	call	0x5ad8 <_ml_SetSlewRate>
            (void)ml_SwitchToFast(); /* Switch to fast protocol */
    61b4:	14fa      	call	0x5baa <_ml_SwitchToFast>
            pendingAction = 0;
    61b6:	6000      	lod	AL, #0
    61b8:	41eb      	mov	dp:0xeb <_ml_driver_mode+0x13>, AL
            break;
    61ba:	5c05      	dec	S, #6
    61bc:	5401      	ret
#endif /* STANDALONE_LOADER */

        default:    /* Continuous Frame (CF) reading handling */
            if ((ddCurrentOp == ddReadAdd)
    61be:	61da      	lod	AL, dp:0xda <_ml_driver_mode+0x2>
    61c0:	8c06      	cmp	AL, #6
    61c2:	1902      	je	0x61c8 <_ml_DiagRequest+0x3a>
    61c4:	8c08      	cmp	AL, #8
    61c6:	1d14      	jne	0x61f0 <_ml_DiagRequest+0x62>
                    || (ddCurrentOp == ddEeRead)
#endif /* LDR_HAS_EEPROM_COMMANDS */
               )
            {
                /* Flash, Table or EEPROM Read Operation */
                if (ddDataCounter < ddDataSize) {       /* if there is still data to send .. */
    61c8:	71e8      	lod	A, dp:0xe8 <_ml_driver_mode+0x10>
    61ca:	ade4      	cmp	A, dp:0xe4 <_ml_driver_mode+0xc>
    61cc:	1c11      	jnc	0x61f0 <_ml_DiagRequest+0x62>
                    ddFrameCounter += 1;
    61ce:	61ea      	lod	AL, dp:0xea <_ml_driver_mode+0x12>
    61d0:	8001      	add	AL, #1
    61d2:	66e0      	lod	YL, AL
    61d4:	41ea      	mov	dp:0xea <_ml_driver_mode+0x12>, AL

                    /* Fill the buffer : NAD PCI Data1 Data2 Data3 Data4 Data5 Data6 */
                    LinFrameDataBuffer[0] = LIN_nad;                            /* NAD */
    61d6:	61d4      	lod	AL, dp:0xd4 <_LIN_nad>
    61d8:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL
                    LinFrameDataBuffer[1] = 0x20 | ((ddFrameCounter) & 0x0F);   /* RPCI */
    61da:	62e8      	lod	AL, YL
    61dc:	940f      	and	AL, #15
    61de:	8420      	or	AL, #32
    61e0:	41cd      	mov	dp:0xcd <_LinFrameDataBuffer+0x1>, AL
                    ml_ReadData(2, 6);      /* copy next 6 bytes from ddDataAddress to buffer starting from LinFrameDataBuffer[2] */
    61e2:	54ca 0006 	pushw	#6
    61e6:	7002      	lod	A, #2
    61e8:	169c      	call	0x5f22 <_ldr_isReadByIdMessage+0xb4>
                                            /* if less than 6 bytes left, fill with 0xFF */

                    (void)ml_DataReady(ML_END_OF_TX_DISABLED);
    61ea:	7000      	lod	A, #0
    61ec:	145b      	call	0x5aa4 <_ml_DataReady>
    61ee:	5c01      	dec	S, #2
    61f0:	5401      	ret

000061f2 <_ml_DiagReceived>:
 * Get the data received
 * byte 0 : NAD (LinFrameDataBuffer[0])
 * byte 1 : PCI (Protocol Control Information) (LinFrameDataBuffer[1])
 */
__MLX_TEXT__  void ml_DiagReceived (void)
{
    61f2:	580d      	inc	S, #14

#if 0
    WDG_Manager();
#endif

    const ml_uint8 PCI = LinFrameDataBuffer[1];
    61f4:	61cd      	lod	AL, dp:0xcd <_LinFrameDataBuffer+0x1>
    61f6:	5cf2      	usex	A
    61f8:	520b      	mov	[S-12], A
     *
     * \note:
     * CF is only used for the commands: ddWriteKey and ddData (operations
     * ddWriteAdd, ddEeWrite)
     */
    if ((PCI & 0xF0) == 0x20) {                                 /* if Consecutive Frame (CF) frame received ..  */
    61fa:	b6da 00f0 	and	A, #240
    61fe:	ac20      	cmp	A, #32
    6200:	1901      	je	0x6204 <_ml_DiagReceived+0x12>
    6202:	0073      	jmp	0x62ea <_ml_DiagReceived+0xf8>

#if defined (LDR_HAS_PROTECTION_KEY)
        /* if Loader isn't protected with key or permitted command is requested */
        if ( (0 == ldr_isProtectedByKey()) || (ddCurrentOp == ddWriteKey) ) {
#endif /* LDR_HAS_PROTECTION_KEY */
            if ((PCI & 0x0F) == (ddFrameCounter & 0x0F)) {  /* if local frame counter (4 bits) matches the counter in PCI .. */
    6204:	7a0b      	lod	Y, [S-12]
    6206:	f40f      	and	Y, #15
    6208:	61ea      	lod	AL, dp:0xea <_ml_driver_mode+0x12>
    620a:	4209      	mov	[S-10], AL
    620c:	b40f      	and	A, #15
    620e:	eee2      	cmp	Y, A
    6210:	1901      	je	0x6214 <_ml_DiagReceived+0x22>
    6212:	0067      	jmp	0x62e2 <_ml_DiagReceived+0xf0>
                ddFrameCounter += 1;
    6214:	6209      	lod	AL, [S-10]
    6216:	8001      	add	AL, #1
    6218:	41ea      	mov	dp:0xea <_ml_driver_mode+0x12>, AL

                if (ddCurrentOp == ddWriteAdd) {
    621a:	61da      	lod	AL, dp:0xda <_ml_driver_mode+0x2>
    621c:	8c85      	cmp	AL, #-123
    621e:	1901      	je	0x6222 <_ml_DiagReceived+0x30>
    6220:	003d      	jmp	0x629c <_ml_DiagReceived+0xaa>
                    for (i = 0; i < 6; i++) {               /* Store the Data received */
    6222:	7800      	lod	Y, #0
    6224:	5a0d      	mov	[S-14], Y
                        if (ddDataCounter < ddDataSize) {
    6226:	79e8      	lod	Y, dp:0xe8 <_ml_driver_mode+0x10>
    6228:	ede4      	cmp	Y, dp:0xe4 <_ml_driver_mode+0xc>
    622a:	1c0a      	jnc	0x6240 <_ml_DiagReceived+0x4e>
                            Flash_PageBufferFill(ddAddressOffset + ddDataCounter, Data[i]);
    622c:	71e2      	lod	A, dp:0xe2 <_ml_driver_mode+0xa>
    622e:	a2e6      	add	A, Y
    6230:	7a0d      	lod	Y, [S-14]
    6232:	e2da 00ce 	add	Y, #206
    6236:	66f0      	lod	YL, [Y]
    6238:	5cf6      	usex	Y
    623a:	5adf      	push	Y
    623c:	1246      	call	0x66ca <_Flash_PageBufferFill>
    623e:	5c01      	dec	S, #2
                        }
                        /* else : ignore padding data beyond the original message size (ddDataSize) */

                        ddDataCounter += 1;
    6240:	71e8      	lod	A, dp:0xe8 <_ml_driver_mode+0x10>
    6242:	a001      	add	A, #1
    6244:	51e8      	mov	dp:0xe8 <_ml_driver_mode+0x10>, A
#endif /* LDR_HAS_PROTECTION_KEY */
            if ((PCI & 0x0F) == (ddFrameCounter & 0x0F)) {  /* if local frame counter (4 bits) matches the counter in PCI .. */
                ddFrameCounter += 1;

                if (ddCurrentOp == ddWriteAdd) {
                    for (i = 0; i < 6; i++) {               /* Store the Data received */
    6246:	7a0d      	lod	Y, [S-14]
    6248:	e001      	add	Y, #1
    624a:	5a0d      	mov	[S-14], Y
    624c:	ec05      	cmp	Y, #5
    624e:	1a6b      	jule	0x6226 <_ml_DiagReceived+0x34>
                    }

                    /* If all data has been written to the buffer, write the flash
                     * This also means that this was the last Continuous Frame
                     */
                    if (ddDataCounter >= ddDataSize) {
    6250:	ade4      	cmp	A, dp:0xe4 <_ml_driver_mode+0xc>
    6252:	1c01      	jnc	0x6256 <_ml_DiagReceived+0x64>
    6254:	01f7      	jmp	0x6644 <_ml_DiagReceived+0x452>

#if (LDR_FLASH_WRITE_TEST != FLASH_TEST_NONE)
                        flashWriteStatus = Flash_PageWriteFiltered(ddDataAddress);
    6256:	71e0      	lod	A, dp:0xe0 <_ml_driver_mode+0x8>
    6258:	1308      	call	0x686a <_Flash_PageWriteFiltered>
    625a:	51de      	mov	dp:0xde <_ml_driver_mode+0x6>, A
#else
                        (void)Flash_PageWriteFiltered(ddDataAddress);
#endif /* LDR_FLASH_WRITE_TEST */

#if (LDR_FLASH_WRITE_TEST != FLASH_TEST_NONE)
                        if (FLASH_ERR_NONE == flashWriteStatus) {
    625c:	ac00      	cmp	A, #0
    625e:	1901      	je	0x6262 <_ml_DiagReceived+0x70>
    6260:	0042      	jmp	0x62e6 <_ml_DiagReceived+0xf4>
#endif /* LDR_FLASH_WRITE_TEST */
                            if (ddDataCounter < ddDataSizeRq) { /* if there is still some data to be written ..*/
    6262:	71e8      	lod	A, dp:0xe8 <_ml_driver_mode+0x10>
    6264:	79e6      	lod	Y, dp:0xe6 <_ml_driver_mode+0xe>
    6266:	aee6      	cmp	A, Y
    6268:	1c15      	jnc	0x6294 <_ml_DiagReceived+0xa2>
 * ddDataCounter after a block has been written in flash.
 * Also read the next block.
 */
__MLX_TEXT__  static void ml_UpdateDataIndex (void)
{
    ddDataAddress += 128;           /* Get the next block */
    626a:	71e0      	lod	A, dp:0xe0 <_ml_driver_mode+0x8>
    626c:	7ee2      	lod	X, A
    626e:	22da 0080 	add	X, #128
    6272:	5de0      	mov	dp:0xe0 <_ml_driver_mode+0x8>, X
    ddAddressOffset = 0;            /* Reset the address offset (0 since we start at the beginning of a next block) */
    6274:	7000      	lod	A, #0
    6276:	51e2      	mov	dp:0xe2 <_ml_driver_mode+0xa>, A
    ddDataCounter = 0;              /* Reset the data counter */
    6278:	51e8      	mov	dp:0xe8 <_ml_driver_mode+0x10>, A
    ddDataSize = ddDataSizeRq;      /* Calculate the next size */
    627a:	59e4      	mov	dp:0xe4 <_ml_driver_mode+0xc>, Y
    if (ddDataSize > 128) {
    627c:	eeda 0080 	cmp	Y, #128
    6280:	1a03      	jule	0x6288 <_ml_DiagReceived+0x96>
        ddDataSize = 128;
    6282:	72da 0080 	lod	A, #128
    6286:	51e4      	mov	dp:0xe4 <_ml_driver_mode+0xc>, A
    }
    /* else : size is correct */

    ddDataSizeRq -= ddDataSize;
    6288:	72e6      	lod	A, Y
    628a:	a9e4      	sub	A, dp:0xe4 <_ml_driver_mode+0xc>
    628c:	51e6      	mov	dp:0xe6 <_ml_driver_mode+0xe>, A

    Flash_PageRead(ddDataAddress);  /* Read the flash block (128 bytes) to internal RAM buffer */
    628e:	72ee      	lod	A, X
    6290:	120d      	call	0x66ac <_Flash_PageRead>
    6292:	0029      	jmp	0x62e6 <_ml_DiagReceived+0xf4>
#endif /* LDR_FLASH_WRITE_TEST */
                            if (ddDataCounter < ddDataSizeRq) { /* if there is still some data to be written ..*/
                                ml_UpdateDataIndex();           /* .. update the indexes and counters */
                            }
                            else {                              /* Operation is done */
                                ddDataSize = 0;
    6294:	7800      	lod	Y, #0
    6296:	59e4      	mov	dp:0xe4 <_ml_driver_mode+0xc>, Y
                                ddDataSizeRq = 0;
    6298:	59e6      	mov	dp:0xe6 <_ml_driver_mode+0xe>, Y
    629a:	0025      	jmp	0x62e6 <_ml_DiagReceived+0xf4>
                        (void)ml_ContFrame(ML_DISABLED);    /* signal to MLX4 that there are no more Continuous Frame after that */
                    }
                    /* else: message is not fully received yet  */
                }
#if (LDR_HAS_EEPROM_COMMANDS != 0)
                else if (ddCurrentOp == ddEeWrite) {
    629c:	8c47      	cmp	AL, #71
    629e:	1d23      	jne	0x62e6 <_ml_DiagReceived+0xf4>
                    for (i = 0; i < 6; i++) {               /* Store the Data received */
    62a0:	7000      	lod	A, #0
    62a2:	520d      	mov	[S-14], A
                        if (ddDataCounter < ddDataSize) {
    62a4:	79e8      	lod	Y, dp:0xe8 <_ml_driver_mode+0x10>
    62a6:	ede4      	cmp	Y, dp:0xe4 <_ml_driver_mode+0xc>
    62a8:	1c0b      	jnc	0x62c0 <_ml_DiagReceived+0xce>
                            NVRAM_BufferFill(ddDataAddress + ddDataCounter, Data[i]);
    62aa:	71e0      	lod	A, dp:0xe0 <_ml_driver_mode+0x8>
    62ac:	a2e6      	add	A, Y
    62ae:	7a0d      	lod	Y, [S-14]
    62b0:	e2da 00ce 	add	Y, #206
    62b4:	66f0      	lod	YL, [Y]
    62b6:	5cf6      	usex	Y
    62b8:	5adf      	push	Y
    62ba:	82db 5a5e 	callf	0x5a5e <_NVRAM_BufferFill>
    62be:	5c01      	dec	S, #2
                        }
                        /* else : ignore padding data beyond the original message size (ddDataSize) */

                        ddDataCounter += 1;
    62c0:	71e8      	lod	A, dp:0xe8 <_ml_driver_mode+0x10>
    62c2:	a001      	add	A, #1
    62c4:	51e8      	mov	dp:0xe8 <_ml_driver_mode+0x10>, A
                    }
                    /* else: message is not fully received yet  */
                }
#if (LDR_HAS_EEPROM_COMMANDS != 0)
                else if (ddCurrentOp == ddEeWrite) {
                    for (i = 0; i < 6; i++) {               /* Store the Data received */
    62c6:	7a0d      	lod	Y, [S-14]
    62c8:	e001      	add	Y, #1
    62ca:	5a0d      	mov	[S-14], Y
    62cc:	ec05      	cmp	Y, #5
    62ce:	1a6a      	jule	0x62a4 <_ml_DiagReceived+0xb2>
                    }

                    /* If all data has been written to the buffer, write the EEPROM
                     * This also means that this was the last Continuous Frame
                     */
                    if (ddDataCounter >= ddDataSize) {
    62d0:	ade4      	cmp	A, dp:0xe4 <_ml_driver_mode+0xc>
    62d2:	1c01      	jnc	0x62d6 <_ml_DiagReceived+0xe4>
    62d4:	01b7      	jmp	0x6644 <_ml_DiagReceived+0x452>
                        NVRAM_SaveAll();                    /* Save the EEPROM */
    62d6:	82db 5a88 	callf	0x5a88 <_NVRAM_SaveAll>
                        ddDataSize = 0;
    62da:	7000      	lod	A, #0
    62dc:	51e4      	mov	dp:0xe4 <_ml_driver_mode+0xc>, A
                        (void)ml_ContFrame(ML_DISABLED);    /* no more Continuous Frame (signal to MLX4) */
    62de:	140d      	call	0x5afa <_ml_ContFrame>
    62e0:	540f      	ret	#16
                else {              /* unknown operation .. */
                    (void)ml_ContFrame(ML_DISABLED); /* .. signal to MLX4 that there are no more Continuous Frame after that */
                }
            }
            else {                  /* Error in the CF frame counter */
                ddCurrentOp = 0;    /* Cancel the current operation */
    62e2:	6400      	lod	YL, #0
    62e4:	45da      	mov	dp:0xda <_ml_driver_mode+0x2>, YL
                (void)ml_ContFrame(ML_DISABLED); /* signal to MLX4 that there are no more Continuous Frame after that */
    62e6:	7000      	lod	A, #0
    62e8:	07fa      	jmp	0x62de <_ml_DiagReceived+0xec>
     *
     * \note:
     * FF is only used for the commands: ddWriteKey and ddData (operations
     * ddWriteAdd, ddEeWrite)
     */
    else if ((PCI & 0xF0) == 0x10) {    /* if First Frame (FF) frame received .. */
    62ea:	ac10      	cmp	A, #16
    62ec:	1901      	je	0x62f0 <_ml_DiagReceived+0xfe>
    62ee:	0041      	jmp	0x6372 <_ml_DiagReceived+0x180>
        ml_uint8 const * const Data = &LinFrameDataBuffer[4]; /* data start from byte 4 of the frame  */
        const ml_uint8 SID = LinFrameDataBuffer[3];           /* byte 3 : SID (Service Identifier)    */
    62f0:	61cf      	lod	AL, dp:0xcf <_LinFrameDataBuffer+0x3>
#if defined (LDR_HAS_PROTECTION_KEY)
        /* if Loader isn't protected with key or permitted command is requested */
        if ( (0 == ldr_isProtectedByKey()) || (Data[0] == ddWriteKey) ) {
#endif /* LDR_HAS_PROTECTION_KEY */

            if (SID != 0xB4) {                  /* if this is not a Data Dump operation (SID = 0xB4)    */
    62f2:	8cb4      	cmp	AL, #-76
    62f4:	1901      	je	0x62f8 <_ml_DiagReceived+0x106>
    62f6:	01a0      	jmp	0x6638 <_ml_DiagReceived+0x446>
                ml_FlashUploadStatus(ddErOP);   /* .. send error                                        */
            }
            else {                              /* Data Dump operation (SID = 0xB4) */
                if (Data[0] == ddData) {
    62f8:	61d0      	lod	AL, dp:0xd0 <_LinFrameDataBuffer+0x4>
    62fa:	8cd3      	cmp	AL, #-45
    62fc:	1901      	je	0x6300 <_ml_DiagReceived+0x10e>
    62fe:	019c      	jmp	0x6638 <_ml_DiagReceived+0x446>
                    ddFrameCounter = 1;         /* Data is being sent - reset the frame counter */
    6300:	6001      	lod	AL, #1
    6302:	41ea      	mov	dp:0xea <_ml_driver_mode+0x12>, AL

                    /* Check the preceding command */
                    if (ddCurrentOp == ddWriteAdd) {
    6304:	61da      	lod	AL, dp:0xda <_ml_driver_mode+0x2>
    6306:	8c85      	cmp	AL, #-123
    6308:	1d14      	jne	0x6332 <_ml_DiagReceived+0x140>
                        /* Write data to Flash buffer */
                        Flash_PageBufferFill(ddAddressOffset,     Data[1]);
    630a:	61d1      	lod	AL, dp:0xd1 <_LinFrameDataBuffer+0x5>
    630c:	5cf2      	usex	A
    630e:	52df      	push	A
    6310:	71e2      	lod	A, dp:0xe2 <_ml_driver_mode+0xa>
    6312:	11db      	call	0x66ca <_Flash_PageBufferFill>
                        Flash_PageBufferFill(ddAddressOffset + 1, Data[2]);
    6314:	71e2      	lod	A, dp:0xe2 <_ml_driver_mode+0xa>
    6316:	a001      	add	A, #1
    6318:	65d2      	lod	YL, dp:0xd2 <_LinFrameDataBuffer+0x6>
    631a:	5cf6      	usex	Y
    631c:	5adf      	push	Y
    631e:	11d5      	call	0x66ca <_Flash_PageBufferFill>
                        Flash_PageBufferFill(ddAddressOffset + 2, Data[3]);
    6320:	71e2      	lod	A, dp:0xe2 <_ml_driver_mode+0xa>
    6322:	a002      	add	A, #2
    6324:	65d3      	lod	YL, dp:0xd3 <_LinFrameDataBuffer+0x7>
    6326:	5cf6      	usex	Y
    6328:	5adf      	push	Y
    632a:	11cf      	call	0x66ca <_Flash_PageBufferFill>
                        ddDataCounter = 3;
    632c:	7003      	lod	A, #3
    632e:	51e8      	mov	dp:0xe8 <_ml_driver_mode+0x10>, A
    6330:	0018      	jmp	0x6362 <_ml_DiagReceived+0x170>

                        (void)ml_ContFrame(ML_ENABLED); /* signal to MLX4 that some Continuous Frames are coming */
                    }
#if (LDR_HAS_EEPROM_COMMANDS != 0)
                    else if (ddCurrentOp == ddEeWrite) {
    6332:	8c47      	cmp	AL, #71
    6334:	1d1b      	jne	0x636c <_ml_DiagReceived+0x17a>
                        /* Write data to EEPROM buffer */
                        NVRAM_BufferFill(ddDataAddress,     Data[1]);
    6336:	61d1      	lod	AL, dp:0xd1 <_LinFrameDataBuffer+0x5>
    6338:	5cf2      	usex	A
    633a:	52df      	push	A
    633c:	71e0      	lod	A, dp:0xe0 <_ml_driver_mode+0x8>
    633e:	82db 5a5e 	callf	0x5a5e <_NVRAM_BufferFill>
                        NVRAM_BufferFill(ddDataAddress + 1, Data[2]);
    6342:	71e0      	lod	A, dp:0xe0 <_ml_driver_mode+0x8>
    6344:	a001      	add	A, #1
    6346:	65d2      	lod	YL, dp:0xd2 <_LinFrameDataBuffer+0x6>
    6348:	5cf6      	usex	Y
    634a:	5adf      	push	Y
    634c:	82db 5a5e 	callf	0x5a5e <_NVRAM_BufferFill>
                        NVRAM_BufferFill(ddDataAddress + 2, Data[3]);
    6350:	71e0      	lod	A, dp:0xe0 <_ml_driver_mode+0x8>
    6352:	a002      	add	A, #2
    6354:	65d3      	lod	YL, dp:0xd3 <_LinFrameDataBuffer+0x7>
    6356:	5cf6      	usex	Y
    6358:	5adf      	push	Y
    635a:	82db 5a5e 	callf	0x5a5e <_NVRAM_BufferFill>
                        ddDataCounter = 3;
    635e:	7803      	lod	Y, #3
    6360:	59e8      	mov	dp:0xe8 <_ml_driver_mode+0x10>, Y

                        (void)ml_ContFrame(ML_ENABLED); /* signal to MLX4 that some Continuous Frames are coming */
    6362:	7001      	lod	A, #1
    6364:	82db 5afa 	callf	0x5afa <_ml_ContFrame>
    6368:	5c05      	dec	S, #6
    636a:	540f      	ret	#16
                    }
#endif /* LDR_HAS_EEPROM_COMMANDS */

                    else { /* There is a problem : what is the data for ? */
                        ml_FlashUploadStatus(ddErDATA); /* Send error status */
    636c:	7020      	lod	A, #32
    636e:	15bb      	call	0x5ee6 <_ldr_isReadByIdMessage+0x78>
    6370:	540f      	ret	#16
    }
    /* --- Single Frame (SF) -------------------------------------
     *            [0] [1] [2] [3] [4] [5] [6] [7]
     * SF format: NAD PCI SID D0  D1  D2  D3  D4
     */
    else if ((PCI & 0xF0) == 0x00) {        /* if Single Frame (SF) is received .. */
    6372:	620b      	lod	AL, [S-12]
    6374:	94f0      	and	AL, #-16
    6376:	1901      	je	0x637a <_ml_DiagReceived+0x188>
    6378:	0162      	jmp	0x663e <_ml_DiagReceived+0x44c>
        (void)ml_ContFrame(ML_DISABLED);    /* signal to MLX4 that this is NOT Continuous Frame */
    637a:	7000      	lod	A, #0
    637c:	82db 5afa 	callf	0x5afa <_ml_ContFrame>

        ml_uint8 const * const Data = &LinFrameDataBuffer[3];   /* data start from byte 3 of the frame */
        const ml_uint16 MessageLength = PCI & 0x0F;             /* length */
    6380:	720b      	lod	A, [S-12]
    6382:	b40f      	and	A, #15
    6384:	7ee2      	lod	X, A
        const ml_uint8 SID = LinFrameDataBuffer[2];             /* byte 2 : SID (Service Identifier) */
    6386:	61ce      	lod	AL, dp:0xce <_LinFrameDataBuffer+0x2>

        if (SID != 0xB4) {                  /* if this is not a Data Dump operation (SID = 0xB4) .. */
    6388:	8cb4      	cmp	AL, #-76
    638a:	190d      	je	0x63a6 <_ml_DiagReceived+0x1b4>
            if (ldr_isReadByIdMessage(LinFrameDataBuffer, ML_TRUE)) {  /* check if ReadById (SID = 0xB2) */
    638c:	54ca 0001 	pushw	#1
    6390:	72da 00cc 	lod	A, #204
    6394:	156c      	call	0x5e6e <_ldr_isReadByIdMessage>
    6396:	5c01      	dec	S, #2
    6398:	8c00      	cmp	AL, #0
    639a:	1d01      	jne	0x639e <_ml_DiagReceived+0x1ac>
    639c:	014d      	jmp	0x6638 <_ml_DiagReceived+0x446>
                ml_ldr_ReadByIdMessage(Data[0]);
    639e:	61cf      	lod	AL, dp:0xcf <_LinFrameDataBuffer+0x3>
    63a0:	5cf2      	usex	A
    63a2:	16d9      	call	0x6156 <_ml_ldr_ReadByIdMessage>
    63a4:	540f      	ret	#16
                /* Get the requested 'address' and the 'size'
                 * Not used for ddRestart, ddNop, ddFastProt, ddSlowProt, ddErazeAll, ddEeRestore, ddEeSave
                 * Special care for ddTableExist, ddWriteTable, ddReadTable
                 * Do not do that for ddData and for ddNop (ddDataAddress will be used)
                 */
                if ((Data[0] != ddData) && (Data[0] != ddNop)) {            /* if not Data/Status command(s) .. */
    63a6:	61cf      	lod	AL, dp:0xcf <_LinFrameDataBuffer+0x3>
    63a8:	4207      	mov	[S-8], AL
    63aa:	8cd3      	cmp	AL, #-45
    63ac:	190a      	je	0x63c2 <_ml_DiagReceived+0x1d0>
    63ae:	8c80      	cmp	AL, #-128
    63b0:	1908      	je	0x63c2 <_ml_DiagReceived+0x1d0>
                    ddDataAddress = (((ml_uint16) Data[1]) << 8) | Data[2]; /* .. reload address .. */
    63b2:	69d0      	lod	AH, dp:0xd0 <_LinFrameDataBuffer+0x4>
    63b4:	61d1      	lod	AL, dp:0xd1 <_LinFrameDataBuffer+0x5>
    63b6:	51e0      	mov	dp:0xe0 <_ml_driver_mode+0x8>, A
                    ddDataSize    = (((ml_uint16) Data[3]) << 8) | Data[4]; /* .. and size */
    63b8:	69d2      	lod	AH, dp:0xd2 <_LinFrameDataBuffer+0x6>
    63ba:	61d3      	lod	AL, dp:0xd3 <_LinFrameDataBuffer+0x7>
    63bc:	51e4      	mov	dp:0xe4 <_ml_driver_mode+0xc>, A
                    ddDataCounter = 0;
    63be:	7800      	lod	Y, #0
    63c0:	59e8      	mov	dp:0xe8 <_ml_driver_mode+0x10>, Y
                }
                /* else : do not update ddDataAddress, ddDataSize and ddDataCounter
                 *        for ddData or ddNop operations
                 */

                if ((Data[0] & 0x20 /* bit5 */) != 0)            /* if command is Read Flash (ddReadAdd) or Write Flash (ddWriteAdd) .. */
    63c2:	6607      	lod	YL, [S-8]
    63c4:	5cf6      	usex	Y
    63c6:	72e6      	lod	A, Y
    63c8:	b420      	and	A, #32
    63ca:	1929      	je	0x641e <_ml_DiagReceived+0x22c>
                {
                    if ((Data[0] & 0x30 /* bits 4-5 */) == 0x20) /* if command is Write Flash (Data[0] = xx10xxxx) */
    63cc:	72e6      	lod	A, Y
    63ce:	b430      	and	A, #48
    63d0:	ac20      	cmp	A, #32
    63d2:	1d18      	jne	0x6404 <_ml_DiagReceived+0x212>
                         * Return arguments :
                         *  - ddBlockAddress : base address of the flash
                         *  - ddAddressOffset : offset to address the flash buffer
                         *  - ddBlockSizeRequest : block size that can be written at once
                         */
                        ddCurrentOp = ddWriteAdd;
    63d4:	6085      	lod	AL, #-123
    63d6:	41da      	mov	dp:0xda <_ml_driver_mode+0x2>, AL

                        /* Get the address and the size requested */
                        /* ddFlashBlockAddress = Data[0] & 0x0F; */ /* get the MSBs - not used for now */
                        ddAddressOffset = ddDataAddress & 0x007F;   /* Address offset */
    63d8:	71e0      	lod	A, dp:0xe0 <_ml_driver_mode+0x8>
    63da:	7ae2      	lod	Y, A
    63dc:	f47f      	and	Y, #127
    63de:	59e2      	mov	dp:0xe2 <_ml_driver_mode+0xa>, Y
                        ddDataAddress  &= 0xFF80;                   /* Flash Base Address (7 LSBs are 0) */
    63e0:	b480      	and	A, #-128
    63e2:	5205      	mov	[S-6], A
    63e4:	51e0      	mov	dp:0xe0 <_ml_driver_mode+0x8>, A

                        ddDataSizeRq = ddDataSize;                  /* memorize requested size */
    63e6:	7de4      	lod	X, dp:0xe4 <_ml_driver_mode+0xc>
    63e8:	5de6      	mov	dp:0xe6 <_ml_driver_mode+0xe>, X
                        ddDataSize   = 128 - ddAddressOffset;       /* max data chunk that can be written from the base address */
    63ea:	72da 0080 	lod	A, #128
    63ee:	aae6      	sub	A, Y
    63f0:	51e4      	mov	dp:0xe4 <_ml_driver_mode+0xc>, A

                        if (ddDataSize > ddDataSizeRq) {            /* if requested less than max ..    */
    63f2:	aeee      	cmp	A, X
    63f4:	1a01      	jule	0x63f8 <_ml_DiagReceived+0x206>
                            ddDataSize = ddDataSizeRq;              /* .. do a requested size           */
    63f6:	5de4      	mov	dp:0xe4 <_ml_driver_mode+0xc>, X
                        }
                        /* else : do max possible data chunk */

                        ml_SendWriteResponse(Flash_GetWriteTime(ddDataAddress));
    63f8:	7205      	lod	A, [S-6]
    63fa:	1148      	call	0x668c <_Flash_GetWriteTime>
    63fc:	15fa      	call	0x5ff2 <_ldr_isReadByIdMessage+0x184>
                        Flash_PageRead(ddDataAddress);              /* Read the flash block (128 bytes) to internal RAM buffer */
    63fe:	71e0      	lod	A, dp:0xe0 <_ml_driver_mode+0x8>
    6400:	1155      	call	0x66ac <_Flash_PageRead>
    6402:	540f      	ret	#16
                    }
                    else {
                        /* CRC calculation instead of Read Flash command   */
                        if ((ddCurrentOp == ddProtExtension) && \
    6404:	61da      	lod	AL, dp:0xda <_ml_driver_mode+0x2>
    6406:	8cd6      	cmp	AL, #-42
    6408:	1901      	je	0x640c <_ml_DiagReceived+0x21a>
    640a:	0087      	jmp	0x651a <_ml_DiagReceived+0x328>
    640c:	61db      	lod	AL, dp:0xdb <_ml_driver_mode+0x3>
    640e:	1901      	je	0x6412 <_ml_DiagReceived+0x220>
    6410:	0084      	jmp	0x651a <_ml_DiagReceived+0x328>
    6412:	61dc      	lod	AL, dp:0xdc <_ml_driver_mode+0x4>
    6414:	8c01      	cmp	AL, #1
    6416:	1901      	je	0x641a <_ml_DiagReceived+0x228>
    6418:	0080      	jmp	0x651a <_ml_DiagReceived+0x328>
                        {
                            /* CRC calculation and response sending
                             * Global:            - ddDataAddress (address in the flash)
                             *                    - ddDataSize
                             */
                            ml_ldr_SendCrcResponse(ddDataSize);
    641a:	71e4      	lod	A, dp:0xe4 <_ml_driver_mode+0xc>
    641c:	0106      	jmp	0x662a <_ml_DiagReceived+0x438>
                            ml_SendReadResponse();                      /* Prepare the Response */
                        }
                    }
                }
                else {
                    switch(Data[0]) {
    641e:	eeda 0080 	cmp	Y, #128
    6422:	1d01      	jne	0x6426 <_ml_DiagReceived+0x234>
    6424:	002d      	jmp	0x6480 <_ml_DiagReceived+0x28e>
    6426:	1f0c      	jsg	0x6440 <_ml_DiagReceived+0x24e>
    6428:	ec08      	cmp	Y, #8
    642a:	1d01      	jne	0x642e <_ml_DiagReceived+0x23c>
    642c:	0065      	jmp	0x64f8 <_ml_DiagReceived+0x306>
    642e:	1f04      	jsg	0x6438 <_ml_DiagReceived+0x246>
    6430:	ec03      	cmp	Y, #3
    6432:	1d01      	jne	0x6436 <_ml_DiagReceived+0x244>
    6434:	0039      	jmp	0x64a8 <_ml_DiagReceived+0x2b6>
    6436:	0100      	jmp	0x6638 <_ml_DiagReceived+0x446>
    6438:	ec47      	cmp	Y, #71
    643a:	1d01      	jne	0x643e <_ml_DiagReceived+0x24c>
    643c:	0059      	jmp	0x64f0 <_ml_DiagReceived+0x2fe>
    643e:	00fc      	jmp	0x6638 <_ml_DiagReceived+0x446>
    6440:	eeda 00c1 	cmp	Y, #193
    6444:	190f      	je	0x6464 <_ml_DiagReceived+0x272>
    6446:	1f05      	jsg	0x6452 <_ml_DiagReceived+0x260>
    6448:	eeda 0092 	cmp	Y, #146
    644c:	1d01      	jne	0x6450 <_ml_DiagReceived+0x25e>
    644e:	0059      	jmp	0x6502 <_ml_DiagReceived+0x310>
    6450:	00f3      	jmp	0x6638 <_ml_DiagReceived+0x446>
    6452:	eeda 00d3 	cmp	Y, #211
    6456:	1d01      	jne	0x645a <_ml_DiagReceived+0x268>
    6458:	0063      	jmp	0x6520 <_ml_DiagReceived+0x32e>
    645a:	eeda 00d6 	cmp	Y, #214
    645e:	1d01      	jne	0x6462 <_ml_DiagReceived+0x270>
    6460:	00c6      	jmp	0x65ee <_ml_DiagReceived+0x3fc>
    6462:	00ea      	jmp	0x6638 <_ml_DiagReceived+0x446>
                        /* General Operations **************************************************************/
                        case ddRestart :
                            if (Data[1] == LDR_GetState()) {
    6464:	10f0      	call	0x6646 <_LDR_GetState>
    6466:	66e0      	lod	YL, AL
    6468:	61d0      	lod	AL, dp:0xd0 <_LinFrameDataBuffer+0x4>
    646a:	8ee8      	cmp	AL, YL
    646c:	1d01      	jne	0x6470 <_ml_DiagReceived+0x27e>
    646e:	00ea      	jmp	0x6644 <_ml_DiagReceived+0x452>
                                /* skip reset if Loader's state is equal to required */
                            }
                            else {
                                MLX4_RESET();                       /* reset the Mlx4   */
    6470:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    6474:	94fe      	and	AL, #-2
    6476:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
                                MLX16_RESET();                      /* reset the Mlx16  */
    647a:	82db 5920 	callf	0x5920 <_MLX16_RESET>
                            }
                            break;
    647e:	540f      	ret	#16

                        case ddNop :
                            /* DO NOT modify ddCurrentOp, as the operation might still be in process */
                            /* Return the status and eventually the block size and data bytes */
                            if (ddCurrentOp == ddWriteAdd) {
    6480:	61da      	lod	AL, dp:0xda <_ml_driver_mode+0x2>
    6482:	8c85      	cmp	AL, #-123
    6484:	1d09      	jne	0x6498 <_ml_DiagReceived+0x2a6>
#if (LDR_FLASH_WRITE_TEST != FLASH_TEST_NONE)
                                if (FLASH_ERR_NONE == flashWriteStatus) {
    6486:	71de      	lod	A, dp:0xde <_ml_driver_mode+0x6>
    6488:	1d05      	jne	0x6494 <_ml_DiagReceived+0x2a2>
#endif /* LDR_FLASH_WRITE_TEST */
                                    if (0 == ddDataSize) {          /* if nothing to request */
    648a:	71e4      	lod	A, dp:0xe4 <_ml_driver_mode+0xc>
    648c:	1901      	je	0x6490 <_ml_DiagReceived+0x29e>
    648e:	076e      	jmp	0x636c <_ml_DiagReceived+0x17a>
                                        ddCurrentOp = 0;            /* operation done */
    6490:	41da      	mov	dp:0xda <_ml_driver_mode+0x2>, AL
    6492:	0007      	jmp	0x64a2 <_ml_DiagReceived+0x2b0>
                                        ml_FlashUploadStatus(ddErDATA);     /* MPT-613 */ /* TODO:check */
                                    }
#if (LDR_FLASH_WRITE_TEST != FLASH_TEST_NONE)
                                }
                                else { /* previous writing to flash failed */
                                    ml_FlashUploadStatus(ddErFLASH);
    6494:	7050      	lod	A, #80
    6496:	076b      	jmp	0x636e <_ml_DiagReceived+0x17c>
                                }
#endif /* LDR_FLASH_WRITE_TEST */
                            }
#if (LDR_HAS_EEPROM_COMMANDS != 0)
                            else if (ddCurrentOp == ddEeWrite) {
    6498:	8c47      	cmp	AL, #71
    649a:	1901      	je	0x649e <_ml_DiagReceived+0x2ac>
    649c:	00b6      	jmp	0x660a <_ml_DiagReceived+0x418>
                                ddCurrentOp = 0;                /* operation done */
    649e:	6400      	lod	YL, #0
    64a0:	45da      	mov	dp:0xda <_ml_driver_mode+0x2>, YL
                                ml_SendWriteResponse(0);        /* Prepare the Response */
    64a2:	7000      	lod	A, #0
    64a4:	15a6      	call	0x5ff2 <_ldr_isReadByIdMessage+0x184>
    64a6:	540f      	ret	#16
                            break;

#if STANDALONE_LOADER == 0
                        /* Fast Protocol */
                        case ddFastProt :
                            if (PCI == 3) { /* check if Data[1] is significant byte */
    64a8:	620b      	lod	AL, [S-12]
    64aa:	8c03      	cmp	AL, #3
    64ac:	1d08      	jne	0x64be <_ml_DiagReceived+0x2cc>
                                peCurrentValue = Data[1];
    64ae:	61d0      	lod	AL, dp:0xd0 <_LinFrameDataBuffer+0x4>
    64b0:	41dc      	mov	dp:0xdc <_ml_driver_mode+0x4>, AL
                                if (peCurrentValue > ML_FAST_BAUDRATE_K) { /* saturate requested baudrate[kBd] to MAX Baudrate */
    64b2:	8c64      	cmp	AL, #100
    64b4:	1e04      	jug	0x64be <_ml_DiagReceived+0x2cc>
                                    peCurrentValue = ML_FAST_BAUDRATE_K;
                                }
                                else if (peCurrentValue < ML_MIN_FAST_BAUDRATE_K) { /* check with MIN baudrate[kBd] */
    64b6:	8c12      	cmp	AL, #18
    64b8:	1e04      	jug	0x64c2 <_ml_DiagReceived+0x2d0>
                                    peCurrentValue = ML_MIN_FAST_BAUDRATE_K;
    64ba:	6013      	lod	AL, #19
    64bc:	0001      	jmp	0x64c0 <_ml_DiagReceived+0x2ce>
                                }
                            }
                            else {
                                peCurrentValue = ML_FAST_BAUDRATE_K; /* set MAX baudrate if Master doesn't support flexible baudrate */
    64be:	6064      	lod	AL, #100
    64c0:	41dc      	mov	dp:0xdc <_ml_driver_mode+0x4>, AL
                            }
                            /* Prepare S2M message */
                            LinFrameDataBuffer[0] = LIN_nad;            /* NAD */
    64c2:	61d4      	lod	AL, dp:0xd4 <_LIN_nad>
    64c4:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL
                            LinFrameDataBuffer[1] = 3;                  /* PCI : length = 3 databytes (SID + status + baudrate) */
    64c6:	6403      	lod	YL, #3
    64c8:	45cd      	mov	dp:0xcd <_LinFrameDataBuffer+0x1>, YL
                            LinFrameDataBuffer[2] = 0xF4;               /* RSID = SID + 0x40 */
    64ca:	60f4      	lod	AL, #-12
    64cc:	41ce      	mov	dp:0xce <_LinFrameDataBuffer+0x2>, AL
                            LinFrameDataBuffer[3] = LDR_GetState();     /* NodeStatus : since no error, error bit is not set */
    64ce:	10bb      	call	0x6646 <_LDR_GetState>
    64d0:	41cf      	mov	dp:0xcf <_LinFrameDataBuffer+0x3>, AL
                            LinFrameDataBuffer[4] = peCurrentValue;     /* Applied Fast Protocol baudrate */
    64d2:	61dc      	lod	AL, dp:0xdc <_ml_driver_mode+0x4>
    64d4:	41d0      	mov	dp:0xd0 <_LinFrameDataBuffer+0x4>, AL
                            LinFrameDataBuffer[5] = 0xFF;
    64d6:	60ff      	lod	AL, #-1
    64d8:	41d1      	mov	dp:0xd1 <_LinFrameDataBuffer+0x5>, AL
                            LinFrameDataBuffer[6] = 0xFF;
    64da:	41d2      	mov	dp:0xd2 <_LinFrameDataBuffer+0x6>, AL
                            LinFrameDataBuffer[7] = 0xFF;
    64dc:	41d3      	mov	dp:0xd3 <_LinFrameDataBuffer+0x7>, AL

                            (void)ml_DataReady(ML_END_OF_TX_DISABLED);  /* Signal to MLX4 that the data is ready */
    64de:	7000      	lod	A, #0
    64e0:	82db 5aa4 	callf	0x5aa4 <_ml_DataReady>
                            (void)ml_ContFrame(ML_ENABLED);
    64e4:	7001      	lod	A, #1
    64e6:	82db 5afa 	callf	0x5afa <_ml_ContFrame>
                            pendingAction = ddFastProt;
    64ea:	6003      	lod	AL, #3
    64ec:	41eb      	mov	dp:0xeb <_ml_driver_mode+0x13>, AL
                            break;
    64ee:	540f      	ret	#16
#endif /* STANDALONE_LOADER */

#if (LDR_HAS_EEPROM_COMMANDS != 0)
                        /* EEPROM Operations ***************************************************************/
                        case ddEeWrite :
                            ddCurrentOp = ddEeWrite;    /* Write to the EEPROM      */
    64f0:	45da      	mov	dp:0xda <_ml_driver_mode+0x2>, YL
                            NVRAM_LoadAll();            /* Load the EEPROM values   */
    64f2:	82db 599a 	callf	0x599a <_NVRAM_LoadAll>
    64f6:	07d5      	jmp	0x64a2 <_ml_DiagReceived+0x2b0>
                            ml_SendWriteResponse(0);    /* Prepare the Response     */
                            break;

                        case ddEeRead :
                            ddCurrentOp = ddEeRead;     /* Read the EEPROM          */
    64f8:	45da      	mov	dp:0xda <_ml_driver_mode+0x2>, YL
                            NVRAM_LoadAll();            /* Load the EEPROM values   */
    64fa:	82db 599a 	callf	0x599a <_NVRAM_LoadAll>
                            ml_SendReadResponse();      /* Prepare the Response     */
    64fe:	1536      	call	0x5f6c <_ldr_isReadByIdMessage+0xfe>
                            break;
    6500:	540f      	ret	#16
#endif /* LDR_HAS_EEPROM_COMMANDS */

                        /* simple case with Table #8 (read-only) */
                        case ddReadTable :
                        {
                            uint16_t table_number = (ml_uint8)(ddDataAddress >> 8); /* get table number form Data[1] */
    6502:	71e0      	lod	A, dp:0xe0 <_ml_driver_mode+0x8>
    6504:	6000      	lod	AL, #0
    6506:	72e4      	swap	A

                            if (table_number != 8) {                                /* if table other than 8 is requested ..    */
    6508:	ac08      	cmp	A, #8
    650a:	1902      	je	0x6510 <_ml_DiagReceived+0x31e>
                                ml_FlashUploadStatus(ddErTBL);                      /* .. send error status                     */
    650c:	7010      	lod	A, #16
    650e:	072f      	jmp	0x636e <_ml_DiagReceived+0x17c>
                            }
                            else {                                                  /* Error : table does not exist */
                                ddDataSize    = sizeof(_mlx_loader_info);           /* table size; TODO: size = MIN(real_table_size, requested_size) */
    6510:	7801      	lod	Y, #1
    6512:	59e4      	mov	dp:0xe4 <_ml_driver_mode+0xc>, Y
                                ddDataAddress = (ml_uint16)&_mlx_loader_info;       /* get the address of the table */
    6514:	72da 6bec 	lod	A, #27628
    6518:	51e0      	mov	dp:0xe0 <_ml_driver_mode+0x8>, A
                                ddCurrentOp   = ddReadAdd;                          /* use the same operations to read tables as for the Flash => ddReadAdd */
    651a:	6006      	lod	AL, #6
    651c:	41da      	mov	dp:0xda <_ml_driver_mode+0x2>, AL
    651e:	07ef      	jmp	0x64fe <_ml_DiagReceived+0x30c>
                        }

                        /* all operations longer than one frame *********************************************/
                        case ddData :   /* ddData for Single Frame (only 1, 2, 3 or 4 bytes to write) */

                            if (ddCurrentOp == ddWriteAdd) {    /* if previous command is ddWriteAdd (write Flash) */
    6520:	61da      	lod	AL, dp:0xda <_ml_driver_mode+0x2>
    6522:	8c85      	cmp	AL, #-123
    6524:	1901      	je	0x6528 <_ml_DiagReceived+0x336>
    6526:	0042      	jmp	0x65ac <_ml_DiagReceived+0x3ba>
                                * Intercept direct writing to loader state word (a word @ 0xBF66)
                                * and replace it:
                                *  0xBF66 = 0  ==>  loader_flags.app_enabled  = 1
                                *  0xBF66 = 1  ==>  loader_flags.app_disabled = 1
                                */
                                if (((ddDataAddress + ddAddressOffset)== 0xBF66)    /* if writing to address 0xBF66 is requested .. */
    6528:	71e0      	lod	A, dp:0xe0 <_ml_driver_mode+0x8>
    652a:	a1e2      	add	A, dp:0xe2 <_ml_driver_mode+0xa>
    652c:	aeda bf66 	cmp	A, #48998
    6530:	1d24      	jne	0x657a <_ml_DiagReceived+0x388>
    6532:	71e6      	lod	A, dp:0xe6 <_ml_driver_mode+0xe>
    6534:	ac02      	cmp	A, #2
    6536:	1d21      	jne	0x657a <_ml_DiagReceived+0x388>
                                    && (ddDataSizeRq == 2))                         /* .. with data size of 2 bytes ..      */
                                {
                                    uint16_t new_state = Data[1];                   /* new loader state */
    6538:	61d0      	lod	AL, dp:0xd0 <_LinFrameDataBuffer+0x4>
    653a:	5cf2      	usex	A

                                    switch (new_state) {
    653c:	1903      	je	0x6544 <_ml_DiagReceived+0x352>
    653e:	ac01      	cmp	A, #1
    6540:	190d      	je	0x655c <_ml_DiagReceived+0x36a>
    6542:	0051      	jmp	0x65e6 <_ml_DiagReceived+0x3f4>
                                        case 0:     /* transition to state 0 ==> enable application */
                                        {
                                            uint16_t addr = (uint16_t)&loader_flags.app_enabled;
                                            Flash_PageRead(addr);                                   /* copy page to buffer starting from base address */
    6544:	72da be84 	lod	A, #48772
    6548:	10b1      	call	0x66ac <_Flash_PageRead>
                                            Flash_PageBufferFill(addr & ML_FLASH_BUFFER_MASK, 1);   /* write to buffer using address offset */
    654a:	72da be84 	lod	A, #48772
    654e:	b47f      	and	A, #127
    6550:	54ca 0001 	pushw	#1
    6554:	10ba      	call	0x66ca <_Flash_PageBufferFill>
                                                                                                    /* TODO: address masking is redundant; check if we can use address instead of offset in Flash_PageBufferFill */
#if (LDR_FLASH_WRITE_TEST != FLASH_TEST_NONE)
                                            flashWriteStatus = Flash_PageWrite(addr);   /* [unfiltered] write page back to the flash */
    6556:	72da be84 	lod	A, #48772
    655a:	000b      	jmp	0x6572 <_ml_DiagReceived+0x380>
                                                while (1) { WDG_Manager(); }
                                            }
                                            /* else: expected values */
#endif /* DEBUG_LOADER_FLAGS */
                                            uint16_t addr = (uint16_t)&loader_flags.app_disabled;
                                            Flash_PageRead(addr);                                   /* copy page to buffer starting from base address */
    655c:	72da be80 	lod	A, #48768
    6560:	10a5      	call	0x66ac <_Flash_PageRead>
                                            Flash_PageBufferFill(addr & ML_FLASH_BUFFER_MASK, 1);   /* write to buffer using address offset */
    6562:	72da be80 	lod	A, #48768
    6566:	b47f      	and	A, #127
    6568:	54ca 0001 	pushw	#1
    656c:	10ae      	call	0x66ca <_Flash_PageBufferFill>
#if (LDR_FLASH_WRITE_TEST != FLASH_TEST_NONE)
                                            flashWriteStatus = Flash_PageWrite(addr);   /* [unfiltered] write page into the flash */
    656e:	72da be80 	lod	A, #48768
    6572:	10c3      	call	0x66fa <_Flash_PageWrite>
    6574:	51de      	mov	dp:0xde <_ml_driver_mode+0x6>, A
                                            }
                                            /* else: no errors after Flash write */
#endif /* DEBUG_LOADER_FLAGS */

                                        }
                                            break;
    6576:	5c01      	dec	S, #2
    6578:	0036      	jmp	0x65e6 <_ml_DiagReceived+0x3f4>
                                            break;
                                    }
                                }
                                else {
#endif /* HAS_H12_LOADER_PROTOCOL */
                                for (i = 0; i < (MessageLength - 2); i++) { /* don't count SID and command opcode */
    657a:	7800      	lod	Y, #0
    657c:	5a0d      	mov	[S-14], Y
    657e:	20fe      	add	X, #-2
    6580:	5e03      	mov	[S-4], X
    6582:	eeee      	cmp	Y, X
    6584:	1c0f      	jnc	0x65a4 <_ml_DiagReceived+0x3b2>
                                    Flash_PageBufferFill(ddAddressOffset + i, Data[i+1]);
    6586:	71e2      	lod	A, dp:0xe2 <_ml_driver_mode+0xa>
    6588:	a20d      	add	A, [S-14]
    658a:	7a0d      	lod	Y, [S-14]
    658c:	e2da 00d0 	add	Y, #208
    6590:	66f0      	lod	YL, [Y]
    6592:	5cf6      	usex	Y
    6594:	5adf      	push	Y
    6596:	1099      	call	0x66ca <_Flash_PageBufferFill>
                                            break;
                                    }
                                }
                                else {
#endif /* HAS_H12_LOADER_PROTOCOL */
                                for (i = 0; i < (MessageLength - 2); i++) { /* don't count SID and command opcode */
    6598:	5c01      	dec	S, #2
    659a:	720d      	lod	A, [S-14]
    659c:	a001      	add	A, #1
    659e:	520d      	mov	[S-14], A
    65a0:	ae03      	cmp	A, [S-4]
    65a2:	1871      	jc	0x6586 <_ml_DiagReceived+0x394>
                                    Flash_PageBufferFill(ddAddressOffset + i, Data[i+1]);
                                }

#if (LDR_FLASH_WRITE_TEST != FLASH_TEST_NONE)
                                flashWriteStatus = Flash_PageWriteFiltered(ddDataAddress);  /* write page into the flash */
    65a4:	71e0      	lod	A, dp:0xe0 <_ml_driver_mode+0x8>
    65a6:	1161      	call	0x686a <_Flash_PageWriteFiltered>
    65a8:	51de      	mov	dp:0xde <_ml_driver_mode+0x6>, A
    65aa:	001d      	jmp	0x65e6 <_ml_DiagReceived+0x3f4>
#if !defined (HAS_H12_LOADER_PROTOCOL)
                                }
#endif
                            }
#if (LDR_HAS_EEPROM_COMMANDS != 0)
                            else if (ddCurrentOp == ddEeWrite) {
    65ac:	8c47      	cmp	AL, #71
    65ae:	1d19      	jne	0x65e2 <_ml_DiagReceived+0x3f0>
                                for (i = 0; i < (MessageLength - 2); i++) { /* don't count SID and command opcode */
    65b0:	7800      	lod	Y, #0
    65b2:	5a0d      	mov	[S-14], Y
    65b4:	20fe      	add	X, #-2
    65b6:	5e01      	mov	[S-2], X
    65b8:	eeee      	cmp	Y, X
    65ba:	1c10      	jnc	0x65dc <_ml_DiagReceived+0x3ea>
                                    NVRAM_BufferFill(ddDataAddress + i, Data[i+1]);
    65bc:	71e0      	lod	A, dp:0xe0 <_ml_driver_mode+0x8>
    65be:	a20d      	add	A, [S-14]
    65c0:	7a0d      	lod	Y, [S-14]
    65c2:	e2da 00d0 	add	Y, #208
    65c6:	66f0      	lod	YL, [Y]
    65c8:	5cf6      	usex	Y
    65ca:	5adf      	push	Y
    65cc:	82db 5a5e 	callf	0x5a5e <_NVRAM_BufferFill>
                                }
#endif
                            }
#if (LDR_HAS_EEPROM_COMMANDS != 0)
                            else if (ddCurrentOp == ddEeWrite) {
                                for (i = 0; i < (MessageLength - 2); i++) { /* don't count SID and command opcode */
    65d0:	5c01      	dec	S, #2
    65d2:	720d      	lod	A, [S-14]
    65d4:	a001      	add	A, #1
    65d6:	520d      	mov	[S-14], A
    65d8:	ae01      	cmp	A, [S-2]
    65da:	1870      	jc	0x65bc <_ml_DiagReceived+0x3ca>
                                    NVRAM_BufferFill(ddDataAddress + i, Data[i+1]);
                                }

                                NVRAM_SaveAll();
    65dc:	82db 5a88 	callf	0x5a88 <_NVRAM_SaveAll>
    65e0:	0002      	jmp	0x65e6 <_ml_DiagReceived+0x3f4>
                            }
#endif /* LDR_HAS_EEPROM_COMMANDS */

                            else {                              /* There is a problem : what is the data for ?  */
                                ml_FlashUploadStatus(ddErDATA); /* Send error status                            */
    65e2:	7020      	lod	A, #32
    65e4:	1480      	call	0x5ee6 <_ldr_isReadByIdMessage+0x78>
                            }

                            /* Since it was a Single Frame, the operation has been completed */
                            ddDataSizeRq = 0;
    65e6:	7800      	lod	Y, #0
    65e8:	59e6      	mov	dp:0xe6 <_ml_driver_mode+0xe>, Y
                            ddDataSize = 0;
    65ea:	59e4      	mov	dp:0xe4 <_ml_driver_mode+0xc>, Y
                            /* ddCurrentOp = 0; */
                            break;
    65ec:	540f      	ret	#16
                         *                            \   PE Code
                         *                             ddProtExtension = 0xD6
                         */
                        case ddProtExtension:
                            /* Set ddProtExtension as current operation */
                            ddCurrentOp = ddProtExtension;
    65ee:	60d6      	lod	AL, #-42
    65f0:	41da      	mov	dp:0xda <_ml_driver_mode+0x2>, AL
                            /* Get protocol extension command CODE */
                            peCurrentOp = Data[1];
    65f2:	61d0      	lod	AL, dp:0xd0 <_LinFrameDataBuffer+0x4>
    65f4:	41db      	mov	dp:0xdb <_ml_driver_mode+0x3>, AL

                            /* --------------------------------
                             Commands for Read Flash redefining
                             ---------------------------------- */
                            if (peCurrentOp == peReadFlashModify) {
    65f6:	1d0c      	jne	0x6610 <_ml_DiagReceived+0x41e>
                                /* Get protocol extension command VALUE */
                                peCurrentValue = Data[2];
    65f8:	61d1      	lod	AL, dp:0xd1 <_LinFrameDataBuffer+0x5>
    65fa:	41dc      	mov	dp:0xdc <_ml_driver_mode+0x4>, AL

                                switch (peCurrentValue) {
    65fc:	5cf2      	usex	A
    65fe:	1903      	je	0x6606 <_ml_DiagReceived+0x414>
    6600:	ac01      	cmp	A, #1
    6602:	1903      	je	0x660a <_ml_DiagReceived+0x418>
    6604:	0017      	jmp	0x6634 <_ml_DiagReceived+0x442>
                                /* Normal ReadFlash command execution */
                                case rfmNormal:
                                    ddCurrentOp = 0;
    6606:	6000      	lod	AL, #0
    6608:	41da      	mov	dp:0xda <_ml_driver_mode+0x2>, AL
                                    ml_FlashUploadStatus(ddErNONE); /* Send Status with no errors */
                                    break;

                                /* CRC calculation instead of ReadFlash command */
                                case rfmCrcCalc:
                                    ml_FlashUploadStatus(ddErNONE); /* Send Status with no errors */
    660a:	72da 00f0 	lod	A, #240
    660e:	06af      	jmp	0x636e <_ml_DiagReceived+0x17c>
                                }
                            }
                            /* --------------------------------
                             Flash Margin modify commands
                             ---------------------------------- */
                            else if (peCurrentOp == peMarginModify) {
    6610:	8c01      	cmp	AL, #1
    6612:	1d10      	jne	0x6634 <_ml_DiagReceived+0x442>
                                /* Get protocol extension command VALUE */
                                peCurrentValue = Data[2];
    6614:	61d1      	lod	AL, dp:0xd1 <_LinFrameDataBuffer+0x5>
    6616:	41dc      	mov	dp:0xdc <_ml_driver_mode+0x4>, AL

                                switch (peCurrentValue) {
    6618:	1d0a      	jne	0x662e <_ml_DiagReceived+0x43c>
                                /* Set up signed offset to threshold for MardinRead */
                                case mmMarginSetOffset: {
                                    /* Get signed offset value */
                                    int16 offset_iref = (int8) Data[3];
    661a:	61d2      	lod	AL, dp:0xd2 <_LinFrameDataBuffer+0x6>
    661c:	5ce2      	ssex	A

                                    /* Change IREF by offset value in FLASHTRIMA register */
                                    uint16 saved_iref = Flash_IREF_Offset(offset_iref);
    661e:	1101      	call	0x6822 <_Flash_IREF_Offset>

                                    /* Use this functionality for response generation */
                                    ddDataAddress = ML_FLASH_START_ADDRESS;
    6620:	7ada 4000 	lod	Y, #16384
    6624:	59e0      	mov	dp:0xe0 <_ml_driver_mode+0x8>, Y
                                    ddDataSize = 0; /* No data to CRC */
    6626:	7800      	lod	Y, #0
    6628:	59e4      	mov	dp:0xe4 <_ml_driver_mode+0xc>, Y

                                    /* Used to generate response with old IREF value
                                     * No CRC calculation, 0xFFFF will be returned */
                                    ml_ldr_SendCrcResponse(saved_iref);
    662a:	1501      	call	0x602e <_ml_ldr_ErrorDetected+0x8>
                                    break;
    662c:	540f      	ret	#16
                                }
                                /* Wrong protocol extension command VALUE sets ddErOp */
                                default:
                                    ddCurrentOp = 0;
    662e:	6000      	lod	AL, #0
    6630:	41da      	mov	dp:0xda <_ml_driver_mode+0x2>, AL
    6632:	0002      	jmp	0x6638 <_ml_DiagReceived+0x446>
                                    ml_FlashUploadStatus(ddErOP); /* Send Status with error: incorrect operation mode  */
                                }
                            }
                            /* Wrong protocol extension command CODE sets ddErOp */
                            else {
                                ddCurrentOp = 0;
    6634:	6400      	lod	YL, #0
    6636:	45da      	mov	dp:0xda <_ml_driver_mode+0x2>, YL
                                ml_FlashUploadStatus(ddErOP); /* Send Status with error: incorrect operation mode  */
                            }
                            break;

                        default :   /* no action */
                            ml_FlashUploadStatus(ddErOP);       /* Send error status */
    6638:	72da 00d0 	lod	A, #208
    663c:	0698      	jmp	0x636e <_ml_DiagReceived+0x17c>
            }
#endif /* LDR_HAS_PROTECTION_KEY */
        }
    }
    else {                              /* PCI not valid .. */
        ml_FlashUploadStatus(ddErPCI);  /* .. send error status */
    663e:	72da 00b0 	lod	A, #176
    6642:	1451      	call	0x5ee6 <_ldr_isReadByIdMessage+0x78>
    6644:	540f      	ret	#16

00006646 <_LDR_GetState>:
 * 0             0            3        3        3             loading new application (high part)
 * 0             1            3        4        0             application mode
 */
__MLX_TEXT__  ml_uint8 LDR_GetState (void)
{
    ml_uint8 loader_state = (loader_flags.app_disabled
    6646:	7ada be80 	lod	Y, #48768
    664a:	62f0      	lod	AL, [Y]
    664c:	82d8 be84 	add	AL, 0xbe84 <_loader_flags+0x4>
    6650:	66e0      	lod	YL, AL
    6652:	72d8 bf66 	lod	A, 0xbf66 <_loader_rst_state>
    6656:	a2e6      	add	A, Y
    6658:	b403      	and	A, #3
            + loader_flags.app_enabled
            + loader_rst_state) & 3;

    return loader_state;
}
    665a:	5401      	ret

0000665c <_Flash_InitDriver>:
 *     of the new application (with new Reset Vector) was also already written
 *     at the end of state 2.
 */
__MLX_TEXT__ void Flash_InitDriver(void)
{
    if (LDR_GetState() == 3) {                                          /* in state 3 skip erasing of the last sector (see notes above) .. */
    665c:	17f4      	call	0x6646 <_LDR_GetState>
    665e:	8c03      	cmp	AL, #3
    6660:	1d03      	jne	0x6668 <_Flash_InitDriver+0xc>
        erase_sectors_bitmap = 1u << (ML_FLASH_NUMBER_OF_SECTORS - 1);  /* .. => mark last sector as erased  */
    6662:	72da 8000 	lod	A, #32768
    6666:	0001      	jmp	0x666a <_Flash_InitDriver+0xe>
    }
    else {
        erase_sectors_bitmap = 0;                                       /*  so far, no sectors have been erased yet */
    6668:	7000      	lod	A, #0
    666a:	52d8 0334 	mov	0x334 <_page_buffer+0x2>, A
    666e:	5401      	ret
 */
__MLX_TEXT__ static uint16_t AddrToSector (uint16_t addr)
{
    //TODO: assert ((addr >= ML_FLASH_START_ADDRESS) && (addr < (ML_FLASH_START_ADDRESS + ML_FLASH_SIZE_IN_BYTES))

    return (addr - ML_FLASH_START_ADDRESS) / ML_FLASH_SECTOR_SIZE_IN_BYTES;
    6670:	a2da c000 	add	A, #49152
    6674:	72e4      	swap	A
    6676:	b6da 00ff 	and	A, #255
    667a:	44b2      	lsr	A, #2
    667c:	4432      	lsr	A
}
    667e:	5401      	ret
 * \param   sector  sector number to be checked (0-15)
 * \return          true if specified sector was already erased
 */
__MLX_TEXT__ static bool IsSectorErased (uint16_t sector)
{
    return erase_sectors_bitmap & (1u << sector);
    6680:	44e2      	sfb	A
    6682:	b6d8 0334 	and	A, 0x334 <_page_buffer+0x2>
    6686:	1901      	je	0x668a <_Flash_InitDriver+0x2e>
    6688:	7001      	lod	A, #1
}
    668a:	5401      	ret

0000668c <_Flash_GetWriteTime>:
 */
__MLX_TEXT__ uint16_t Flash_GetWriteTime(uint16_t addr)
{
    uint16_t wr_time;

    addr = addr & ~ML_FLASH_BUFFER_MASK;            /* get start address of the page */
    668c:	b480      	and	A, #-128

    uint16_t sector_number = AddrToSector(addr);
    668e:	17f0      	call	0x6670 <_Flash_InitDriver+0x14>
    if ( ! IsSectorErased(sector_number) ) {        /* if Flash sector is not erased yet ..  */
    6690:	17f7      	call	0x6680 <_Flash_InitDriver+0x24>
    6692:	8c00      	cmp	AL, #0
    6694:	1d09      	jne	0x66a8 <_Flash_GetWriteTime+0x1c>
#elif defined (DEBUG_FORCE_H11_FLASH_DETECTION)
# warning     "DEBUG_FORCE_H11_FLASH_DETECTION is enabled"
    return false;

#else
    return (EEP_FLASH_ERASE_SIZE > 1U);
    6696:	62d8 11b2 	lod	AL, 0x11b2 <__ep__+0x1b2>
    669a:	8c01      	cmp	AL, #1
    669c:	1a02      	jule	0x66a2 <_Flash_GetWriteTime+0x16>
    addr = addr & ~ML_FLASH_BUFFER_MASK;            /* get start address of the page */

    uint16_t sector_number = AddrToSector(addr);
    if ( ! IsSectorErased(sector_number) ) {        /* if Flash sector is not erased yet ..  */
        if (HasSectorEraseByHw()) {                 /* if full sector can be erase by HW ..  */
            wr_time = ML_FLASH_H12_ERASE_WRITE_TIMEOUT_MS;
    669e:	7030      	lod	A, #48
    66a0:	5401      	ret
        }
        else {                                      /* else: more time is needed to simulate sector erase in SW */
            wr_time = ML_FLASH_H11_ERASE_WRITE_TIMEOUT_MS;
    66a2:	72da 02a6 	lod	A, #678
    66a6:	5401      	ret
        }
    }
    else {                                          /* else: Flash sector was already erased */
        wr_time = ML_FLASH_WRITE_ONLY_TIMEOUT_MS;
    66a8:	7006      	lod	A, #6
    }

    return wr_time;
}
    66aa:	5401      	ret

000066ac <_Flash_PageRead>:
 * Notes:
 *  1. Automatically aligns requested address to the nearest page located
 *     below in memory.
 */
__MLX_TEXT__ void Flash_PageRead (uint16_t addr)
{
    66ac:	5803      	inc	S, #4
#if _FAST
    uint16_t *src = (uint16_t *)(addr & ~(ML_FLASH_BUFFER_SIZE_IN_WORDS * 2 - 1));    /* get page start address */
    66ae:	b480      	and	A, #-128
    66b0:	5203      	mov	[S-4], A
    uint16_t *dst = (uint16_t *)page_buffer;
    66b2:	7ed8 0332 	lod	X, 0x332 <_page_buffer>
    66b6:	5e01      	mov	[S-2], X

    do
    {
        *dst++ = *src++;
    66b8:	7a03      	lod	Y, [S-4]
    66ba:	54c6      	movsw	[X++], [Y++]
    66bc:	5a03      	mov	[S-4], Y
    } while (dst < (uint16_t *)(page_buffer + ML_FLASH_BUFFER_SIZE_IN_WORDS * sizeof(uint16_t)));
    66be:	7201      	lod	A, [S-2]
    66c0:	a2da 0080 	add	A, #128
    66c4:	2ee2      	cmp	X, A
    66c6:	1878      	jc	0x66b8 <_Flash_PageRead+0xc>
    66c8:	5405      	ret	#6

000066ca <_Flash_PageBufferFill>:
    offset &= ML_FLASH_BUFFER_MASK;                         /* mask address bits and leave only the offset */

#if defined (HAS_FLASH_WRITE_BUFFER_IN_NVRAM_SRAM)
    NVRAM_BufferFill((uint16_t)&page_buffer[offset], data); /* use a helper function to write bytes into NVRAM buffer */
#else
    page_buffer[offset] = data;                             /* RAM allows byte access ==> can write directly          */
    66ca:	b47f      	and	A, #127
    66cc:	7ae2      	lod	Y, A
    66ce:	e2d8 0332 	add	Y, 0x332 <_page_buffer>
    66d2:	6203      	lod	AL, [S-4]
    66d4:	42f0      	mov	[Y], AL
    66d6:	5401      	ret

000066d8 <_Flash_PageVerifyBuffer>:
 * Verifies Flash Page at 'addr' against RAM buffer
 */
__MLX_TEXT__  uint16_t Flash_PageVerifyBuffer (uint16_t addr)
{
#if _FAST
    uint16_t *dst = (uint16_t *)(addr & ~ML_FLASH_BUFFER_MASK);    /* get page start address */
    66d8:	b480      	and	A, #-128
    66da:	7ee2      	lod	X, A
    uint16_t *src = (uint16_t *)page_buffer;
    66dc:	7ad8 0332 	lod	Y, 0x332 <_page_buffer>

    do
    {
        if ( *src++ != *dst++ )
    66e0:	72d6      	lod	A, [Y++]
    66e2:	aede      	cmp	A, [X++]
    66e4:	1902      	je	0x66ea <_Flash_PageVerifyBuffer+0x12>
        {
            return FLASH_ERR_VERIFICATION_FAILED;
    66e6:	7001      	lod	A, #1
    66e8:	5401      	ret
        }
    } while (src < (uint16_t *)(page_buffer + ML_FLASH_BUFFER_SIZE_IN_WORDS * sizeof(uint16_t)));
    66ea:	72d8 0332 	lod	A, 0x332 <_page_buffer>
    66ee:	a2da 0080 	add	A, #128
    66f2:	eee2      	cmp	Y, A
    66f4:	1875      	jc	0x66e0 <_Flash_PageVerifyBuffer+0x8>
        src++;

    } while (--size != 0);
#endif /* _FAST */

    return FLASH_ERR_NONE;
    66f6:	7000      	lod	A, #0
}
    66f8:	5401      	ret

000066fa <_Flash_PageWrite>:
 *     the page address by HW. Note, that if FL_CTRL0 = FL_ERASE (or FL_WRITE)
 *     writing to the flash address only triggers the erase or write operation,
 *     but not selects the flash page.
 */
__MLX_TEXT__ uint16_t Flash_PageWrite (uint16_t addr)
{
    66fa:	5809      	inc	S, #10
    uint16_t volatile *dst;

    addr = addr & ~ML_FLASH_BUFFER_MASK;    /* get start address of the page */
    66fc:	b480      	and	A, #-128
    66fe:	5209      	mov	[S-10], A

#if defined (SUPPORT_LINNETWORK_LOADER)
    if ( (LDR_GetState() == 1) && (addr == (((uint16_t)&loader_rst_state) & ~ML_FLASH_BUFFER_MASK)) )
    6700:	17a2      	call	0x6646 <_LDR_GetState>
    6702:	8c01      	cmp	AL, #1
    6704:	1d0b      	jne	0x671c <_Flash_PageWrite+0x22>
    6706:	72da bf66 	lod	A, #48998
    670a:	b480      	and	A, #-128
    670c:	7a09      	lod	Y, [S-10]
    670e:	eee2      	cmp	Y, A
    6710:	1d05      	jne	0x671c <_Flash_PageWrite+0x22>
    {
        /* Programming the LoaderB (LoaderState 1); This page is the LoaderState-page of LoaderB; Write LIN NAD in this page too. */
#if defined (HAS_FLASH_WRITE_BUFFER_IN_NVRAM_SRAM)               /* use NVRAM SRAM area as a page buffer */
        NVRAM_BufferFill((uint16_t)&page_buffer[0x76], LIN_nad); /* use a helper function to write bytes into NVRAM buffer */
#else                                                            /* RAM allows byte access ==> can write directly          */
        page_buffer[0x76] = LIN_nad;                             /* Write NAD into STACK_IT segment; This same address is used by LoaderB premain */
    6712:	7ad8 0332 	lod	Y, 0x332 <_page_buffer>
    6716:	e076      	add	Y, #118
    6718:	61d4      	lod	AL, dp:0xd4 <_LIN_nad>
    671a:	42f0      	mov	[Y], AL
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    671c:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    671e:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    6720:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    6722:	b430      	and	A, #48
    6724:	1902      	je	0x672a <_Flash_PageWrite+0x30>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    6726:	6000      	lod	AL, #0
    6728:	4282      	mov	io:0x2 <_LinCmnd>, AL
    }
#endif /* SUPPORT_LINNETWORK_LOADER */

    WDG_Manager();

    if ( !mlx_isPowerOk() ) {                               /* if power supply is not Ok .. */
    672a:	11fc      	call	0x6b24 <_mlx_isPowerOk>
    672c:	8c00      	cmp	AL, #0
    672e:	1d02      	jne	0x6734 <_Flash_PageWrite+0x3a>
        return FLASH_ERR_VERIFICATION_FAILED;
    6730:	7001      	lod	A, #1
    6732:	540b      	ret	#12
    }
    /* else: power is Ok */


    if (addr != ML_APP_CONTROL_PAGE_ADDRESS) {              /* if not the Application Control Page ..   */
    6734:	7a09      	lod	Y, [S-10]
    6736:	eeda be80 	cmp	Y, #48768
    673a:	1d01      	jne	0x673e <_Flash_PageWrite+0x44>
    673c:	0045      	jmp	0x67c8 <_Flash_PageWrite+0xce>
        uint16_t sector_number = AddrToSector(addr);
    673e:	72e6      	lod	A, Y
    6740:	1797      	call	0x6670 <_Flash_InitDriver+0x14>
    6742:	5207      	mov	[S-8], A
        if ( ! IsSectorErased(sector_number) ) {            /* if Flash sector is not erased yet ..     */
    6744:	179d      	call	0x6680 <_Flash_InitDriver+0x24>
    6746:	8c00      	cmp	AL, #0
    6748:	1901      	je	0x674c <_Flash_PageWrite+0x52>
    674a:	003e      	jmp	0x67c8 <_Flash_PageWrite+0xce>
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    674c:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    674e:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    6750:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    6752:	b430      	and	A, #48
    6754:	1902      	je	0x675a <_Flash_PageWrite+0x60>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    6756:	6000      	lod	AL, #0
    6758:	4282      	mov	io:0x2 <_LinCmnd>, AL
 * Erases specified sector
 */
__MLX_TEXT__ static void EraseSector(uint16_t sector)
{
    uint16_t volatile *dst;
    uint16_t addr = ML_FLASH_START_ADDRESS + (sector * ML_FLASH_SECTOR_SIZE_IN_BYTES);
    675a:	7207      	lod	A, [S-8]
    675c:	487a 0800 	muls	Y, A, #2048
    6760:	e2da 4000 	add	Y, #16384
    6764:	5a05      	mov	[S-6], Y
#elif defined (DEBUG_FORCE_H11_FLASH_DETECTION)
# warning     "DEBUG_FORCE_H11_FLASH_DETECTION is enabled"
    return false;

#else
    return (EEP_FLASH_ERASE_SIZE > 1U);
    6766:	62d8 11b2 	lod	AL, 0x11b2 <__ep__+0x1b2>
    676a:	8c01      	cmp	AL, #1
    676c:	1a03      	jule	0x6774 <_Flash_PageWrite+0x7a>
    uint16_t addr = ML_FLASH_START_ADDRESS + (sector * ML_FLASH_SECTOR_SIZE_IN_BYTES);


    uint_fast8_t i;
    if (HasSectorEraseByHw()) {
        i = 1;  /* single iteration to erase sector */
    676e:	7801      	lod	Y, #1
    6770:	5a03      	mov	[S-4], Y
    6772:	0002      	jmp	0x6778 <_Flash_PageWrite+0x7e>
    }
    else {
        i = ML_FLASH_SECTOR_SIZE_IN_PAGES;  /* emulate sector erase by erasing page-by-page */
    6774:	7010      	lod	A, #16
    6776:	5203      	mov	[S-4], A
        /*
         * Select page for erasing:
         *  - set latch mode
         *  - write (any value) to the two consecutive words within the page
         */
        FL_CTRL0 = 0;                           /* set LATCH mode                           */
    6778:	7800      	lod	Y, #0
    677a:	5ad8 2026 	mov	0x2026 <__ep__+0x1026>, Y
        dst = (uint16_t *)addr;                 /* select page by writing to the latches .. */
        *dst++ = 0;                             /* .. at least two words                    */
    677e:	7a05      	lod	Y, [S-6]
    6780:	7000      	lod	A, #0
    6782:	52d6      	mov	[Y++], A
        *dst++ = 0;
    6784:	52d6      	mov	[Y++], A
        IO_EXTIO |= IO5_OUT;
#endif
        /*
         * Erase selected flash page (CPU is frozen while flash is being erased)
         */
        for (uint8_t ers = 2; ers > 0; ers--) {     /* erase selected page twice (PLTF-700)     */
    6786:	7c02      	lod	X, #2
            FL_CTRL0 = FL_ERASE | FL_ERASE_TIME;    /* set ERASE mode and specify erase timing  */
    6788:	72da 00c8 	lod	A, #200
    678c:	52d8 2026 	mov	0x2026 <__ep__+0x1026>, A
            if (ml_driver_mode != kLinLoaderMode) { /* abort illegal erase operation (PLTF-732) */
    6790:	62d8 00d8 	lod	AL, 0xd8 <_ml_driver_mode>
    6794:	8c55      	cmp	AL, #85
    6796:	1903      	je	0x679e <_Flash_PageWrite+0xa4>
                FL_CTRL0 = 0;
    6798:	7000      	lod	A, #0
    679a:	52d8 2026 	mov	0x2026 <__ep__+0x1026>, A
            }
            *dst = 0;                               /* trigger ERASE operation by writing to flash  */
    679e:	7000      	lod	A, #0
    67a0:	52f0      	mov	[Y], A
        IO_EXTIO |= IO5_OUT;
#endif
        /*
         * Erase selected flash page (CPU is frozen while flash is being erased)
         */
        for (uint8_t ers = 2; ers > 0; ers--) {     /* erase selected page twice (PLTF-700)     */
    67a2:	72ee      	lod	A, X
    67a4:	80ff      	add	AL, #-1
    67a6:	5cf2      	usex	A
    67a8:	7ee2      	lod	X, A
    67aa:	1d6e      	jne	0x6788 <_Flash_PageWrite+0x8e>

#if defined (DEBUG_FLASH_ERASE_TIMING)
        IO_EXTIO &= ~IO5_OUT;
#endif

        addr += ML_FLASH_PAGE_SIZE_IN_BYTES;    /* next page */
    67ac:	7a05      	lod	Y, [S-6]
    67ae:	e2da 0080 	add	Y, #128
    67b2:	5a05      	mov	[S-6], Y
        i--;                                    /* next erase iteration */
    } while (i != 0);
    67b4:	7203      	lod	A, [S-4]
    67b6:	a0ff      	add	A, #-1
    67b8:	5203      	mov	[S-4], A
    67ba:	1d5e      	jne	0x6778 <_Flash_PageWrite+0x7e>


    erase_sectors_bitmap |= (1u << sector);     /* flag the sector as ERASED */
    67bc:	7207      	lod	A, [S-8]
    67be:	44e2      	sfb	A
    67c0:	a6d8 0334 	or	A, 0x334 <_page_buffer+0x2>
    67c4:	52d8 0334 	mov	0x334 <_page_buffer+0x2>, A
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    67c8:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    67ca:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    67cc:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    67ce:	b430      	and	A, #48
    67d0:	1902      	je	0x67d6 <_Flash_PageWrite+0xdc>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    67d2:	6400      	lod	YL, #0
    67d4:	4682      	mov	io:0x2 <_LinCmnd>, YL
    WDG_Manager();

    /*
     * Load flash latches with data to be written
     */
    FL_CTRL0 = 0;                           /* set LATCH mode   */
    67d6:	7000      	lod	A, #0
    67d8:	52d8 2026 	mov	0x2026 <__ep__+0x1026>, A

#if _FAST
    uint16_t *src = (uint16_t *)page_buffer;
    67dc:	7ad8 0332 	lod	Y, 0x332 <_page_buffer>
    dst = (uint16_t *)addr;
    67e0:	7e09      	lod	X, [S-10]
    67e2:	5a01      	mov	[S-2], Y

    do                                      /* load flash latches .. */
    {
        *dst++ = *src++;
    67e4:	54c6      	movsw	[X++], [Y++]
    } while (src < (uint16_t *)(page_buffer + ML_FLASH_BUFFER_SIZE_IN_WORDS * sizeof(uint16_t)));
    67e6:	7201      	lod	A, [S-2]
    67e8:	a2da 0080 	add	A, #128
    67ec:	eee2      	cmp	Y, A
    67ee:	187a      	jc	0x67e4 <_Flash_PageWrite+0xea>


    /*
     * Write data from latches to flash page (CPU is frozen while flash is being erased)
     */
    FL_CTRL0 = FL_WRITE | FL_WRITE_TIME;    /* set WRITE mode and specify write timing */
    67f0:	7818      	lod	Y, #24
    67f2:	5ad8 2026 	mov	0x2026 <__ep__+0x1026>, Y

    if (ml_driver_mode != kLinLoaderMode) { /* abort write operation (PLTF-732) */
    67f6:	62d8 00d8 	lod	AL, 0xd8 <_ml_driver_mode>
    67fa:	8c55      	cmp	AL, #85
    67fc:	1903      	je	0x6804 <_Flash_PageWrite+0x10a>
        FL_CTRL0 = 0;
    67fe:	7000      	lod	A, #0
    6800:	52d8 2026 	mov	0x2026 <__ep__+0x1026>, A
    }

    dst = (uint16_t *)addr;
    *dst = (uint16_t)dst;                   /* trigger write operation by writing to flash */
    6804:	7a09      	lod	Y, [S-10]
    6806:	5af0      	mov	[Y], Y

    FL_CTRL0 = 0;                           /* reset command register */
    6808:	7000      	lod	A, #0
    680a:	52d8 2026 	mov	0x2026 <__ep__+0x1026>, A
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    680e:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    6810:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    6812:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    6814:	b430      	and	A, #48
    6816:	1902      	je	0x681c <_Flash_PageWrite+0x122>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    6818:	6400      	lod	YL, #0
    681a:	4682      	mov	io:0x2 <_LinCmnd>, YL
#elif (LDR_FLASH_WRITE_TEST == FLASH_TEST_NORMAL)

    WDG_Manager();

    uint16_t  status;
    status = Flash_PageVerifyBuffer(addr);
    681c:	7209      	lod	A, [S-10]
    681e:	175c      	call	0x66d8 <_Flash_PageVerifyBuffer>

#else
    #error "Incorrect setting for LDR_FLASH_WRITE_TEST define"

#endif /* LDR_FLASH_WRITE_TEST */
}
    6820:	540b      	ret	#12

00006822 <_Flash_IREF_Offset>:
 *  \param[in]    int16  offset_iref                         Offset to IREF
 *
 *  \return       uint16 (MSB-new_iref, LSB-old_iref)        IREF thresholds
 */
__MLX_TEXT__ uint16 Flash_IREF_Offset (int16_t offset_iref)
{
    6822:	5801      	inc	S, #2

    /*
     * Change IREF in FLASHTRIMA register.
     * Note, that this is read-modify-write access to FLASHTRIMA
     */
    io_flash_trim_a.u16 = FLASHTRIMA;                /* save old io value */
    6824:	7ad8 2050 	lod	Y, 0x2050 <__ep__+0x1050>
    6828:	5a01      	mov	[S-2], Y
    uint16_t saved_iref = io_flash_trim_a.iref;      /* save old iref value */
    682a:	7ae8      	swap	Y
    682c:	f6da 00ff 	and	Y, #255
    6830:	4436      	lsr	Y
    6832:	7ee6      	lod	X, Y
    6834:	343f      	and	X, #63

    /* IREF value saturation when overflow */
    int16 set_iref = saved_iref + offset_iref;
    6836:	a2ee      	add	A, X
    if (set_iref > 0x3F) {
    6838:	ac3f      	cmp	A, #63
    683a:	1b02      	jsle	0x6840 <_Flash_IREF_Offset+0x1e>
        set_iref = 0x3F;
    683c:	703f      	lod	A, #63
    683e:	0003      	jmp	0x6846 <_Flash_IREF_Offset+0x24>
    }
    else if (set_iref < 0) {
    6840:	ac00      	cmp	A, #0
    6842:	1e81      	jsge	0x6846 <_Flash_IREF_Offset+0x24>
        set_iref = 0;
    6844:	7000      	lod	A, #0
    }

    /* Initialise threshold by absolute value */
    io_flash_trim_a.iref = (set_iref);
    6846:	7ae2      	lod	Y, A
    6848:	f43f      	and	Y, #63
    684a:	f6da 00ff 	and	Y, #255
    684e:	7ae8      	swap	Y
    6850:	4426      	asl	Y
    6852:	7201      	lod	A, [S-2]
    6854:	b6da 81ff 	and	A, #33279
    6858:	a6e6      	or	A, Y
    FLASHTRIMA = io_flash_trim_a.u16;            /* set new io_port value */
    685a:	52d8 2050 	mov	0x2050 <__ep__+0x1050>, A

    /* return MSB-new_IREF; LSB-old_IREF */
    saved_iref |= (io_flash_trim_a.iref << 8);
    685e:	4432      	lsr	A
    6860:	b6da 3f00 	and	A, #16128
    6864:	26e2      	or	X, A

    /* else - return only saved_iref value, no any changes with IREF */

    return saved_iref;
}
    6866:	72ee      	lod	A, X
    6868:	5403      	ret	#4

0000686a <_Flash_PageWriteFiltered>:
/* ----------------------------------------------------------------------------
 * Wrapper for Flash_PageWrite which checks the input addresses to eliminate
 * writing requests to certain Flash pages (depending on the loader state)
 */
__MLX_TEXT__ uint16_t Flash_PageWriteFiltered (uint16_t addr)
{
    686a:	5801      	inc	S, #2
    addr = addr & ~ML_FLASH_BUFFER_MASK;        /* get start address of the page */
    686c:	b480      	and	A, #-128
    686e:	5201      	mov	[S-2], A

    if (addr == ML_APP_CONTROL_PAGE_ADDRESS) {  /* if writing of Application Control Page is requested .. */
    6870:	aeda be80 	cmp	A, #48768
    6874:	1907      	je	0x6884 <_Flash_PageWriteFiltered+0x1a>
        return FLASH_ERR_NONE;                  /* .. skip it */
    }
    /* else: continue with writing procedure  */

#if !defined (HAS_H12_LOADER_PROTOCOL)
    if ((addr == ML_MCU_FAR_PAGE_0_ADDRESS)     /* if writing of Far Page 0 is requested .. */
    6876:	7201      	lod	A, [S-2]
    6878:	aeda bf00 	cmp	A, #48896
    687c:	1d05      	jne	0x6888 <_Flash_PageWriteFiltered+0x1e>
    687e:	16e3      	call	0x6646 <_LDR_GetState>
    6880:	8c03      	cmp	AL, #3
    6882:	1d02      	jne	0x6888 <_Flash_PageWriteFiltered+0x1e>
        && (LDR_GetState() == 3)) {             /* .. in State 3 of the loader ..           */
        return FLASH_ERR_NONE;                  /* .. then skip writing (this page was already written in State 2) */
    6884:	7000      	lod	A, #0
    6886:	5403      	ret	#4
    }
    /* else: continue with writing procedure */
#endif


    return Flash_PageWrite(addr);
    6888:	7201      	lod	A, [S-2]
    688a:	1737      	call	0x66fa <_Flash_PageWrite>
}
    688c:	5403      	ret	#4

0000688e <_ml_SetFastBaudRate>:
 * Input (global):
 *      FPLL            System clock frequency[kHz]
 *
 */
__MLX_TEXT__ void ml_SetFastBaudRate (uint8_t FastBaudRate)
{
    688e:	5805      	inc	S, #6
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    6890:	4cc2 45c0 	mov	D, #280000
    6894:	0004 
    6896:	4872 0006 	muls	A, A, #6
    689a:	5203      	mov	[S-4], A
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    689c:	4c80      	mov	YA, D
    689e:	7e03      	lod	X, [S-4]
    68a0:	4c63      	divu	YA, X
    68a2:	4c63      	divu	YA, X
    68a4:	5203      	mov	[S-4], A
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    68a6:	7ae2      	lod	Y, A

    uint16_t ml_CptHi = 2;

    uint16_t ml_CptLowTemp = divU16_U32byU16( (FPLL * 10), (FastBaudRate * 2 * (ml_CptHi + 1)) );

    uint8_t ml_FastPresc = 0;
    68a8:	7000      	lod	A, #0
    68aa:	5205      	mov	[S-6], A

    /* Searching of ml_FastPresc by ml_CptLowTemp */
    for (uint8_t presc_cnt = 0; presc_cnt < 3; presc_cnt++) {

        /* Divide by two if value out of range */
        if (ml_CptLowTemp >= 635) {
    68ac:	eeda 027a 	cmp	Y, #634
    68b0:	1e04      	jug	0x68ba <_ml_SetFastBaudRate+0x2c>
            ml_CptLowTemp >>= 1;
        }
        /* Otherwise set ml_FastPresc and finish */
        else {
            ml_FastPresc = (presc_cnt - 1) & 0xF;
    68b2:	80ff      	add	AL, #-1
    68b4:	b40f      	and	A, #15
    68b6:	5205      	mov	[S-6], A
            break;
    68b8:	0005      	jmp	0x68c4 <_ml_SetFastBaudRate+0x36>
    /* Searching of ml_FastPresc by ml_CptLowTemp */
    for (uint8_t presc_cnt = 0; presc_cnt < 3; presc_cnt++) {

        /* Divide by two if value out of range */
        if (ml_CptLowTemp >= 635) {
            ml_CptLowTemp >>= 1;
    68ba:	4436      	lsr	Y

    uint8_t ml_FastPresc = 0;
    uint8_t ml_FastDivider;

    /* Searching of ml_FastPresc by ml_CptLowTemp */
    for (uint8_t presc_cnt = 0; presc_cnt < 3; presc_cnt++) {
    68bc:	8001      	add	AL, #1
    68be:	5cf2      	usex	A
    68c0:	8c02      	cmp	AL, #2
    68c2:	1a74      	jule	0x68ac <_ml_SetFastBaudRate+0x1e>
    68c4:	72e6      	lod	A, Y
    68c6:	a005      	add	A, #5
    68c8:	4cf2      	usex	YA
    68ca:	7c0a      	lod	X, #10
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    68cc:	4c63      	divu	YA, X
    68ce:	4c63      	divu	YA, X
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    68d0:	8080      	add	AL, #-128
    68d2:	5cf2      	usex	A

    /* Evaluate ml_FastDivider according to ml_CptLowTemp value*/
    ml_FastDivider = 64 * ml_CptHi + divU16_U32byU16((ml_CptLowTemp + 5), 10);

    /* Setting up the Fast Protocol Baudrate */
    ml_SetBaudRate(ml_FastPresc, ml_FastDivider);
    68d4:	52df      	push	A
    68d6:	7207      	lod	A, [S-8]
    68d8:	82db 5b8e 	callf	0x5b8e <_ml_SetBaudRate>
    68dc:	5c01      	dec	S, #2
    68de:	5407      	ret	#8
    68e0:	b66d      	and	A, [S-110]
    68e2:	6ddb      	lod	YH, dp:0xdb <_ml_driver_mode+0x3>
    68e4:	dbb6      	subc	AH, ep:0xb6 <__bss_dp_size+0x6>
    68e6:	b66d      	and	A, [S-110]
    68e8:	6ddb      	lod	YH, dp:0xdb <_ml_driver_mode+0x3>

000068ea <_RAM_Test>:
    68ea:	7ada 68e0 	lod	Y, #26848
    68ee:	4cc0      	mov	D, YA
    68f0:	7c00      	lod	X, #0
    68f2:	54c6      	movsw	[X++], [Y++]
    68f4:	54c6      	movsw	[X++], [Y++]
    68f6:	54c6      	movsw	[X++], [Y++]
    68f8:	7800      	lod	Y, #0
    68fa:	54c6      	movsw	[X++], [Y++]
    68fc:	2eda 07fe 	cmp	X, #2046
    6900:	1a7c      	jule	0x68fa <_RAM_Test+0x10>
    6902:	4c80      	mov	YA, D
    6904:	7c00      	lod	X, #0
    6906:	72de      	lod	A, [X++]
    6908:	aed6      	cmp	A, [Y++]
    690a:	1d0a      	jne	0x6920 <_RAM_Test+0x36>
    690c:	72de      	lod	A, [X++]
    690e:	aed6      	cmp	A, [Y++]
    6910:	1d07      	jne	0x6920 <_RAM_Test+0x36>
    6912:	72de      	lod	A, [X++]
    6914:	aed6      	cmp	A, [Y++]
    6916:	1d04      	jne	0x6920 <_RAM_Test+0x36>
    6918:	7800      	lod	Y, #0
    691a:	72de      	lod	A, [X++]
    691c:	aed6      	cmp	A, [Y++]
    691e:	1903      	je	0x6926 <_RAM_Test+0x3c>
    6920:	64f3      	lod	YL, #-13
    6922:	76da 568e 	jmpf	0x568e <__fatal>
    6926:	2eda 07fe 	cmp	X, #2046
    692a:	1a77      	jule	0x691a <_RAM_Test+0x30>
    692c:	4c80      	mov	YA, D
    692e:	e002      	add	Y, #2
    6930:	eeda 68e6 	cmp	Y, #26854
    6934:	1d5c      	jne	0x68ee <_RAM_Test+0x4>
    6936:	76da 55e8 	jmpf	0x55e8 <_start>

0000693a <__low_level_init>:
 *
 * NOTE: Function with the same name (i.e. low_level_init) linked from
 * application directory overrides this function
 */
__MLX_TEXT__ void _low_level_init (void)
{
    693a:	580d      	inc	S, #14
    /* The MLX16 is running at full-speed as PLL is started in prestart.c, as specified by MCU_PLL_MULT */

    if ( bistHeader != C_CHIP_HEADER )
    693c:	72d8 0336 	lod	A, 0x336 <__bss_end>
    6940:	aeda b598 	cmp	A, #46488
    6944:	1907      	je	0x6954 <__low_level_init+0x1a>
    {
        /* update the registers because of RAM test and NOLOAD */
        bistHeader = C_CHIP_HEADER;
    6946:	72da b598 	lod	A, #46488
    694a:	52d8 0336 	mov	0x336 <__bss_end>, A
        bistResetInfo = C_CHIP_STATE_COLD_START;
    694e:	7800      	lod	Y, #0
    6950:	5ad8 0338 	mov	0x338 <_bistResetInfo>, Y
    }

#ifdef HAS_NVRAM_CRC

    if (   (bistResetInfo != C_CHIP_STATE_LIN_CMD_RESET)
    6954:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    6958:	aeda 3072 	cmp	A, #12402
    695c:	1d01      	jne	0x6960 <__low_level_init+0x26>
    695e:	0071      	jmp	0x6a42 <__low_level_init+0x108>
    6960:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    6964:	aeda 3212 	cmp	A, #12818
    6968:	1d01      	jne	0x696c <__low_level_init+0x32>
    696a:	006b      	jmp	0x6a42 <__low_level_init+0x108>
    696c:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    6970:	aeda 5c92 	cmp	A, #23698
    6974:	1d01      	jne	0x6978 <__low_level_init+0x3e>
    6976:	0065      	jmp	0x6a42 <__low_level_init+0x108>
    6978:	7c0f      	lod	X, #15
    697a:	7ada 11c0 	lod	Y, #4544
    697e:	7000      	lod	A, #0
    6980:	08a7      	clrb	ML.7
    6982:	b2d6      	adc	A, [Y++]
    6984:	1bfe      	djnz	X, 0x6982 <__low_level_init+0x48>
    6986:	92e4      	adc	AL, AH
    6988:	9000      	adc	AL, #0
    698a:	5cf2      	usex	A
        uint16 u16CRC;

        /* MLX Chip calibration data - CRC2 */
        u16CRC = nvram_CalcCRC( (uint16*) BGN_MLX_CALIB_ADDRESS_AREA2,
                                ((END_MLX_CALIB_ADDRESS_AREA2 + 1) - BGN_MLX_CALIB_ADDRESS_AREA2)/2 );
        if ( u16CRC != 0xFF )
    698c:	aeda 00ff 	cmp	A, #255
    6990:	1903      	je	0x6998 <__low_level_init+0x5e>
        {
    #ifdef HAS_NVRAM_CRC_FAIL_HANG
            /* Area #2 is corrupt */
            asm( "mov yl, #0xC9");                  /* C_ERR_INV_MLXPAGE_CRC2 */    /* MLX NVRAM CRC #2 failure */
    6992:	64c9      	lod	YL, #-55
            asm( "jmpf __fatal");
    6994:	76da 568e 	jmpf	0x568e <__fatal>
    6998:	7c0c      	lod	X, #12
    699a:	7ada 11de 	lod	Y, #4574
    699e:	7000      	lod	A, #0
    69a0:	08a7      	clrb	ML.7
    69a2:	b2d6      	adc	A, [Y++]
    69a4:	1bfe      	djnz	X, 0x69a2 <__low_level_init+0x68>
    69a6:	92e4      	adc	AL, AH
    69a8:	9000      	adc	AL, #0
    69aa:	5cf2      	usex	A
        }

        /* Other chip values - CRC3 */
        u16CRC = nvram_CalcCRC( (uint16*) BGN_MLX_CALIB_ADDRESS_AREA3,
                                ((END_MLX_CALIB_ADDRESS_AREA3 + 1) - BGN_MLX_CALIB_ADDRESS_AREA3)/2 );
        if ( u16CRC != 0xFF )
    69ac:	aeda 00ff 	cmp	A, #255
    69b0:	1903      	je	0x69b8 <__low_level_init+0x7e>
        {
    #ifdef HAS_NVRAM_CRC_FAIL_HANG
            /* Area #3 is corrupt */
            asm( "mov yl, #0xCA");                  /* C_ERR_INV_MLXPAGE_CRC3 */    /* MLX NVRAM CRC #3 failure */
    69b2:	64ca      	lod	YL, #-54
            asm( "jmpf __fatal");
    69b4:	76da 568e 	jmpf	0x568e <__fatal>
    69b8:	7c05      	lod	X, #5
    69ba:	7ada 11f6 	lod	Y, #4598
    69be:	7000      	lod	A, #0
    69c0:	08a7      	clrb	ML.7
    69c2:	b2d6      	adc	A, [Y++]
    69c4:	1bfe      	djnz	X, 0x69c2 <__low_level_init+0x88>
    69c6:	92e4      	adc	AL, AH
    69c8:	9000      	adc	AL, #0
    69ca:	5cf2      	usex	A
        }

        /* Flash/NVRAM#2 Trimming - CRC4 */
        u16CRC = nvram_CalcCRC( (uint16*) BGN_MLX_CALIB_ADDRESS_AREA4,
                                ((END_MLX_CALIB_ADDRESS_AREA4 + 1) - BGN_MLX_CALIB_ADDRESS_AREA4)/2 );
        if ( u16CRC != 0xFF )
    69cc:	aeda 00ff 	cmp	A, #255
    69d0:	1903      	je	0x69d8 <__low_level_init+0x9e>
        {
    #ifdef HAS_NVRAM_CRC_FAIL_HANG
            /* Area #4 is corrupt */
            asm( "mov yl, #0xCB");                  /* C_ERR_INV_MLXPAGE_CRC4 */    /* MLX NVRAM CRC #4 failure */
    69d2:	64cb      	lod	YL, #-53
            asm( "jmpf __fatal");
    69d4:	76da 568e 	jmpf	0x568e <__fatal>
    69d8:	7ada 10fc 	lod	Y, #4348
    69dc:	7c02      	lod	X, #2
    69de:	7000      	lod	A, #0
    69e0:	08a7      	clrb	ML.7
    69e2:	b2d6      	adc	A, [Y++]
    69e4:	1bfe      	djnz	X, 0x69e2 <__low_level_init+0xa8>
    69e6:	92e4      	adc	AL, AH
    69e8:	9000      	adc	AL, #0
    69ea:	5cf2      	usex	A
        }

        /* Flash/NVRAM#1 Trimming - CRC5 */
        u16CRC = nvram_CalcCRC( (uint16*) BGN_MLX_CALIB_ADDRESS_AREA5,
                                ((END_MLX_CALIB_ADDRESS_AREA5 + 1) - BGN_MLX_CALIB_ADDRESS_AREA5)/2 );
        if (( u16CRC != 0xFF ) ||                                                   /* Check if checksum is corrupted */
    69ec:	aeda 00ff 	cmp	A, #255
    69f0:	1d07      	jne	0x6a00 <__low_level_init+0xc6>
    69f2:	7eda 11f8 	lod	X, #4600
    69f6:	7ada 10fe 	lod	Y, #4350
    69fa:	72f0      	lod	A, [Y]
    69fc:	aef8      	cmp	A, [X]
    69fe:	1921      	je	0x6a42 <__low_level_init+0x108>
            (*((uint16*) (BGN_MLX_CALIB_ADDRESS_AREA5 + 2)) != *((uint16*) (BGN_MLX_CALIB_ADDRESS_AREA4 + 2))) )   /* Trim NVRAM 1 check */
        {
            /* Area #5 is corrupt; Copy from Melexis area and calc CRC */
            *((uint16*)  BGN_MLX_CALIB_ADDRESS_AREA5) = 0;
    6a00:	7000      	lod	A, #0
    6a02:	7eda 10fc 	lod	X, #4348
    6a06:	52f8      	mov	[X], A
            *((uint16*) (BGN_MLX_CALIB_ADDRESS_AREA5 + 2)) = *((uint16*) (BGN_MLX_CALIB_ADDRESS_AREA4+2));
    6a08:	7eda 10fe 	lod	X, #4350
    6a0c:	7ada 11f8 	lod	Y, #4600
    6a10:	7af0      	lod	Y, [Y]
    6a12:	5af8      	mov	[X], Y
    6a14:	7ada 10fc 	lod	Y, #4348
    6a18:	7c02      	lod	X, #2
    6a1a:	7000      	lod	A, #0
    6a1c:	08a7      	clrb	ML.7
    6a1e:	b2d6      	adc	A, [Y++]
    6a20:	1bfe      	djnz	X, 0x6a1e <__low_level_init+0xe4>
    6a22:	92e4      	adc	AL, AH
    6a24:	9000      	adc	AL, #0
    6a26:	5cf2      	usex	A
    6a28:	5205      	mov	[S-6], A
            u16CRC = nvram_CalcCRC( (uint16*) BGN_MLX_CALIB_ADDRESS_AREA5,
                                    ((END_MLX_CALIB_ADDRESS_AREA5 + 1) - BGN_MLX_CALIB_ADDRESS_AREA5)/2 );
            *((uint16*) BGN_MLX_CALIB_ADDRESS_AREA5) = (0xFF - u16CRC);
    6a2a:	72da 00ff 	lod	A, #255
    6a2e:	aa05      	sub	A, [S-6]
    6a30:	7ada 10fc 	lod	Y, #4348
    6a34:	52f0      	mov	[Y], A
            NVRAM_SavePage(NVRAM1_PAGE2);
    6a36:	7001      	lod	A, #1
    6a38:	82db 5a00 	callf	0x5a00 <_NVRAM_SavePage>
            asm( "mov yl, #0xCC");                  /* C_ERR_INV_MLXPAGE_CRC5 */    /* MLX NVRAM CRC #5 failure */
    6a3c:	64cc      	lod	YL, #-52
            asm( "jmpf __fatal");
    6a3e:	76da 568e 	jmpf	0x568e <__fatal>
        }
    }
#endif /* HAS_NVRAM_CRC */

    CONTROL |= OUTA_WE;                                                         /* Grant access to ANA_OUTx registers */
    6a42:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    6a46:	8408      	or	AL, #8
    6a48:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
    ANA_OUTA = EEP_ANA_OUTA & ~TEST_MODE_DIS;                                   /* ANA_OUTA is not set */
    6a4c:	72d8 11f0 	lod	A, 0x11f0 <__ep__+0x1f0>
    6a50:	b6da ff7f 	and	A, #65407
    6a54:	52d8 201c 	mov	0x201c <__ep__+0x101c>, A
    CONTROL &= ~OUTA_WE;
    6a58:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    6a5c:	94f7      	and	AL, #-9
    6a5e:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
    ANA_OUTG = 0x0004U;                                                         /* Motor-driver FET switching slew-rate at 100% */
    6a62:	7c04      	lod	X, #4
    6a64:	5ed8 28cc 	mov	0x28cc <__io__+0xcc>, X
#if defined(DEF_SHRAMH) && defined(DEF_SHRAML)
    /* ------------------------------------------------------------------------
     * Initialize shared memory and start MLX4 processor
     * NOTE: Port SHRAM can only be changed when Mlx4 is in reset
     */
    SHRAM = ((uint16)DEF_SHRAMH << 8) | DEF_SHRAML;
    6a68:	72da 7c50 	lod	A, #31824
    6a6c:	52d8 2002 	mov	0x2002 <__ep__+0x1002>, A
#endif

    MLX4_RESET();
    6a70:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    6a74:	94fe      	and	AL, #-2
    6a76:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
    NOP();
    6a7a:	0000      	nop
    NOP();
    6a7c:	0000      	nop
    NOP();
    6a7e:	0000      	nop
    MLX4_START();
    6a80:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    6a84:	8401      	or	AL, #1
    6a86:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
    6a8a:	540f      	ret	#16

00006a8c <__premain>:
 *
 * NOTE: Function with the same name (i.e. premain) linked from
 * application directory overrides this function
 */
__MLX_TEXT__ void _premain (void)
{
    6a8c:	587f      	inc	S, #128
    /*
     * Here page_buffer on the stack is initialised.
     * Reset on EnterProgMode is needed to run Loader routine from zero stack when LDR_GetState = 0.
     */
    ml_uint8 page_buffer_stack[128] __attribute__((aligned(2)));
    page_buffer = page_buffer_stack;
    6a8e:	72ef      	lod	A, S
    6a90:	a080      	add	A, #-128
    6a92:	52d8 0332 	mov	0x332 <_page_buffer>, A
#endif /* LDR_HAS_PAGE_BUFFER_ON_STACK */

    if (   (LDR_GetState() != 0)
    6a96:	15d7      	call	0x6646 <_LDR_GetState>
    6a98:	8c00      	cmp	AL, #0
    6a9a:	1d06      	jne	0x6aa8 <__premain+0x1c>
    6a9c:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    6aa0:	aeda 3212 	cmp	A, #12818
    6aa4:	1901      	je	0x6aa8 <__premain+0x1c>
    6aa6:	003b      	jmp	0x6b1e <__premain+0x92>
        || (bistResetInfo == C_CHIP_STATE_LOADER_PROG_RESET)
#endif /* LDR_RESET_ON_ENTER_PROG_MODE */
       )
    {
#if defined (SUPPORT_LINNETWORK_LOADER)
	    if ( stFixedRamNAD.key != _mlx_NAD_Security_Key )
    6aa8:	72d8 0010 	lod	A, 0x10 <__dp_noinit_size>
    6aac:	7ad8 0012 	lod	Y, 0x12 <__dp_noinit_size+0x2>
    6ab0:	4cb2 72ef 	cmp	YA, #-396266769
    6ab4:	e861 
    6ab6:	1913      	je	0x6ade <__premain+0x52>
		{
			uint8_t u8NAD = (uint8_t) *((uint16_t*) 0xBF76);					/* Get NAD from Flash at STACK_IT Segment */
    6ab8:	7ada bf76 	lod	Y, #49014
    6abc:	72f0      	lod	A, [Y]
    6abe:	5cf2      	usex	A
			if ( (u8NAD & 0x80) || (u8NAD == 0x00) )
    6ac0:	8c00      	cmp	AL, #0
    6ac2:	1a82      	jsl	0x6ac8 <__premain+0x3c>
    6ac4:	ac00      	cmp	A, #0
    6ac6:	1d01      	jne	0x6aca <__premain+0x3e>
			{
				u8NAD = 0x7F;													/* Invalid NAD; Use default NAD */
    6ac8:	707f      	lod	A, #127
			}
			stFixedRamNAD.nad = u8NAD;
    6aca:	42d8 0014 	mov	0x14 <__dp_noinit_size+0x4>, AL
			stFixedRamNAD.key = _mlx_NAD_Security_Key;
    6ace:	72da 72ef 	lod	A, #29423
    6ad2:	52d8 0010 	mov	0x10 <__dp_noinit_size>, A
    6ad6:	72da e861 	lod	A, #59489
    6ada:	52d8 0012 	mov	0x12 <__dp_noinit_size+0x2>, A
		}
#endif /* SUPPORT_LINNETWORK_LOADER */

        SET_PRIORITY(7);                /* System mode, low priority (7) */
    6ade:	54f7      	mov	UPr, #7

        ml_LinInit();
    6ae0:	106e      	call	0x6bbe <_ml_LinInit>
        (void)ml_Connect();
    6ae2:	82db 5ba2 	callf	0x5ba2 <_ml_Connect>

#if defined (LDR_RESET_ON_ENTER_PROG_MODE)
        if (bistResetInfo == C_CHIP_STATE_LOADER_PROG_RESET) {
    6ae6:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    6aea:	aeda 3212 	cmp	A, #12818
    6aee:	1d07      	jne	0x6afe <__premain+0x72>
            ml_ldr_SwitchToProgMode(ML_FALSE);
    6af0:	7000      	lod	A, #0
    6af2:	82db 60c4 	callf	0x60c4 <_ml_ldr_SwitchToProgMode>
            bistResetInfo = C_CHIP_STATE_WATCHDOG_RESET;
    6af6:	72da 5c92 	lod	A, #23698
    6afa:	52d8 0338 	mov	0x338 <_bistResetInfo>, A
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    6afe:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    6b00:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    6b02:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    6b04:	b430      	and	A, #48
    6b06:	1902      	je	0x6b0c <__premain+0x80>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    6b08:	6000      	lod	AL, #0
    6b0a:	4282      	mov	io:0x2 <_LinCmnd>, AL
        }
#endif /* LDR_RESET_ON_ENTER_PROG_MODE */
        for (;;) {
            WDG_Manager();
            
            if (PEND & CLR_M4_SHE_IT) { /* If LIN interrupt requested */
    6b0c:	72d8 2008 	lod	A, 0x2008 <__ep__+0x1008>
    6b10:	b410      	and	A, #16
    6b12:	1975      	je	0x6afe <__premain+0x72>

                /*
                 * LIN interrupt pending bit will be cleared in ml_GetLinEventData
                 */

                ml_GetLinEventData();
    6b14:	82db 5bbe 	callf	0x5bbe <_ml_GetLinEventData>
                ml_ProccessLinEvent();
    6b18:	82db 5bee 	callf	0x5bee <_ml_ProccessLinEvent>
        if (bistResetInfo == C_CHIP_STATE_LOADER_PROG_RESET) {
            ml_ldr_SwitchToProgMode(ML_FALSE);
            bistResetInfo = C_CHIP_STATE_WATCHDOG_RESET;
        }
#endif /* LDR_RESET_ON_ENTER_PROG_MODE */
        for (;;) {
    6b1c:	07f0      	jmp	0x6afe <__premain+0x72>
            }
        }
    }
#endif /* LIN_PIN_LOADER */

    SET_PRIORITY(7);                    /* System mode, low priority (7) */
    6b1e:	54f7      	mov	UPr, #7
    6b20:	5c7f      	dec	S, #128
    6b22:	5401      	ret

00006b24 <_mlx_isPowerOk>:

/* ----------------------------------------------------------------------------
 * To check power supply.
 */
__MLX_TEXT__  bool mlx_isPowerOk (void)
{
    6b24:	5805      	inc	S, #6
    /* ADC setting and result place in stack */
    volatile uint16 adc_setting[] = { (ADC_CH0 | ADC_REF_2_50_V), ADC_CFG_END_MARKER };
    6b26:	7003      	lod	A, #3
    6b28:	5205      	mov	[S-6], A
    6b2a:	70ff      	lod	A, #-1
    6b2c:	5203      	mov	[S-4], A
    volatile uint16 adc_result[]  = { 0 };
    6b2e:	7000      	lod	A, #0
    6b30:	5201      	mov	[S-2], A

    /* In case ADC is active, wait to finish it */
    if ((ADC_CTRL & ADC_START) != 0)
    6b32:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    6b34:	b401      	and	A, #1
    6b36:	1917      	je	0x6b66 <_mlx_isPowerOk+0x42>
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    6b38:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    6b3a:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    6b3c:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    6b3e:	b430      	and	A, #48
    6b40:	1902      	je	0x6b46 <_mlx_isPowerOk+0x22>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    6b42:	6000      	lod	AL, #0
    6b44:	4282      	mov	io:0x2 <_LinCmnd>, AL
    {
        uint16 u16MaxDelay = 2U;
        WDG_Manager();
        ADC_CTRL &= ~ADC_LOOP;      /* Stop looping (infinity) */
    6b46:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    6b48:	b4fb      	and	A, #-5
    6b4a:	5290      	mov	io:0x10 <__dp_noinit_size>, A
    #define MLX813xx_USEC_DELAY(us) DELAY((FPLL * (uint32)(us) + 2000) / 5000)

    static INLINE void MLX813xx_MSEC_DELAY(int16 msec)
    {
        int16 i;
        for(i = 0; i < msec; i++)
    6b4c:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    6b4e:	b401      	and	A, #1
    6b50:	190a      	je	0x6b66 <_mlx_isPowerOk+0x42>
    6b52:	7801      	lod	Y, #1
        {
            __asm__ __volatile__ (
    6b54:	7eda 15e0 	lod	X, #5600
    6b58:	1bff      	djnz	X, 0x6b58 <_mlx_isPowerOk+0x34>
    #define MLX813xx_USEC_DELAY(us) DELAY((FPLL * (uint32)(us) + 2000) / 5000)

    static INLINE void MLX813xx_MSEC_DELAY(int16 msec)
    {
        int16 i;
        for(i = 0; i < msec; i++)
    6b5a:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    6b5c:	b401      	and	A, #1
    6b5e:	1903      	je	0x6b66 <_mlx_isPowerOk+0x42>
    6b60:	e0ff      	add	Y, #-1
    6b62:	ecff      	cmp	Y, #-1
    6b64:	1d77      	jne	0x6b54 <_mlx_isPowerOk+0x30>
        while ((ADC_CTRL & ADC_START) && (u16MaxDelay-- > 0))
        {
            MLX813xx_MSEC_DELAY(1);
        }
    }
    ADC_CTRL = 0U;                  /* clear the ADC control register */
    6b66:	7000      	lod	A, #0
    6b68:	5290      	mov	io:0x10 <__dp_noinit_size>, A

    /* Configure for Vsup measurement */
    ADC_INIT( adc_setting,
    6b6a:	72ef      	lod	A, S
    6b6c:	a0fe      	add	A, #-2
    6b6e:	5294      	mov	io:0x14 <__dp_noinit_size+0x4>, A
    6b70:	72ef      	lod	A, S
    6b72:	a0fa      	add	A, #-6
    6b74:	5292      	mov	io:0x12 <__dp_noinit_size+0x2>, A
    6b76:	72da 0080 	lod	A, #128
    6b7a:	5290      	mov	io:0x10 <__dp_noinit_size>, A
              adc_result,
              ADC_SOFTWARE_TRIGGER,
              ADC_SINGLE_SEQUNCE_MODE );

    ADC_START_SEQUENCE();
    6b7c:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    6b7e:	a401      	or	A, #1
    6b80:	5290      	mov	io:0x10 <__dp_noinit_size>, A
    DELAY(500);                     /* some delay for sample and hold */
    6b82:	7eda 01f4 	lod	X, #500
    6b86:	1bff      	djnz	X, 0x6b86 <_mlx_isPowerOk+0x62>
    ADC_TRIGGER_NEXT_CONVERSION();
    6b88:	7040      	lod	A, #64
    6b8a:	52d8 2008 	mov	0x2008 <__ep__+0x1008>, A
    6b8e:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    6b90:	a6da 0100 	or	A, #256
    6b94:	5290      	mov	io:0x10 <__dp_noinit_size>, A
    6b96:	72d8 2008 	lod	A, 0x2008 <__ep__+0x1008>
    6b9a:	b440      	and	A, #64
    6b9c:	1d08      	jne	0x6bae <_mlx_isPowerOk+0x8a>
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    6b9e:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    6ba0:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    6ba2:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    6ba4:	b430      	and	A, #48
    6ba6:	1977      	je	0x6b96 <_mlx_isPowerOk+0x72>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    6ba8:	6000      	lod	AL, #0
    6baa:	4282      	mov	io:0x2 <_LinCmnd>, AL
    6bac:	07f4      	jmp	0x6b96 <_mlx_isPowerOk+0x72>

    while (ADC_IS_BUSY()) {         /* wait until current channel conversion completed */
        WDG_Manager();
    }

    if ( adc_result[0] <= POWER_LOW ) {
    6bae:	7201      	lod	A, [S-2]
    6bb0:	aeda 0158 	cmp	A, #344
    6bb4:	1e02      	jug	0x6bba <_mlx_isPowerOk+0x96>
        return false;
    6bb6:	7000      	lod	A, #0
    6bb8:	5407      	ret	#8
    }
    else {
        return true;
    6bba:	7001      	lod	A, #1
    }
}
    6bbc:	5407      	ret	#8

00006bbe <_ml_LinInit>:
/*
 *
 */
__MLX_TEXT__  void ml_LinInit(void)
{
	(void)ml_InitLinModule();          /* Start and initialize the LIN Module */
    6bbe:	82db 5e0c 	callf	0x5e0c <_ml_InitLinModule>

	/* The LIN Module is now in the DISCONNECTED state */

#if STANDALONE_LOADER == 0
	/* Configure the Mlx4 software */
    (void)ml_SetOptions (1U,        /* IDStopBitLength = 1.5 Bit (Melexis LIN Master has 1.5 Tbit stop bit */
    6bc2:	54ca 0000 	pushw	#0
    6bc6:	54ca 0001 	pushw	#1
    6bca:	54ca 0000 	pushw	#0
    6bce:	7001      	lod	A, #1
    6bd0:	82db 5ae0 	callf	0x5ae0 <_ml_SetOptions>
                    0U,             /* TXStopBitLength = 1 Bit */
                    ML_ENABLED,     /* StateChangeSignal */
                    ML_LIGHTSLEEP   /* SleepMode: lightsleep mode */
                   );
    (void)ml_SetSlewRate(ML_SLEWHIGH);
    6bd4:	7000      	lod	A, #0
    6bd6:	82db 5ad8 	callf	0x5ad8 <_ml_SetSlewRate>
    6bda:	5c05      	dec	S, #6
    6bdc:	5401      	ret
    6bde:	0000      	nop
    6be0:	5c3e      	dec	S, #63
    6be2:	5c5a      	dec	S, #91
    6be4:	5cb2      	ssg	A
    6be6:	5ce2      	ssex	A
    6be8:	5cf6      	usex	Y
    6bea:	0000      	nop
    6bec:	0001      	jmp	0x6bf0 <_muldivI16_I16byI16byI16+0x2>

00006bee <_muldivI16_I16byI16byI16>:
    6bee:	7a03      	lod	Y, [S-4]
    6bf0:	4831      	muls	YA, A, Y
    6bf2:	7e05      	lod	X, [S-6]
    6bf4:	4c73      	divs	YA, X
    6bf6:	4c73      	divs	YA, X
    6bf8:	4c7b      	dadjs	YA, X
    6bfa:	5401      	ret

00006bfc <_muldivU16_U16byU16byU16>:
    6bfc:	7a03      	lod	Y, [S-4]
    6bfe:	4821      	mulu	YA, A, Y
    6c00:	7e05      	lod	X, [S-6]
    6c02:	4c63      	divu	YA, X
    6c04:	4c63      	divu	YA, X
    6c06:	5401      	ret

00006c08 <_divI32_I32byI16>:
    6c08:	7e03      	lod	X, [S-4]
    6c0a:	1d87      	jnn	0x6c1a <_divI32_I32byU16+0x2>
    6c0c:	5cce      	neg	X
    6c0e:	5e03      	mov	[S-4], X
    6c10:	e000      	add	Y, #0
    6c12:	1d86      	jnn	0x6c20 <_divI32_I32byU16+0x8>
    6c14:	4cf0      	neg	YA
    6c16:	0011      	jmp	0x6c3a <_divU32_U32byU16>

00006c18 <_divI32_I32byU16>:
    6c18:	7e03      	lod	X, [S-4]
    6c1a:	e000      	add	Y, #0
    6c1c:	1d8e      	jnn	0x6c3a <_divU32_U32byU16>
    6c1e:	4cf0      	neg	YA
    6c20:	4ca3      	push	YA
    6c22:	72e6      	lod	A, Y
    6c24:	7800      	lod	Y, #0
    6c26:	7e07      	lod	X, [S-8]
    6c28:	4c63      	divu	YA, X
    6c2a:	4c63      	divu	YA, X
    6c2c:	5201      	mov	[S-2], A
    6c2e:	7203      	lod	A, [S-4]
    6c30:	4c63      	divu	YA, X
    6c32:	4c63      	divu	YA, X
    6c34:	7a01      	lod	Y, [S-2]
    6c36:	4cf0      	neg	YA
    6c38:	5405      	ret	#6

00006c3a <_divU32_U32byU16>:
    6c3a:	4ca3      	push	YA
    6c3c:	72e6      	lod	A, Y
    6c3e:	7800      	lod	Y, #0
    6c40:	7e07      	lod	X, [S-8]
    6c42:	4c63      	divu	YA, X
    6c44:	4c63      	divu	YA, X
    6c46:	5201      	mov	[S-2], A
    6c48:	7203      	lod	A, [S-4]
    6c4a:	4c63      	divu	YA, X
    6c4c:	4c63      	divu	YA, X
    6c4e:	7a01      	lod	Y, [S-2]
    6c50:	5405      	ret	#6

00006c52 <_mulI32_I16byU16>:
    6c52:	a000      	add	A, #0
    6c54:	1d85      	jnn	0x6c60 <_mulU32_U16byU16>
    6c56:	5cc2      	neg	A
    6c58:	7a03      	lod	Y, [S-4]
    6c5a:	4821      	mulu	YA, A, Y
    6c5c:	4cf0      	neg	YA
    6c5e:	5401      	ret

00006c60 <_mulU32_U16byU16>:
    6c60:	7a03      	lod	Y, [S-4]
    6c62:	4821      	mulu	YA, A, Y
    6c64:	5401      	ret

00006c66 <___mulsi3>:
    6c66:	5edf      	push	X
    6c68:	7eef      	lod	X, S
    6c6a:	2808      	sub	X, #8
    6c6c:	1002      	call	0x6c72 <___mulsi3_1>
    6c6e:	7ecf      	pop	X
    6c70:	5401      	ret

00006c72 <___mulsi3_1>:
    6c72:	4c83      	push	D
    6c74:	4cf3      	swap	YA
    6c76:	4806      	mulu	D, A, [X++]
    6c78:	4cf3      	swap	YA
    6c7a:	4847      	macu	D, A, [X]
    6c7c:	2802      	sub	X, #2
    6c7e:	48cf      	asl	D, #16
    6c80:	4847      	macu	D, A, [X]
    6c82:	4c80      	mov	YA, D
    6c84:	4cc3      	pop	D
    6c86:	5401      	ret

00006c88 <___mulsi3_D>:
    6c88:	5edf      	push	X
    6c8a:	7eef      	lod	X, S
    6c8c:	2002      	add	X, #2
    6c8e:	17f1      	call	0x6c72 <___mulsi3_1>
    6c90:	7ecf      	pop	X
    6c92:	5401      	ret

00006c94 <___udivsi3>:
    6c94:	7c00      	lod	X, #0
    6c96:	0002      	jmp	0x6c9c <___udivmodsi4>

00006c98 <___umodsi3>:
    6c98:	7c01      	lod	X, #1
    6c9a:	0000      	nop

00006c9c <___udivmodsi4>:
    6c9c:	5edf      	push	X
    6c9e:	2c00      	cmp	X, #0
    6ca0:	1d06      	jne	0x6cae <___udivmodsi4+0x12>
    6ca2:	7e05      	lod	X, [S-6]
    6ca4:	1d05      	jne	0x6cb0 <___udivmodsi4+0x14>
    6ca6:	7e07      	lod	X, [S-8]
    6ca8:	5e01      	mov	[S-2], X
    6caa:	1024      	call	0x6cf4 <__divU32_U32byU16>
    6cac:	5403      	ret	#4
    6cae:	7e05      	lod	X, [S-6]
    6cb0:	2607      	or	X, [S-8]
    6cb2:	1d03      	jne	0x6cba <___udivmodsi4+0x1e>
    6cb4:	4cfa ffff 	movs	YA, #65535
    6cb8:	5403      	ret	#4
    6cba:	4cc0      	mov	D, YA
    6cbc:	7eef      	lod	X, S
    6cbe:	2808      	sub	X, #8
    6cc0:	4cea 0000 	movu	YA, #0
    6cc4:	54e0      	mov	Cx, #0
    6cc6:	48c0      	asl	D, #1
    6cc8:	4402      	rlc	A
    6cca:	4406      	rlc	Y
    6ccc:	1802      	jc	0x6cd2 <___udivmodsi4+0x36>
    6cce:	4cb7      	cmp	YA, [X]
    6cd0:	1803      	jc	0x6cd8 <___udivmodsi4+0x3c>
    6cd2:	4c37      	sub	YA, [X]
    6cd4:	4c0a 0001 	addu	D, #1
    6cd8:	48c0      	asl	D, #1
    6cda:	4402      	rlc	A
    6cdc:	4406      	rlc	Y
    6cde:	1802      	jc	0x6ce4 <___udivmodsi4+0x48>
    6ce0:	4cb7      	cmp	YA, [X]
    6ce2:	1803      	jc	0x6cea <___udivmodsi4+0x4e>
    6ce4:	4c37      	sub	YA, [X]
    6ce6:	4c0a 0001 	addu	D, #1
    6cea:	1fed      	djnz	Cx, 0x6cc6 <___udivmodsi4+0x2a>
    6cec:	7ecf      	pop	X
    6cee:	1d01      	jne	0x6cf2 <___udivmodsi4+0x56>
    6cf0:	4c80      	mov	YA, D
    6cf2:	5401      	ret

00006cf4 <__divU32_U32byU16>:
    6cf4:	5edf      	push	X
    6cf6:	4ca3      	push	YA
    6cf8:	72e6      	lod	A, Y
    6cfa:	7800      	lod	Y, #0
    6cfc:	7e09      	lod	X, [S-10]
    6cfe:	4c63      	divu	YA, X
    6d00:	4c63      	divu	YA, X
    6d02:	5201      	mov	[S-2], A
    6d04:	7203      	lod	A, [S-4]
    6d06:	4c63      	divu	YA, X
    6d08:	4c63      	divu	YA, X
    6d0a:	7a01      	lod	Y, [S-2]
    6d0c:	7e05      	lod	X, [S-6]
    6d0e:	5407      	ret	#8

00006d10 <_RamBackgroundTest>:
{
	/* Use compare instead of CRC-check !! */
	uint16 *pu16Page;
#if (LINPROT == LIN2J_VALVE_GM)
	(void) u16Page;
	if ( (((NVRAM_USER *) C_ADDR_USERPAGE1)->AppStatus & 0x80) ^ (((NVRAM_USER *) C_ADDR_USERPAGE2)->AppStatus & 0x80) )
    6d10:	7ada 101e 	lod	Y, #4126
    6d14:	66f0      	lod	YL, [Y]
    6d16:	f6da 0080 	and	Y, #128
    6d1a:	7ee6      	lod	X, Y
    6d1c:	7ada 111e 	lod	Y, #4382
    6d20:	62f0      	lod	AL, [Y]
    6d22:	b6da 0080 	and	A, #128
    6d26:	2ee2      	cmp	X, A
    6d28:	1903      	je	0x6d30 <_RamBackgroundTest+0x20>
		pu16Page = (uint16 *) C_ADDR_USERPAGE2;
    6d2a:	72da 1100 	lod	A, #4352
    6d2e:	0002      	jmp	0x6d34 <_RamBackgroundTest+0x24>
	else
		pu16Page = (uint16 *) C_ADDR_USERPAGE1;
    6d30:	72da 1000 	lod	A, #4096
	{
		pu16Page = (uint16 *) C_ADDR_USERPAGE2;									/* Compare NVRAM User-page #2 against RAM */
	}
#endif /* (LINPROT == LIN2J_VALVE_GM) */

	return ( NVRAM_PageVerify( pu16Page) );
    6d34:	82db 97b2 	callf	0x97b2 <_NVRAM_PageVerify>

} /* End of RamBackgroundTest() */
    6d38:	5401      	ret

00006d3a <_FlashBackgroundTest>:
#define C_FLASH_CRC_FAILED			0
#define C_FLASH_CRC_OK				1
#define C_FLASH_CRC_CALCULATING		2

uint16 FlashBackgroundTest( uint16 u16Size)
{
    6d3a:	5807      	inc	S, #8
    6d3c:	7ee2      	lod	X, A
	uint16 u16Result = C_FLASH_CRC_CALCULATING;
    6d3e:	4cd3      	swap	D
    6d40:	48cf      	asl	D, #16
    6d42:	4c0a 0002 	addu	D, #2
	static uint16 *pu16Segment = (uint16 *) FLASH_START_ADDR;
	static uint16 u16FlashCRC = 0;

	if ( u16Size == 0U )
    6d46:	ac00      	cmp	A, #0
    6d48:	1d06      	jne	0x6d56 <_FlashBackgroundTest+0x1c>
	{
		pu16Segment = (uint16 *) FLASH_START_ADDR;
    6d4a:	72da 4000 	lod	A, #16384
    6d4e:	52d8 0118 	mov	0x118 <_g_i16SupplyVoltage+0x2>, A
		return ( u16Result );
    6d52:	7002      	lod	A, #2
    6d54:	5409      	ret	#10
	}
	if ( pu16Segment == (uint16 *) FLASH_START_ADDR )
    6d56:	7ad8 0118 	lod	Y, 0x118 <_g_i16SupplyVoltage+0x2>
    6d5a:	eeda 4000 	cmp	Y, #16384
    6d5e:	1d03      	jne	0x6d66 <_FlashBackgroundTest+0x2c>
	{
		u16FlashCRC = 0xFFFF;													/* Initialise the CRC preset with 0xFFFF */
    6d60:	70ff      	lod	A, #-1
    6d62:	52d8 011a 	mov	0x11a <_g_i16SupplyVoltage+0x4>, A
	}
	if ( ((uint16) pu16Segment + u16Size) > FLASH_END_ADDR )
    6d66:	72e6      	lod	A, Y
    6d68:	a2ee      	add	A, X
    6d6a:	aeda c000 	cmp	A, #49152
    6d6e:	1a04      	jule	0x6d78 <_FlashBackgroundTest+0x3e>
	{
		u16Size = (FLASH_END_ADDR - (uint16) pu16Segment);
    6d70:	72da c000 	lod	A, #49152
    6d74:	7ee2      	lod	X, A
    6d76:	2ae6      	sub	X, Y
	}
	for ( ; u16Size > 0; u16Size-- )
    6d78:	2c00      	cmp	X, #0
    6d7a:	192b      	je	0x6dd2 <_FlashBackgroundTest+0x98>
    6d7c:	5a03      	mov	[S-4], Y
	{
		if ( pu16Segment != (uint16 *) FLASH_CRC_ADDR )
    6d7e:	7a03      	lod	Y, [S-4]
    6d80:	eeda bf4e 	cmp	Y, #48974
    6d84:	1920      	je	0x6dc6 <_FlashBackgroundTest+0x8c>
		{
			uint8 u8Count;
			uint16 u16Data = *pu16Segment;
    6d86:	72f0      	lod	A, [Y]
    6d88:	5205      	mov	[S-6], A
			for ( u8Count = 16; u8Count > 0; u8Count-- )
    6d8a:	7810      	lod	Y, #16
    6d8c:	5a07      	mov	[S-8], Y
    6d8e:	7ad8 011a 	lod	Y, 0x11a <_g_i16SupplyVoltage+0x4>
			{
				uint16 u16XorFlag = !!(u16FlashCRC & 0x8000);
    6d92:	72e6      	lod	A, Y
    6d94:	b6da 8000 	and	A, #32768
    6d98:	5201      	mov	[S-2], A
    6d9a:	1902      	je	0x6da0 <_FlashBackgroundTest+0x66>
    6d9c:	7001      	lod	A, #1
    6d9e:	5201      	mov	[S-2], A
				u16FlashCRC = (u16FlashCRC << 1);
    6da0:	4426      	asl	Y
				if ( u16Data & 0x8000 )
    6da2:	7205      	lod	A, [S-6]
    6da4:	ac00      	cmp	A, #0
    6da6:	1e81      	jsge	0x6daa <_FlashBackgroundTest+0x70>
				{
					u16FlashCRC++;
    6da8:	e001      	add	Y, #1
				}
				if ( u16XorFlag )
    6daa:	7201      	lod	A, [S-2]
    6dac:	1902      	je	0x6db2 <_FlashBackgroundTest+0x78>
				{
					u16FlashCRC ^= POLY;
    6dae:	feda 1021 	xor	Y, #4129
				}
				u16Data <<= 1;
    6db2:	7205      	lod	A, [S-6]
    6db4:	4422      	asl	A
    6db6:	5205      	mov	[S-6], A
	{
		if ( pu16Segment != (uint16 *) FLASH_CRC_ADDR )
		{
			uint8 u8Count;
			uint16 u16Data = *pu16Segment;
			for ( u8Count = 16; u8Count > 0; u8Count-- )
    6db8:	6207      	lod	AL, [S-8]
    6dba:	80ff      	add	AL, #-1
    6dbc:	5cf2      	usex	A
    6dbe:	5207      	mov	[S-8], A
    6dc0:	1d68      	jne	0x6d92 <_FlashBackgroundTest+0x58>
    6dc2:	5ad8 011a 	mov	0x11a <_g_i16SupplyVoltage+0x4>, Y
					u16FlashCRC ^= POLY;
				}
				u16Data <<= 1;
			}
		}
		pu16Segment++;
    6dc6:	7203      	lod	A, [S-4]
    6dc8:	a002      	add	A, #2
    6dca:	5203      	mov	[S-4], A
	}
	if ( ((uint16) pu16Segment + u16Size) > FLASH_END_ADDR )
	{
		u16Size = (FLASH_END_ADDR - (uint16) pu16Segment);
	}
	for ( ; u16Size > 0; u16Size-- )
    6dcc:	1bd8      	djnz	X, 0x6d7e <_FlashBackgroundTest+0x44>
    6dce:	52d8 0118 	mov	0x118 <_g_i16SupplyVoltage+0x2>, A
			}
		}
		pu16Segment++;
	}

	if ( (uint16) pu16Segment >= FLASH_END_ADDR )
    6dd2:	72d8 0118 	lod	A, 0x118 <_g_i16SupplyVoltage+0x2>
    6dd6:	aeda bfff 	cmp	A, #49151
    6dda:	1a14      	jule	0x6e04 <_FlashBackgroundTest+0xca>
	{
		/* CRC fully calculated, check values */
		pu16Segment = (uint16 *) FLASH_START_ADDR;
    6ddc:	7ada 4000 	lod	Y, #16384
    6de0:	5ad8 0118 	mov	0x118 <_g_i16SupplyVoltage+0x2>, Y
		if ( *(uint16 *) FLASH_CRC_ADDR != 0 )									/* Flash/ROM Checksum programmed? */
    6de4:	7ada bf4e 	lod	Y, #48974
    6de8:	72f0      	lod	A, [Y]
    6dea:	190c      	je	0x6e04 <_FlashBackgroundTest+0xca>
		{
			if ( *(uint16 *) FLASH_CRC_ADDR != u16FlashCRC )
    6dec:	aed8 011a 	cmp	A, 0x11a <_g_i16SupplyVoltage+0x4>
    6df0:	1905      	je	0x6dfc <_FlashBackgroundTest+0xc2>
			{
				u16Result = C_FLASH_CRC_FAILED;
    6df2:	4cd3      	swap	D
    6df4:	48cf      	asl	D, #16
    6df6:	4c0a 0000 	addu	D, #0
    6dfa:	0004      	jmp	0x6e04 <_FlashBackgroundTest+0xca>
			}
			else
			{
				u16Result = C_FLASH_CRC_OK;
    6dfc:	4cd3      	swap	D
    6dfe:	48cf      	asl	D, #16
    6e00:	4c0a 0001 	addu	D, #1
			}
		}
	}

	return ( u16Result );
    6e04:	4c88      	mov	A, DL

} /* End of FlashBackgroundTest() */
    6e06:	5409      	ret	#10

00006e08 <_noinit_section_init>:
 * noinit_section_init
 * MMP151118-2 *
 * ****************************************************************************	*/
void noinit_section_init(void)
{
	g_e8MotorCtrlMode = (uint8) C_MOTOR_CTRL_STOP;
    6e08:	6000      	lod	AL, #0
    6e0a:	41ec      	mov	dp:0xec <__bss_dp_end>, AL
	//g_e8StallDetectorEna = (uint8) C_STALLDET_ALL;								/* Control-flag Stall-detector enabled [WD] */;
	g_u8MotorHoldingCurrEna = FALSE;
    6e0c:	41ef      	mov	dp:0xef <_g_u8MotorHoldingCurrEna>, AL
	g_u16ActualPosition = 32767U;
    6e0e:	72da 7fff 	lod	A, #32767
    6e12:	51f0      	mov	dp:0xf0 <_g_u16ActualPosition>, A
	g_u16TargetPosition = 65535U;
    6e14:	70ff      	lod	A, #-1
    6e16:	51f2      	mov	dp:0xf2 <_g_u16TargetPosition>, A
	g_u8MotorCtrlSpeed = (uint8) C_DEFAULT_MOTOR_SPEED;
    6e18:	6003      	lod	AL, #3
    6e1a:	41f4      	mov	dp:0xf4 <_g_u8MotorCtrlSpeed>, AL
	g_e8MotorStatusMode = (uint8) C_MOTOR_STATUS_STOP;
    6e1c:	6000      	lod	AL, #0
    6e1e:	41ed      	mov	dp:0xed <_g_e8MotorStatusMode>, AL
	g_u16CalibTravel = C_EXV_DEF_TRAVEL;									/* Number of steps between two end-stops */
    6e20:	658e      	lod	YL, dp:0x8e <_g_NvramUser+0x34>
    6e22:	44b6      	lsr	Y, #2
    6e24:	44b6      	lsr	Y, #2
    6e26:	4436      	lsr	Y
    6e28:	f403      	and	Y, #3
    6e2a:	e001      	add	Y, #1
    6e2c:	716c      	lod	A, dp:0x6c <_g_NvramUser+0x12>
    6e2e:	ec00      	cmp	Y, #0
    6e30:	1b03      	jsle	0x6e38 <_noinit_section_init+0x30>
    6e32:	46e9      	mov	Cx, YL
    6e34:	4422      	asl	A
    6e36:	1ffe      	djnz	Cx, 0x6e34 <_noinit_section_init+0x2c>
    6e38:	51f6      	mov	dp:0xf6 <_g_u16CalibTravel>, A

	/* MotorDriver.c variables */
	g_u16ActuatorActPos = 0;
    6e3a:	7000      	lod	A, #0
    6e3c:	51f8      	mov	dp:0xf8 <_g_u16ActuatorActPos>, A
	g_u16ActuatorTgtPos = 0;
    6e3e:	51fa      	mov	dp:0xfa <_g_u16ActuatorTgtPos>, A
    6e40:	5401      	ret

00006e42 <_RteExv2Lin>:
} /* End of noinit_section_init() */

void RteExv2Lin(void)
{
    6e42:	580b      	inc	S, #12

	g_e8CalibrationStep = (uint8)C_CALIB_DONE;
    6e44:	600a      	lod	AL, #10
    6e46:	411d      	mov	dp:0x1d <_g_e8CalibrationStep>, AL

	g_e8EXVStatusInitStat = C_STATUS_INIT_DONE;
    6e48:	6402      	lod	YL, #2
	{
		g_e8EXVStatusInitStat = C_STATUS_NOT_INIT;
	}
	else if(g_e8CalibrationStep == (uint8)C_CALIB_DONE)
	{
		g_e8EXVStatusInitStat = C_STATUS_INIT_DONE;
    6e4a:	46d8 00fd 	mov	0xfd <_g_e8EXVStatusInitStat>, YL
		g_e8EXVStatusInitStat = C_STATUS_INIT_BUSY;
	}

	if(g_e8CalibrationStep == (uint8)C_CALIB_DONE)
	{
		if(g_u8StallOcc == TRUE)
    6e4e:	6128      	lod	AL, dp:0x28 <_g_u8StallOcc>
    6e50:	8c01      	cmp	AL, #1
    6e52:	1d02      	jne	0x6e58 <_RteExv2Lin+0x16>
		{
			g_e8EXVErrorBlock = TRUE;
    6e54:	4118      	mov	dp:0x18 <__data_dp_start>, AL
			g_e8ErrorElectric = (uint8) C_ERR_ELECTRIC_PERM;// Ban,
    6e56:	452d      	mov	dp:0x2d <_g_e8ErrorElectric>, YL
		}
	}

	//TODO need to add the indetermint, ban debug
	if(g_e8ErrorVoltage == (uint8) C_ERR_VOLTAGE_OVER)
    6e58:	612b      	lod	AL, dp:0x2b <_g_e8ErrorVoltage>
    6e5a:	8c02      	cmp	AL, #2
    6e5c:	1d02      	jne	0x6e62 <_RteExv2Lin+0x20>
	{
		g_e8EXVStatusFaultState = C_STATUS_FAULT_OVER_VOLTAGE;
    6e5e:	6001      	lod	AL, #1
    6e60:	0022      	jmp	0x6ea6 <_RteExv2Lin+0x64>
	}
	else if(g_e8ErrorVoltage == (uint8) C_ERR_VOLTAGE_UNDER)
    6e62:	612b      	lod	AL, dp:0x2b <_g_e8ErrorVoltage>
    6e64:	8c01      	cmp	AL, #1
    6e66:	191b      	je	0x6e9e <_RteExv2Lin+0x5c>
	{
		g_e8EXVStatusFaultState = C_STATUS_FAULT_UNDER_VLOTAGE;
	}
	else if((g_e8ErrorCoil == (uint8) C_ERR_SELFTEST_A) || (g_e8ErrorCoil == (uint8) C_ERR_SELFTEST_B))
    6e68:	612c      	lod	AL, dp:0x2c <_g_e8ErrorCoil>
    6e6a:	8cea      	cmp	AL, #-22
    6e6c:	1903      	je	0x6e74 <_RteExv2Lin+0x32>
    6e6e:	612c      	lod	AL, dp:0x2c <_g_e8ErrorCoil>
    6e70:	8ceb      	cmp	AL, #-21
    6e72:	1d02      	jne	0x6e78 <_RteExv2Lin+0x36>
	{
		g_e8EXVStatusFaultState = C_STATUS_FAULT_COIL_SHORT;
    6e74:	6003      	lod	AL, #3
    6e76:	0017      	jmp	0x6ea6 <_RteExv2Lin+0x64>
	}
	else if(g_e8ErrorCoil == (uint8) C_ERR_SELFTEST_C)
    6e78:	612c      	lod	AL, dp:0x2c <_g_e8ErrorCoil>
    6e7a:	8cec      	cmp	AL, #-20
    6e7c:	1d02      	jne	0x6e82 <_RteExv2Lin+0x40>
	{
		g_e8EXVStatusFaultState = C_STATUS_FAULT_COIL_OPEN;
    6e7e:	6004      	lod	AL, #4
    6e80:	0012      	jmp	0x6ea6 <_RteExv2Lin+0x64>
	}
	else if(g_e8ErrorOverTemperature == (uint8)C_ERR_OTEMP_YES)
    6e82:	6126      	lod	AL, dp:0x26 <_g_e8ErrorOverTemperature>
    6e84:	8c01      	cmp	AL, #1
    6e86:	1d02      	jne	0x6e8c <_RteExv2Lin+0x4a>
	{
		g_e8EXVStatusFaultState = C_STATUS_FAULT_OVER_TEMP_SHUTDOWN;
    6e88:	6005      	lod	AL, #5
    6e8a:	000d      	jmp	0x6ea6 <_RteExv2Lin+0x64>
	}
	else if(g_e8EXVErrorBlock == TRUE)
    6e8c:	6118      	lod	AL, dp:0x18 <__data_dp_start>
    6e8e:	8c01      	cmp	AL, #1
    6e90:	1d02      	jne	0x6e96 <_RteExv2Lin+0x54>
	{
		g_e8EXVStatusFaultState = C_STATUS_FAULT_UNEXPECT_STALL;
    6e92:	6006      	lod	AL, #6
    6e94:	0008      	jmp	0x6ea6 <_RteExv2Lin+0x64>
	}
	else if(g_e8WarningOverTemperature == C_WARNING_OTEMP_YES)
    6e96:	611a      	lod	AL, dp:0x1a <_g_e8WarningOverTemperature>
    6e98:	8c01      	cmp	AL, #1
    6e9a:	1d04      	jne	0x6ea4 <_RteExv2Lin+0x62>
	{
		g_e8EXVStatusFaultState = C_STATUS_FAULT_OVER_TEMP_WARNING;
    6e9c:	640a      	lod	YL, #10
    6e9e:	46d8 0101 	mov	0x101 <_g_e8EXVStatusFaultState>, YL
    6ea2:	0003      	jmp	0x6eaa <_RteExv2Lin+0x68>
	}
	else
	{
		g_e8EXVStatusFaultState = C_STATUS_NO_FAULT;
    6ea4:	6000      	lod	AL, #0
    6ea6:	42d8 0101 	mov	0x101 <_g_e8EXVStatusFaultState>, AL
	}

	//if(((g_e8ErrorElectric == (uint8) C_ERR_ELECTRIC_PERM) && (g_e8EXVStatusFaultState != C_STATUS_NO_FAULT)) || ((g_e8CalibrationStep > C_CALIB_NONE) && (g_e8CalibrationStep < C_CALIB_DONE) && ((g_e8ErrorVoltage != C_ERR_VOLTAGE_IN_RANGE) || (g_e8ErrorOverTemperature == (uint8)C_ERR_OTEMP_YES))))//coil open/short/over temp/stall,ov/uv, changed to un-initialized
	if((g_e8ErrorElectric == (uint8) C_ERR_ELECTRIC_PERM) && (g_e8EXVStatusFaultState != C_STATUS_NO_FAULT))//coil open/short/stall, changed to un-initialized
    6eaa:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    6eac:	8c02      	cmp	AL, #2
    6eae:	1d0d      	jne	0x6eca <_RteExv2Lin+0x88>
    6eb0:	62d8 0101 	lod	AL, 0x101 <_g_e8EXVStatusFaultState>
    6eb4:	190a      	je	0x6eca <_RteExv2Lin+0x88>
	{
		g_e8CalibrationStep = C_CALIB_NONE;
    6eb6:	6400      	lod	YL, #0
    6eb8:	451d      	mov	dp:0x1d <_g_e8CalibrationStep>, YL
		g_e8MotorRequest = C_MOTOR_REQUEST_NONE;
    6eba:	452e      	mov	dp:0x2e <_g_e8MotorRequest>, YL
		g_e8DegradedMotorRequest = (uint8) C_MOTOR_REQUEST_NONE;
    6ebc:	4525      	mov	dp:0x25 <_g_e8DegradedMotorRequest>, YL
		g_e8CalibPostMotorRequest = (uint8) C_MOTOR_REQUEST_NONE;
    6ebe:	46d8 0106 	mov	0x106 <_g_e8CalibPostMotorRequest>, YL
		g_u16TargetPosition = g_u16ActualPosition;
    6ec2:	71f0      	lod	A, dp:0xf0 <_g_u16ActualPosition>
    6ec4:	51f2      	mov	dp:0xf2 <_g_u16TargetPosition>, A
		g_u16ActuatorActPos = g_u16ActualPosition;
    6ec6:	51f8      	mov	dp:0xf8 <_g_u16ActuatorActPos>, A
		g_u16ActuatorTgtPos = g_u16TargetPosition;
    6ec8:	51fa      	mov	dp:0xfa <_g_u16ActuatorTgtPos>, A
	}

	if((g_e8EXVStatusInitStat == (uint8)C_STATUS_INIT_BUSY) || (g_e8EXVStatusInitStat == (uint8)C_STATUS_INIT_DONE))
    6eca:	62d8 00fd 	lod	AL, 0xfd <_g_e8EXVStatusInitStat>
    6ece:	420b      	mov	[S-12], AL
    6ed0:	80ff      	add	AL, #-1
    6ed2:	8c01      	cmp	AL, #1
    6ed4:	1a01      	jule	0x6ed8 <_RteExv2Lin+0x96>
    6ed6:	003d      	jmp	0x6f52 <_RteExv2Lin+0x110>
	{
		if(g_u16ActualPosition <= C_EXV_ZERO_POS)
    6ed8:	618e      	lod	AL, dp:0x8e <_g_NvramUser+0x34>
    6eda:	44b2      	lsr	A, #2
    6edc:	44b2      	lsr	A, #2
    6ede:	4432      	lsr	A
    6ee0:	b403      	and	A, #3
    6ee2:	a001      	add	A, #1
    6ee4:	5207      	mov	[S-8], A
    6ee6:	7c64      	lod	X, #100
    6ee8:	ac00      	cmp	A, #0
    6eea:	1b03      	jsle	0x6ef2 <_RteExv2Lin+0xb0>
    6eec:	42e9      	mov	Cx, AL
    6eee:	442e      	asl	X
    6ef0:	1ffe      	djnz	Cx, 0x6eee <_RteExv2Lin+0xac>
    6ef2:	79f0      	lod	Y, dp:0xf0 <_g_u16ActualPosition>
    6ef4:	5a01      	mov	[S-2], Y
    6ef6:	eeee      	cmp	Y, X
    6ef8:	1e02      	jug	0x6efe <_RteExv2Lin+0xbc>
		{
			g_u16EXVStatusCurrentPositon = 0;
    6efa:	7000      	lod	A, #0
    6efc:	0010      	jmp	0x6f1e <_RteExv2Lin+0xdc>
		}
		else if(g_u16ActualPosition >= C_EXV_POSITION_STD + C_EXV_ZERO_POS)
    6efe:	7ada 0120 	lod	Y, #288
    6f02:	7207      	lod	A, [S-8]
    6f04:	ac00      	cmp	A, #0
    6f06:	1b03      	jsle	0x6f0e <_RteExv2Lin+0xcc>
    6f08:	42e9      	mov	Cx, AL
    6f0a:	4426      	asl	Y
    6f0c:	1ffe      	djnz	Cx, 0x6f0a <_RteExv2Lin+0xc8>
    6f0e:	5a09      	mov	[S-10], Y
    6f10:	72e6      	lod	A, Y
    6f12:	a2ee      	add	A, X
    6f14:	7a01      	lod	Y, [S-2]
    6f16:	eee2      	cmp	Y, A
    6f18:	1805      	jc	0x6f24 <_RteExv2Lin+0xe2>
		{
			g_u16EXVStatusCurrentPositon = 0x3FF;
    6f1a:	72da 03ff 	lod	A, #1023
    6f1e:	52d8 00fe 	mov	0xfe <_g_u16EXVStatusCurrentPositon>, A
    6f22:	540d      	ret	#14
		}
		else
		{
			g_u16EXVStatusCurrentPositon = ((uint32)(g_u16ActualPosition - C_EXV_ZERO_POS)*1023+C_EXV_POSITION_STD/2)/C_EXV_POSITION_STD;
    6f24:	7201      	lod	A, [S-2]
    6f26:	aaee      	sub	A, X
    6f28:	4802 03ff 	mulu	D, A, #1023
    6f2c:	7aef      	lod	Y, S
    6f2e:	e0fa      	add	Y, #-6
    6f30:	4c85      	mov	[Y], D
    6f32:	7209      	lod	A, [S-10]
    6f34:	4432      	lsr	A
    6f36:	4cc8      	movu	D, A
    6f38:	4c80      	mov	YA, D
    6f3a:	a205      	add	A, [S-6]
    6f3c:	f203      	adc	Y, [S-4]
    6f3e:	5205      	mov	[S-6], A
    6f40:	5a03      	mov	[S-4], Y
    6f42:	7a09      	lod	Y, [S-10]
    6f44:	4cc9      	movu	D, Y
    6f46:	4c83      	push	D
    6f48:	7209      	lod	A, [S-10]
    6f4a:	7a07      	lod	Y, [S-8]
    6f4c:	16a3      	call	0x6c94 <___udivsi3>
    6f4e:	5c03      	dec	S, #4
    6f50:	07e6      	jmp	0x6f1e <_RteExv2Lin+0xdc>
		}
	}
	else if(g_e8EXVStatusInitStat == (uint8)C_STATUS_NOT_INIT)
    6f52:	620b      	lod	AL, [S-12]
    6f54:	1d03      	jne	0x6f5c <_RteExv2Lin+0x11a>
	{
		g_u16EXVStatusCurrentPositon = 0;
    6f56:	7800      	lod	Y, #0
    6f58:	5ad8 00fe 	mov	0xfe <_g_u16EXVStatusCurrentPositon>, Y
    6f5c:	540d      	ret	#14

00006f5e <_UpdateMotorSpeed>:
}

//In default MLX, update speed during motor start or receive motor speed change command(will not excute other command)
//In updated MLX by Ban, update speed during motor start and receive motor speed change command(doesn't impact other command)
void UpdateMotorSpeed(void)
{
    6f5e:	5809      	inc	S, #10
	uint8 u8MotorSpeedIdx;
	if(g_u8TorqueBoostRequest == 0)//normal torque
    6f60:	62d8 010a 	lod	AL, 0x10a <_g_u8TorqueBoostRequest>
    6f64:	4209      	mov	[S-10], AL
    6f66:	1d0c      	jne	0x6f80 <_UpdateMotorSpeed+0x22>
	{
		g_u8MotorCtrlSpeed = (uint8) C_DEFAULT_MOTOR_SPEED;//speed 1
    6f68:	6003      	lod	AL, #3
    6f6a:	41f4      	mov	dp:0xf4 <_g_u8MotorCtrlSpeed>, AL
		u8MotorSpeedIdx = (g_u8MotorCtrlSpeed & 0x07);
    6f6c:	7003      	lod	A, #3
		g_u8MotorStatusSpeed = u8MotorSpeedIdx;
    6f6e:	411e      	mov	dp:0x1e <__ramfunc_size>, AL
		g_u16MotorSpeedRPS = g_au16MotorSpeedRPS[u8MotorSpeedIdx];
    6f70:	7ad8 028a 	lod	Y, 0x28a <_g_au16MotorSpeedRPS+0x6>
    6f74:	5ad8 026c 	mov	0x26c <_g_u16MotorSpeedRPS>, Y
		g_u16TargetCommutTimerPeriod = g_au16MotorSpeedCommutTimerPeriod[u8MotorSpeedIdx];
    6f78:	7ed8 027a 	lod	X, 0x27a <_g_au16MotorSpeedCommutTimerPeriod+0x6>
    6f7c:	5d54      	mov	dp:0x54 <_g_u16TargetCommutTimerPeriod>, X
    6f7e:	540b      	ret	#12
	}
	else//boost torque, reduce the speed
	{
		g_u8MotorCtrlSpeed = (uint8) C_MOTOR_SPEED_MID_LOW;//Speed 0
    6f80:	6002      	lod	AL, #2
    6f82:	41f4      	mov	dp:0xf4 <_g_u8MotorCtrlSpeed>, AL
		u8MotorSpeedIdx = (g_u8MotorCtrlSpeed & 0x07);
    6f84:	7002      	lod	A, #2
		g_u8MotorStatusSpeed = u8MotorSpeedIdx;
    6f86:	411e      	mov	dp:0x1e <__ramfunc_size>, AL
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    6f88:	7192      	lod	A, dp:0x92 <_g_NvramUser+0x38>
    6f8a:	a990      	sub	A, dp:0x90 <_g_NvramUser+0x36>
    6f8c:	5203      	mov	[S-4], A
    6f8e:	6609      	lod	YL, [S-10]
    6f90:	5cf6      	usex	Y
    6f92:	5a01      	mov	[S-2], Y
    6f94:	7c64      	lod	X, #100
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    6f96:	7201      	lod	A, [S-2]
    6f98:	7a03      	lod	Y, [S-4]
    6f9a:	4821      	mulu	YA, A, Y
    6f9c:	4c63      	divu	YA, X
    6f9e:	4c63      	divu	YA, X
    6fa0:	7ee2      	lod	X, A
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    6fa2:	7192      	lod	A, dp:0x92 <_g_NvramUser+0x38>
    6fa4:	aaee      	sub	A, X
    6fa6:	5207      	mov	[S-8], A
		uint16 u16RPM = NVRAM_SPEED1 - muldivU16_U16byU16byU16((NVRAM_SPEED1 - NVRAM_SPEED0),g_u8TorqueBoostRequest,100);
		uint32 u32Temp = divU32_U32byU16( (TIMER_CLOCK * 60), g_u16MotorMicroStepsPerMechRotation);
    6fa8:	7ad8 0270 	lod	Y, 0x270 <_g_u16MotorMicroStepsPerMechRotation>
    6fac:	5adf      	push	Y
    6fae:	4ce2 2c40 	mov	YA, #105000000
    6fb2:	0642 
    6fb4:	1642      	call	0x6c3a <_divU32_U32byU16>
    6fb6:	4cc0      	mov	D, YA
    6fb8:	5c01      	dec	S, #2
    6fba:	7207      	lod	A, [S-8]
    6fbc:	a01e      	add	A, #30
    6fbe:	4cf2      	usex	YA
    6fc0:	7c3c      	lod	X, #60
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    6fc2:	4c63      	divu	YA, X
    6fc4:	4c63      	divu	YA, X
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    6fc6:	52d8 026c 	mov	0x26c <_g_u16MotorSpeedRPS>, A
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    6fca:	4c80      	mov	YA, D
    6fcc:	7e07      	lod	X, [S-8]
    6fce:	4c63      	divu	YA, X
    6fd0:	4c63      	divu	YA, X
    6fd2:	5201      	mov	[S-2], A
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    6fd4:	a0ff      	add	A, #-1
    6fd6:	5154      	mov	dp:0x54 <_g_u16TargetCommutTimerPeriod>, A
    6fd8:	540b      	ret	#12

00006fda <_main>:
 *	S. (Optional) Determine actuator position
 *	T. (Watch-dog Reset) Start actuator (if needed)
 *	U. Main application loop
 * ****************************************************************************	*/
int16 main( void)
{
    6fda:	5815      	inc	S, #22
	/* *************************************************** */
	/* *** A. Initialise background schedule (Task-ID) *** */
	/* *************************************************** */
	uint8 u8BackgroundSchedulerTaskID = 0;
    6fdc:	7000      	lod	A, #0
    6fde:	5215      	mov	[S-22], A

#if _SUPPORT_CRASH_RECOVERY
	/* **************************************************************** */
	/* *** B. (Optional) Check crash-recovery (fatal-error handler) *** */
	/* **************************************************************** */
	if ( bistResetInfo == C_CHIP_STATE_FATAL_CRASH_RECOVERY )
    6fe0:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    6fe4:	aeda 1872 	cmp	A, #6258
    6fe8:	1d0d      	jne	0x7004 <_main+0x2a>
	{
#if LIN_COMM
		g_u8LinInFrameBufState = C_LIN_IN_FREE;
    6fea:	6400      	lod	YL, #0
    6fec:	46d8 011e 	mov	0x11e <_g_u8LinInFrameBufState>, YL
#endif /* LIN_COMM */
		if ( (g_e8StallDetectorEna != (uint8) C_STALLDET_NONE) && ((g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING) != 0)) /*lint !e845 */
    6ff0:	61ee      	lod	AL, dp:0xee <_g_e8StallDetectorEna>
    6ff2:	1d01      	jne	0x6ff6 <_main+0x1c>
    6ff4:	00c9      	jmp	0x7188 <_main+0x1ae>
    6ff6:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    6ff8:	b401      	and	A, #1
    6ffa:	1d01      	jne	0x6ffe <_main+0x24>
    6ffc:	00c5      	jmp	0x7188 <_main+0x1ae>
		{
			/* Actuator is active; clear motor-raw-current moving-average buffer */
			MotorDriverCurrentMeasureInit();
    6ffe:	82db 8ece 	callf	0x8ece <_MotorDriverCurrentMeasureInit>
    7002:	00c2      	jmp	0x7188 <_main+0x1ae>
#if WATCHDOG == DISABLED
		WD_CTRL = 0;															/* Disable digital Watch-dog */
		AWD_CTRL = 0x8000;														/* Disable analogue Watch-dog */
#endif /* WATCHDOG == DISABLED */
#if WATCHDOG == ENABLED
		WD_T = WatchDog_PeriodOf100ms;											/* Initialise the (Digital) watch-dog comparator to 100ms */
    7004:	60c3      	lod	AL, #-61
    7006:	4282      	mov	io:0x2 <_LinCmnd>, AL
		WD_CTRL = WatchDog_ModeTimer;											/* Define the mode and start the watchdog */
    7008:	6012      	lod	AL, #18
    700a:	4283      	mov	io:0x3 <_LinCmnd+0x1>, AL
 *
 *****************************************************************************
 */
__MLX_TEXT__  static INLINE void awdg_init (uint8 prescaler, uint8 timer)
{
    AWD_CTRL = ((uint16)(prescaler & 3) << 8) | timer;
    700c:	72da 019c 	lod	A, #412
    7010:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
		awdg_init( AWDG_DIV_16, C_AWD_PERIOD_250MS);
		/* Maximum Watch-dog period */
#endif /* WATCHDOG == ENABLED */
#if MCU_ASSP_MODE
		ANA_OUTL |= ASSP;														/* ASSP-mode */
    7012:	72d8 28d4 	lod	A, 0x28d4 <__io__+0xd4>
    7016:	a401      	or	A, #1
    7018:	52d8 28d4 	mov	0x28d4 <__io__+0xd4>, A

#if _SUPPORT_TESTMODE_OFF
		/* ******************************************** */
		/* *** D. (Optional) Chip test-mode disable *** */
		/* ******************************************** */
		CONTROL |= OUTA_WE;														/* Grant access to ANA_OUTx registers */
    701c:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    7020:	8408      	or	AL, #8
    7022:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
		ANA_OUTA |= TEST_MODE_DIS;												/* Disable test-mode */
    7026:	72d8 201c 	lod	A, 0x201c <__ep__+0x101c>
    702a:	a6da 0080 	or	A, #128
    702e:	52d8 201c 	mov	0x201c <__ep__+0x101c>, A
		CONTROL &= ~OUTA_WE;
    7032:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    7036:	94f7      	and	AL, #-9
    7038:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
#endif /* MCU_ASSP_MODE */
#endif /* _DEBUG_SPI */
#endif /* _DEBUG */

		/* Application mode */
		SET_PRIORITY(0);
    703c:	54f0      	mov	UPr, #0
		g_e8MotorStatusMode = (uint8) C_MOTOR_STATUS_INIT;
    703e:	6002      	lod	AL, #2
    7040:	41ed      	mov	dp:0xed <_g_e8MotorStatusMode>, AL
		/* ******************************* */
		/* *** E. Load user NVRAM page *** */
		/* ******************************* */
		NVRAM_LoadUserPage();													/* Load User NVRAM storage parameters */
    7042:	82db 98d6 	callf	0x98d6 <_NVRAM_LoadUserPage>

#if USE_MULTI_PURPOSE_BUFFER
		g_MPBuf.u8Type = (uint8) C_MP_BUF_NONE;
    7046:	6400      	lod	YL, #0
    7048:	46d8 0154 	mov	0x154 <_g_MPBuf>, YL
		g_MPBuf.u8Usage = (uint8) C_MP_BUF_FREE;
    704c:	46d8 0155 	mov	0x155 <_g_MPBuf+0x1>, YL
#endif /* USE_MULTI_PURPOSE_BUFFER */

		if ( bistResetInfo != C_CHIP_STATE_WATCHDOG_RESET )						/* MMP151118 - Begin */
    7050:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    7054:	aeda 5c92 	cmp	A, #23698
    7058:	1901      	je	0x705c <_main+0x82>
		{
			noinit_section_init();
    705a:	16d6      	call	0x6e08 <_noinit_section_init>
		}																		/* MMP151118 - End */
		g_e8StallDetectorEna = C_STALLDET_NONE;
    705c:	6000      	lod	AL, #0
    705e:	41ee      	mov	dp:0xee <_g_e8StallDetectorEna>, AL
		if ( g_NvramUser.StallDetectorEna )
    7060:	616a      	lod	AL, dp:0x6a <_g_NvramUser+0x10>
    7062:	4213      	mov	[S-20], AL
    7064:	44b0      	lsr	AL, #2
    7066:	4430      	lsr	AL
    7068:	b401      	and	A, #1
    706a:	1902      	je	0x7070 <_main+0x96>
		{
#if _SUPPORT_STALLDET_H
			g_e8StallDetectorEna |= C_STALLDET_H;								/* Control-flag Stall-detector "H" and "A" enabled */
#else  /* _SUPPORT_STALLDET_H */
			g_e8StallDetectorEna |= C_STALLDET_A;								/* Control-flag Stall-detector "A" enabled */
    706c:	6001      	lod	AL, #1
    706e:	41ee      	mov	dp:0xee <_g_e8StallDetectorEna>, AL
#endif /* _SUPPORT_STALLDET_H */
		}
		if ( NVRAM_STALL_O )
    7070:	61c9      	lod	AL, dp:0xc9 <__bss_dp_size+0x19>
    7072:	44b2      	lsr	A, #2
    7074:	44b2      	lsr	A, #2
    7076:	44b2      	lsr	A, #2
    7078:	b401      	and	A, #1
    707a:	1903      	je	0x7082 <_main+0xa8>
		{
			g_e8StallDetectorEna |= C_STALLDET_O;								/* Control-flag Stall-detector "O" enabled */
    707c:	61ee      	lod	AL, dp:0xee <_g_e8StallDetectorEna>
    707e:	8402      	or	AL, #2
    7080:	41ee      	mov	dp:0xee <_g_e8StallDetectorEna>, AL
		}

		//g_e8StallDetectorEna = C_STALLDET_NONE;//Ban for GM CV, stall O is enabled and not programmable. TODO
		g_u8MotorHoldingCurrEna = g_NvramUser.MotorHoldingCurrentEna;			/* Control-flag motor Holding-current enabled */
    7082:	6213      	lod	AL, [S-20]
    7084:	44b0      	lsr	AL, #2
    7086:	44b0      	lsr	AL, #2
    7088:	b401      	and	A, #1
    708a:	41ef      	mov	dp:0xef <_g_u8MotorHoldingCurrEna>, AL

		/* ********************************************** */
		/* *** F. Initialise Error-logging management *** */
		/* ********************************************** */
		ErrorLogInit();
    708c:	82db 89ce 	callf	0x89ce <_ErrorLogInit>

		/* Log Watch-dog reset */
		if ( bistResetInfo != C_CHIP_STATE_LIN_CMD_RESET )						/* LIN-command chip reset use WD; No need to log */
    7090:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    7094:	aeda 3072 	cmp	A, #12402
    7098:	1918      	je	0x70ca <_main+0xf0>
		{
			if ( (CONTROL & WD_BOOT) || (AWD_CTRL & AWD_RST) )
    709a:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    709e:	8c00      	cmp	AL, #0
    70a0:	1a83      	jsl	0x70a8 <_main+0xce>
    70a2:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    70a4:	ac00      	cmp	A, #0
    70a6:	1e91      	jsge	0x70ca <_main+0xf0>
			{
				if ( CONTROL & WD_BOOT )
    70a8:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    70ac:	8c00      	cmp	AL, #0
    70ae:	1e89      	jsge	0x70c2 <_main+0xe8>
				{
					if ( AWD_CTRL & AWD_RST )
    70b0:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    70b2:	ac00      	cmp	A, #0
    70b4:	1e83      	jsge	0x70bc <_main+0xe2>
					{
						SetLastError( (uint8) C_ERR_WD_AWD_RST);				/* Both Analogue & Digital Watch-dog reset */
    70b6:	72da 00f3 	lod	A, #243
    70ba:	0005      	jmp	0x70c6 <_main+0xec>
					}
					else
					{
						SetLastError( (uint8) C_ERR_WD_RST);					/* Digital Watch-dog reset */
    70bc:	72da 00f1 	lod	A, #241
    70c0:	0002      	jmp	0x70c6 <_main+0xec>
					}
				}
				else
				{
					SetLastError( (uint8) C_ERR_AWD_RST);						/* Analogue Watch-dog reset */
    70c2:	72da 00f2 	lod	A, #242
    70c6:	82db 89f6 	callf	0x89f6 <_SetLastError>
		}

		/* ******************************************* */
		/* *** G. Initialise chip (H/W) Diagnostic *** */
		/* ******************************************* */
		DiagnosticsInit();														/* Initialise Diagnostic */
    70ca:	82db 88ee 	callf	0x88ee <_DiagnosticsInit>

		/* ************************* */
		/* *** H. Initialise ADC *** */
		/* ************************* */
		ADC_Init();																/* Initialise ADC */
    70ce:	82db 856c 	callf	0x856c <_ADC_Init>

		/* ********************************** */
		/* *** I. Initialise Motor-driver *** */
		/* ********************************** */
		MotorDriverInit();														/* Initialise Motor-Driver */
    70d2:	82db 8ab2 	callf	0x8ab2 <_MotorDriverInit>

		/* *************************************** */
		/* *** J. Initialise rewind management *** */
		/* *************************************** */
#if _SUPPORT_WD_RST_RECOVERY
		if ( (bistResetInfo != C_CHIP_STATE_WATCHDOG_RESET) && (NVRAM_RESTALL_POR != FALSE) && (NVRAM_REWIND_STEPS != 0) )
    70d6:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    70da:	aeda 5c92 	cmp	A, #23698
    70de:	1907      	je	0x70ee <_main+0x114>
    70e0:	61a5      	lod	AL, dp:0xa5 <_g_NvramUser+0x4b>
    70e2:	8c00      	cmp	AL, #0
    70e4:	1e84      	jsge	0x70ee <_main+0x114>
    70e6:	61c2      	lod	AL, dp:0xc2 <__bss_dp_size+0x12>
    70e8:	1902      	je	0x70ee <_main+0x114>
#else  /* _SUPPORT_WD_RST_RECOVERY */
			if ( (NVRAM_RESTALL_POR != FALSE) && (NVRAM_REWIND_STEPS != 0) )
#endif /* _SUPPORT_WD_RST_RECOVERY */
			{
				g_u8RewindFlags = (uint8) (C_REWIND_STALL_DETECT | C_REWIND_DIRECTION_AUTO);/* After POR: Enable Rewind and set auto-direction */
    70ea:	6006      	lod	AL, #6
    70ec:	4124      	mov	dp:0x24 <__data_dp_size>, AL
			}

		SET_PRIORITY(7);
    70ee:	54f7      	mov	UPr, #7

		/* ********************************* */
		/* *** K. Motor-driver self-test *** */
		/* ********************************* */
#if _SUPPORT_WD_RST_RECOVERY
		if ( (bistResetInfo != C_CHIP_STATE_WATCHDOG_RESET) && (bistResetInfo != C_CHIP_STATE_LIN_CMD_RESET) )
    70f0:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    70f4:	aeda 5c92 	cmp	A, #23698
    70f8:	190a      	je	0x710e <_main+0x134>
    70fa:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    70fe:	aeda 3072 	cmp	A, #12402
    7102:	1905      	je	0x710e <_main+0x134>
#else  /* _SUPPORT_WD_RST_RECOVERY */
			if ( ((CONTROL & WD_BOOT) == 0) && ((AWD_CTRL & AWD_RST) == 0) && (bistResetInfo != C_CHIP_STATE_LIN_CMD_RESET) )
#endif /* _SUPPORT_WD_RST_RECOVERY */
			{
#if (_SUPPORT_MOTOR_SELFTEST != FALSE)
				g_e8MotorStatusMode = (uint8) C_MOTOR_STATUS_SELFTEST;
    7104:	6004      	lod	AL, #4
    7106:	41ed      	mov	dp:0xed <_g_e8MotorStatusMode>, AL
				MotorDriverSelfTest();												/* Self-test Motor-Driver */
    7108:	82db 8ce4 	callf	0x8ce4 <_MotorDriverSelfTest>
    710c:	0007      	jmp	0x711c <_main+0x142>
#endif /* (_SUPPORT_MOTOR_SELFTEST != FALSE) */
			}
#if _SUPPORT_WD_RST_RECOVERY
			else if ( bistResetInfo == C_CHIP_STATE_WATCHDOG_RESET )				/* MMP130626-11 */
    710e:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    7112:	aeda 5c92 	cmp	A, #23698
    7116:	1d02      	jne	0x711c <_main+0x142>
			{
				g_u8ChipResetOcc = FALSE;											/* Clear chip-reset flag before LIN initialisation */
    7118:	6400      	lod	YL, #0
    711a:	4529      	mov	dp:0x29 <_g_u8ChipResetOcc>, YL
			}
#endif /* _SUPPORT_WD_RST_RECOVERY */

		g_e8MotorStatusMode = (uint8) C_MOTOR_STATUS_INIT;
    711c:	6002      	lod	AL, #2
    711e:	41ed      	mov	dp:0xed <_g_e8MotorStatusMode>, AL

		/* ********************************* */
		/* *** L. Initialise PID-Control *** */
		/* ********************************* */
		PID_Init();																/* PID Control initialisation */
    7120:	82db 9ca6 	callf	0x9ca6 <_PID_Init>

		/* *************************************** */
		/* *** M. Initialise (Task) Core Timer *** */
		/* *************************************** */
		Timer_Init();															/* Initialise (Core) Timer */
    7124:	82db a018 	callf	0xa018 <_Timer_Init>

		g_e8MotorStatusMode = (uint8) C_MOTOR_STATUS_STOP;
    7128:	6000      	lod	AL, #0
    712a:	41ed      	mov	dp:0xed <_g_e8MotorStatusMode>, AL
#if LIN_COMM
		/* *************************************** */
		/* *** O. Initialise LIN-communication *** */
		/* *************************************** */
#if _SUPPORT_WD_RST_RECOVERY
		if ( bistResetInfo == C_CHIP_STATE_WATCHDOG_RESET )
    712c:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    7130:	aeda 5c92 	cmp	A, #23698
    7134:	1d02      	jne	0x713a <_main+0x160>
		{
			/* Do not change actual and target position */
			LIN_Init( TRUE);													/* Initialise LIN communication interface */
    7136:	7001      	lod	A, #1
    7138:	0001      	jmp	0x713c <_main+0x162>
		}
		else
#endif /* _SUPPORT_WD_RST_RECOVERY */
		{
			LIN_Init( FALSE);													/* Initialise LIN communication interface */
    713a:	7000      	lod	A, #0
    713c:	138c      	call	0x7856 <_LIN_Init>
		}

		/* Check chip-state for LIN-command RESET, to setup diagnostic-response */
		if ( bistResetInfo == C_CHIP_STATE_LIN_CMD_RESET )
    713e:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    7142:	aeda 3072 	cmp	A, #12402
    7146:	1d05      	jne	0x7152 <_main+0x178>
		{
#if (((LINPROT & LINXX) == LIN2X) && _SUPPORT_MLX_DEBUG_MODE)
			RfrDiagReset();														/* Prepare a diagnostics response reply */
#endif /* (((LINPROT & LINXX) == LIN2X) && _SUPPORT_MLX_DEBUG_MODE) */
#if ((LINPROT & LINXX) == LIN2J)
			RfrDiagReset();														/* Prepare a diagnostics response reply */
    7148:	82db 84d4 	callf	0x84d4 <_RfrDiagReset>
#endif /* ((LINPROT & LINXX) == LIN2J) */
			bistResetInfo = C_CHIP_STATE_COLD_START;
    714c:	7800      	lod	Y, #0
    714e:	5ad8 0338 	mov	0x338 <_bistResetInfo>, Y
		}
#endif /* LIN_COMM */

#if _SUPPORT_WD_RST_RECOVERY
		if ( bistResetInfo != C_CHIP_STATE_WATCHDOG_RESET )
    7152:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    7156:	aeda 5c92 	cmp	A, #23698
    715a:	1904      	je	0x7164 <_main+0x18a>
#endif /* _SUPPORT_WD_RST_RECOVERY */
		{
			g_u16ActuatorActPos = g_u16ActualPosition;							/* Initialise the Actuator positions too */
    715c:	71f0      	lod	A, dp:0xf0 <_g_u16ActualPosition>
    715e:	51f8      	mov	dp:0xf8 <_g_u16ActuatorActPos>, A
			g_u16ActuatorTgtPos = g_u16TargetPosition;
    7160:	71f2      	lod	A, dp:0xf2 <_g_u16TargetPosition>
    7162:	51fa      	mov	dp:0xfa <_g_u16ActuatorTgtPos>, A
		}

		/* **************************************************************** */
		/* *** Q. Perform an initial supply and temperature measurement *** */
		/* **************************************************************** */
		MeasureVsupplyAndTemperature();
    7164:	82db 8756 	callf	0x8756 <_MeasureVsupplyAndTemperature>
		GetChipTemperature( TRUE);												/* MMP131020-1 */;
    7168:	7001      	lod	A, #1
    716a:	82db 867e 	callf	0x867e <_GetChipTemperature>

		/* ********************************************** */
		/* *** R. Stop any motor activity immediately *** */
		/* ********************************************** */
		MotorDriverStop( (uint16) C_STOP_IMMEDIATE);							/* Start-up: Energyce coils if needed */
    716e:	7001      	lod	A, #1
    7170:	82db 9246 	callf	0x9246 <_MotorDriverStop>

#if _SUPPORT_WD_RST_RECOVERY
		/* ****************************************************** */
		/* *** T. (Watch-dog Reset) Start actuator (if needed) *** */
		/* ****************************************************** */
		if ( bistResetInfo == C_CHIP_STATE_WATCHDOG_RESET )
    7174:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    7178:	aeda 5c92 	cmp	A, #23698
    717c:	1d05      	jne	0x7188 <_main+0x1ae>
		{
			if ( g_u16ActuatorActPos != g_u16ActuatorTgtPos )
    717e:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    7180:	adfa      	cmp	A, dp:0xfa <_g_u16ActuatorTgtPos>
    7182:	1902      	je	0x7188 <_main+0x1ae>
			{
				g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_START;
    7184:	6003      	lod	AL, #3
    7186:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
		}
#endif /* _SUPPORT_WD_RST_RECOVERY */
	}

#if _SUPPORT_CRASH_RECOVERY
	bistResetInfo = C_CHIP_STATE_FATAL_RECOVER_ENA;							/* Enable Fatal crash recovery */
    7188:	7ada 1a45 	lod	Y, #6725
    718c:	5ad8 0338 	mov	0x338 <_bistResetInfo>, Y
 */
__MLX_TEXT__  static INLINE void awdg_restart (void)
{
    uint16 temp;    /* use temp variable as a workaround for compiler issue [MLXCOMP-17] */

    temp = AWD_CTRL;
    7190:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    AWD_CTRL = temp;
    7192:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
{
    awdg_restart();

    /* Request [PLTF-626]: Acknowledge Digital Watchdog
     */
    if ((WD_CTRL & WD_MODE) != 0) {     /* if digital watchdog is enabled .. */
    7194:	6283      	lod	AL, io:0x3 <_LinCmnd+0x1>
    7196:	b430      	and	A, #48
    7198:	1902      	je	0x719e <_main+0x1c4>
        WD_T = 0;                       /* .. acknowledge the watchdog */
    719a:	6000      	lod	AL, #0
    719c:	4282      	mov	io:0x2 <_LinCmnd>, AL

		/* ********************************* */
		/* *** c. LIN(-IN) communication *** */
		/* ********************************* */
#if LIN_COMM
		if ( g_u8LinInFrameBufState != C_LIN_IN_FREE )
    719e:	62d8 011e 	lod	AL, 0x11e <_g_u8LinInFrameBufState>
    71a2:	1901      	je	0x71a6 <_main+0x1cc>
		{
			/* LIN message buffer filled */
			HandleLinInMsg();
    71a4:	13f1      	call	0x7988 <_HandleLinInMsg>

		/* ******************************* */
		/* *** d. Motor Driver current *** */
		/* ******************************* */
		/* Calculate Current (1000LSB/A) [mA] */
		if ( ((g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING) != 0) || (g_u8MotorHoldingCurrState != FALSE) )
    71a6:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    71a8:	b401      	and	A, #1
    71aa:	1d03      	jne	0x71b2 <_main+0x1d8>
    71ac:	62d8 013e 	lod	AL, 0x13e <_g_u8MotorHoldingCurrState>
    71b0:	191a      	je	0x71e6 <_main+0x20c>
    71b2:	82db 873a 	callf	0x873a <_GetMotorDriverCurrent>
    71b6:	794e      	lod	Y, dp:0x4e <_g_u16CorrectionRatio>
    71b8:	7eda 5760 	lod	X, #22368
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    71bc:	4821      	mulu	YA, A, Y
    71be:	4c63      	divu	YA, X
    71c0:	4c63      	divu	YA, X
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    71c2:	52d8 0112 	mov	0x112 <_g_i16Current>, A
		{
			/* Average current = unfiltered_current * Motor_PWM_DutyCycle */
			g_i16Current = (int16) muldivU16_U16byU16byU16( (uint16) GetMotorDriverCurrent(), g_u16CorrectionRatio, (PWM_REG_PERIOD << (4 + PWM_PRESCALER_N)));

			if ( (g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING) == 0 )
    71c6:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    71c8:	b401      	and	A, #1
    71ca:	1d17      	jne	0x71fa <_main+0x220>
			{
				/* Motor holding mode: Update motor-current LPF for PID-control */
				g_u16MotorCurrentLPFx64 = (g_u16MotorCurrentLPFx64 - ((g_u16MotorCurrentLPFx64 + 16) >> 4)) + (g_i16Current << 2);
    71cc:	7158      	lod	A, dp:0x58 <_g_u16MotorCurrentLPFx64>
    71ce:	7ae2      	lod	Y, A
    71d0:	e010      	add	Y, #16
    71d2:	44b6      	lsr	Y, #2
    71d4:	44b6      	lsr	Y, #2
    71d6:	aae6      	sub	A, Y
    71d8:	7ad8 0112 	lod	Y, 0x112 <_g_i16Current>
    71dc:	44a6      	asl	Y, #2
    71de:	a2e6      	add	A, Y
    71e0:	5158      	mov	dp:0x58 <_g_u16MotorCurrentLPFx64>, A
#if (C_MOVAVG_SSZ < 6)
				g_u16MotorCurrentMovAvgxN = ((g_u16MotorCurrentLPFx64 + 2) >> (6 - C_MOVAVG_SSZ));	/* -=#=- Just for debug feedback */
#endif /* (C_MOVAVG_SSZ < 6 ) */
#if (C_MOVAVG_SSZ == 6 )
				g_u16MotorCurrentMovAvgxN = g_u16MotorCurrentLPFx64;			/* -=#=- Just for debug feedback */
    71e2:	5156      	mov	dp:0x56 <__data_size>, A
    71e4:	000a      	jmp	0x71fa <_main+0x220>
#endif /* (C_MOVAVG_SSZ == 6 ) */
			}
		}
		else if ( (g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING) == 0 )
    71e6:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    71e8:	b401      	and	A, #1
    71ea:	1d07      	jne	0x71fa <_main+0x220>
#else  /* LIN_COMM */
			if ( (g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING) == 0 )
#endif /* LIN_COMM */
			{
				g_i16Current = 0;
    71ec:	7800      	lod	Y, #0
    71ee:	5ad8 0112 	mov	0x112 <_g_i16Current>, Y
				g_u16MotorCurrentLPFx64 = 0;
    71f2:	5958      	mov	dp:0x58 <_g_u16MotorCurrentLPFx64>, Y
				g_u16MotorCurrentMovAvgxN = 0;
    71f4:	5956      	mov	dp:0x56 <__data_size>, Y
				MeasureVsupplyAndTemperature();										/* Perform Vbat/Temperature measurement incase motor is stopped */
    71f6:	82db 8756 	callf	0x8756 <_MeasureVsupplyAndTemperature>

		/* ************************************************************** */
		/* *** e. Chip and Motor Driver voltage (degraded-mode check) *** */
		/* ************************************************************** */
		/* Calculate Voltage (100LSB/V) [10mV] */
		GetVsupply();
    71fa:	82db 85fe 	callf	0x85fe <_GetVsupply>
		GetVsupplyMotor();
    71fe:	82db 863a 	callf	0x863a <_GetVsupplyMotor>
		if ( g_i16MotorVoltage < (NVRAM_APPL_UVOLT - C_VOLTAGE_HYS) )//under voltage is 9-0.5=8.5V accroding to FMEA, set in NVRAM
    7202:	61ac      	lod	AL, dp:0xac <_g_NvramUser+0x52>
    7204:	5cf2      	usex	A
    7206:	4872 0019 	muls	A, A, #25
    720a:	4472      	asr	A
    720c:	5211      	mov	[S-18], A
    720e:	7ae2      	lod	Y, A
    7210:	e0ce      	add	Y, #-50
    7212:	7120      	lod	A, dp:0x20 <_g_i16MotorVoltage>
    7214:	aee6      	cmp	A, Y
    7216:	1e94      	jsge	0x7240 <_main+0x266>
		{
			/* First time application under-voltage error */					/* MMP150128-1 - Begin */
			if ( (l_e8ErrorDebounceFilter & (uint8) C_DEBFLT_ERR_UV) == 0x00 )
    7218:	66d8 0109 	lod	YL, 0x109 <_l_e8ErrorDebounceFilter>
    721c:	72e6      	lod	A, Y
    721e:	b404      	and	A, #4
    7220:	1d03      	jne	0x7228 <_main+0x24e>
			{
				/* Need twice a under-voltage detection, to avoid ESD-pulses disturbance will cause degraded mode entering */
				l_e8ErrorDebounceFilter |= (uint8) C_DEBFLT_ERR_UV;
    7222:	62e8      	lod	AL, YL
    7224:	8404      	or	AL, #4
    7226:	003c      	jmp	0x72a0 <_main+0x2c6>
			}
			else
			{
				if ( g_e8ErrorVoltage != (uint8) C_ERR_VOLTAGE_UNDER )
    7228:	612b      	lod	AL, dp:0x2b <_g_e8ErrorVoltage>
    722a:	8c01      	cmp	AL, #1
    722c:	1d01      	jne	0x7230 <_main+0x256>
    722e:	003a      	jmp	0x72a4 <_main+0x2ca>
				{
					g_e8ErrorVoltage = (uint8) C_ERR_VOLTAGE_UNDER;				/* 9.5.3.4 */
    7230:	6001      	lod	AL, #1
    7232:	412b      	mov	dp:0x2b <_g_e8ErrorVoltage>, AL
					g_e8ErrorVoltageComm = g_e8ErrorVoltage;
    7234:	612b      	lod	AL, dp:0x2b <_g_e8ErrorVoltage>
    7236:	42d8 010b 	mov	0x10b <_g_e8ErrorVoltageComm>, AL
					SetLastError( (uint8) C_ERR_APPL_UNDER_VOLT);
    723a:	72da 00a2 	lod	A, #162
    723e:	001d      	jmp	0x727a <_main+0x2a0>
#if (_SUPPORT_DEGRADE_DELAY != FALSE) && (LINPROT == LIN2X_ACT44)
				u16DegradeDelay = 0xFFFF;										/* Disable degrade delay timer */
#endif /* (_SUPPORT_DEGRADE_DELAY != FALSE) && (LINPROT == LIN2X_ACT44) */
			}
		}
		else if ( g_i16MotorVoltage > (NVRAM_APPL_OVOLT + C_VOLTAGE_HYS) )//Over voltage is 19+0.5=19.5V, according to FMEA, set in NVRAM
    7240:	61ad      	lod	AL, dp:0xad <_g_NvramUser+0x53>
    7242:	5cf2      	usex	A
    7244:	4872 0019 	muls	A, A, #25
    7248:	7ee2      	lod	X, A
    724a:	447e      	asr	X
    724c:	7aee      	lod	Y, X
    724e:	e032      	add	Y, #50
    7250:	7120      	lod	A, dp:0x20 <_g_i16MotorVoltage>
    7252:	aee6      	cmp	A, Y
    7254:	1b15      	jsle	0x7280 <_main+0x2a6>
		{
			/* First time application over-voltage error */
			if ( (l_e8ErrorDebounceFilter & C_DEBFLT_ERR_OV) == 0x00 )
    7256:	66d8 0109 	lod	YL, 0x109 <_l_e8ErrorDebounceFilter>
    725a:	72e6      	lod	A, Y
    725c:	b408      	and	A, #8
    725e:	1d03      	jne	0x7266 <_main+0x28c>
			{
				/* Need twice a over-voltage detection, to avoid ESD-pulses disturbance will cause degraded mode entering */
				l_e8ErrorDebounceFilter |= (uint8) C_DEBFLT_ERR_OV;
    7260:	62e8      	lod	AL, YL
    7262:	8408      	or	AL, #8
    7264:	001d      	jmp	0x72a0 <_main+0x2c6>
			}
			else
			{
				if ( g_e8ErrorVoltage != (uint8) C_ERR_VOLTAGE_OVER )
    7266:	612b      	lod	AL, dp:0x2b <_g_e8ErrorVoltage>
    7268:	8c02      	cmp	AL, #2
    726a:	191c      	je	0x72a4 <_main+0x2ca>
				{
					g_e8ErrorVoltage = (uint8) C_ERR_VOLTAGE_OVER;				/* 9.5.3.4 */
    726c:	6002      	lod	AL, #2
    726e:	412b      	mov	dp:0x2b <_g_e8ErrorVoltage>, AL
					g_e8ErrorVoltageComm = g_e8ErrorVoltage;
    7270:	612b      	lod	AL, dp:0x2b <_g_e8ErrorVoltage>
    7272:	42d8 010b 	mov	0x10b <_g_e8ErrorVoltageComm>, AL
					SetLastError( (uint8) C_ERR_APPL_OVER_VOLT);
    7276:	72da 00a3 	lod	A, #163
    727a:	82db 89f6 	callf	0x89f6 <_SetLastError>
    727e:	0012      	jmp	0x72a4 <_main+0x2ca>
				u16DegradeDelay = 0xFFFF;										/* Disable degrade delay timer */
#endif /* (_SUPPORT_DEGRADE_DELAY != FALSE) && (LINPROT == LIN2X_ACT44) */
			}
		}
		//else if ( (g_i16MotorVoltage >= (NVRAM_APPL_UVOLT + C_VOLTAGE_HYS)) && (g_i16SupplyVoltage <= (NVRAM_APPL_OVOLT - C_VOLTAGE_HYS)) )
		else if ( (g_i16MotorVoltage >= (NVRAM_APPL_UVOLT - 10)) && (g_i16SupplyVoltage <= (NVRAM_APPL_OVOLT + 10)) )//Accroding to FMEA, set the voltage to 8.9V & 19.1V
    7280:	7a11      	lod	Y, [S-18]
    7282:	e0f6      	add	Y, #-10
    7284:	7120      	lod	A, dp:0x20 <_g_i16MotorVoltage>
    7286:	aee6      	cmp	A, Y
    7288:	1a8d      	jsl	0x72a4 <_main+0x2ca>
    728a:	7aee      	lod	Y, X
    728c:	e00a      	add	Y, #10
    728e:	72d8 0116 	lod	A, 0x116 <_g_i16SupplyVoltage>
    7292:	aee6      	cmp	A, Y
    7294:	1f07      	jsg	0x72a4 <_main+0x2ca>
					g_e8ErrorVoltage = (uint8) C_ERR_VOLTAGE_IN_RANGE;			/* Signal voltage-in range */
				}
			}
			l_e8ErrorDebounceFilter &= (uint8) ~(C_DEBFLT_ERR_UV | C_DEBFLT_ERR_OV);
#else  /* (_SUPPORT_DEGRADE_DELAY != FALSE) && (LINPROT == LIN2X_ACT44) */
			g_e8ErrorVoltage = (uint8) C_ERR_VOLTAGE_IN_RANGE;
    7296:	6000      	lod	AL, #0
    7298:	412b      	mov	dp:0x2b <_g_e8ErrorVoltage>, AL
			l_e8ErrorDebounceFilter &= (uint8) ~(C_DEBFLT_ERR_UV | C_DEBFLT_ERR_OV);
    729a:	62d8 0109 	lod	AL, 0x109 <_l_e8ErrorDebounceFilter>
    729e:	94f3      	and	AL, #-13
    72a0:	42d8 0109 	mov	0x109 <_l_e8ErrorDebounceFilter>, AL
#endif /* (_SUPPORT_DEGRADE_DELAY != FALSE) && (LINPROT == LIN2X_ACT44) */		/* MMP150128-1 - End */
		}

#if _SUPPORT_LIN_UV
		if ( NVRAM_LIN_UV != 0 )												/* MMP131216-1 - Begin */
    72a4:	61c7      	lod	AL, dp:0xc7 <__bss_dp_size+0x17>
    72a6:	b407      	and	A, #7
    72a8:	191b      	je	0x72e0 <_main+0x306>
		{
			if ( g_i16MotorVoltage >= (int16) (600 + (NVRAM_LIN_UV * 50)) )
    72aa:	4872 0032 	muls	A, A, #50
    72ae:	a2da 0258 	add	A, #600
    72b2:	7920      	lod	Y, dp:0x20 <_g_i16MotorVoltage>
    72b4:	eee2      	cmp	Y, A
    72b6:	1a82      	jsl	0x72bc <_main+0x2e2>
			{
				g_u16LinUVTimeCounter = 0;										/* Stop LIN UV time-counter */
    72b8:	7800      	lod	Y, #0
    72ba:	0010      	jmp	0x72dc <_main+0x302>
			}
			else if ( g_u16LinUVTimeCounter > PI_TICKS_PER_SECOND )
    72bc:	72d8 014c 	lod	A, 0x14c <_g_u16LinUVTimeCounter>
    72c0:	aeda 07d0 	cmp	A, #2000
    72c4:	1a08      	jule	0x72d6 <_main+0x2fc>
			{
				/* Restart MLX4 Bus-timeout */
				(void) ml_Disconnect();
    72c6:	82db 5ba6 	callf	0x5ba6 <_ml_Disconnect>
				(void) ml_Connect();
    72ca:	82db 5ba2 	callf	0x5ba2 <_ml_Connect>
				g_u16LinUVTimeCounter = 1;										/* Re-start LIN UV time-counter */
    72ce:	7001      	lod	A, #1
    72d0:	52d8 014c 	mov	0x14c <_g_u16LinUVTimeCounter>, A
    72d4:	0005      	jmp	0x72e0 <_main+0x306>
			}
			else if ( g_u16LinUVTimeCounter == 0 )
    72d6:	ac00      	cmp	A, #0
    72d8:	1d03      	jne	0x72e0 <_main+0x306>
			{
				g_u16LinUVTimeCounter = 1;										/* Start LIN UV time-counter */
    72da:	7801      	lod	Y, #1
    72dc:	5ad8 014c 	mov	0x14c <_g_u16LinUVTimeCounter>, Y

		/* ************************************************************* */
		/* *** f. Chip and ambient temperature (degraded-mode check) *** */
		/* ************************************************************* */
		/* Calculate Chip internal temperature (1LSB/C) [C] */
		GetChipTemperature( FALSE)												/* MMP131020-1 */;
    72e0:	7000      	lod	A, #0
    72e2:	82db 867e 	callf	0x867e <_GetChipTemperature>
#endif /* (_SUPPORT_DIAG_OVT != FALSE) */
#else  /* _SUPPORT_AMBIENT_TEMP */
		//if ( ((g_i16ChipTemperature > (int16) (NVRAM_APPL_OTEMP + C_TEMPERATURE_HYS)) && ((g_e8MotorStatusMode & C_MOTOR_STATUS_RUNNING) == 0)) ||
		//	 (g_i16ChipTemperature > C_CHIP_OVERTEMP_LEVEL) )
		//Ban, the over temperate is set to 150 degree, also go to degrade mode
		if ( ((g_i16ChipTemperature > (int16) (NVRAM_APPL_OTEMP + 10)) && ((g_e8MotorStatusMode & C_MOTOR_STATUS_RUNNING) == 0)) || (g_i16ChipTemperature > (int16) C_CHIP_OVERTEMP_LEVEL) )
    72e6:	61ab      	lod	AL, dp:0xab <_g_NvramUser+0x51>
    72e8:	5cf2      	usex	A
    72ea:	7ee2      	lod	X, A
    72ec:	7ae2      	lod	Y, A
    72ee:	e0ce      	add	Y, #-50
    72f0:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    72f2:	aee6      	cmp	A, Y
    72f4:	1b03      	jsle	0x72fc <_main+0x322>
    72f6:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    72f8:	b401      	and	A, #1
    72fa:	1904      	je	0x7304 <_main+0x32a>
    72fc:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    72fe:	aeda 0096 	cmp	A, #150
    7302:	1b1b      	jsle	0x733a <_main+0x360>
#endif /* _SUPPORT_AMBIENT_TEMP */
		{
			if ( (l_e8ErrorDebounceFilter & (uint8) C_DEBFLT_ERR_OVT) == 0x00 )
    7304:	66d8 0109 	lod	YL, 0x109 <_l_e8ErrorDebounceFilter>
    7308:	72e6      	lod	A, Y
    730a:	b402      	and	A, #2
    730c:	1d05      	jne	0x7318 <_main+0x33e>
			{
				/* Need twice a over-temperature detection, to avoid ESD-pulses disturbance will cause degraded mode entering */
				l_e8ErrorDebounceFilter |= (uint8) C_DEBFLT_ERR_OVT;
    730e:	62e8      	lod	AL, YL
    7310:	8402      	or	AL, #2
    7312:	42d8 0109 	mov	0x109 <_l_e8ErrorDebounceFilter>, AL
    7316:	0020      	jmp	0x7358 <_main+0x37e>
			}
			else if ( g_e8ErrorOverTemperature != (uint8) C_ERR_OTEMP_YES )
    7318:	6126      	lod	AL, dp:0x26 <_g_e8ErrorOverTemperature>
    731a:	8c01      	cmp	AL, #1
    731c:	191d      	je	0x7358 <_main+0x37e>
			{
				g_u8OverTemperatureCount++;
    731e:	62d8 010d 	lod	AL, 0x10d <_g_u8OverTemperatureCount>
    7322:	8001      	add	AL, #1
    7324:	42d8 010d 	mov	0x10d <_g_u8OverTemperatureCount>, AL
				if ( g_u8OverTemperatureCount >= (uint8) C_OVERTEMP_TO_PERMDEFECT_THRSHLD )
    7328:	8c03      	cmp	AL, #3
    732a:	1a16      	jule	0x7358 <_main+0x37e>
				{
					g_e8ErrorOverTemperature = (uint8) C_ERR_OTEMP_YES;
    732c:	6001      	lod	AL, #1
    732e:	4126      	mov	dp:0x26 <_g_e8ErrorOverTemperature>, AL
					SetLastError( (uint8) C_ERR_APPL_OVER_TEMP);
    7330:	72da 00a1 	lod	A, #161
    7334:	82db 89f6 	callf	0x89f6 <_SetLastError>
    7338:	000f      	jmp	0x7358 <_main+0x37e>
		}
#if _SUPPORT_AMBIENT_TEMP
		else if ( g_i16AmbjTemperature < (int16) (NVRAM_APPL_OTEMP - C_TEMPERATURE_HYS) )
#else  /* _SUPPORT_AMBIENT_TEMP */
			//else if ( g_i16ChipTemperature < (int16) (NVRAM_APPL_OTEMP - C_TEMPERATURE_HYS) )
			else if ( g_i16ChipTemperature < (int16) (NVRAM_APPL_OTEMP) )//Over temp pass criteria is 140 degree
    733a:	7aee      	lod	Y, X
    733c:	e0c4      	add	Y, #-60
    733e:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    7340:	aee6      	cmp	A, Y
    7342:	1e8a      	jsge	0x7358 <_main+0x37e>
#endif /* _SUPPORT_AMBIENT_TEMP */
			{
				g_e8ErrorOverTemperature = (uint8) C_ERR_OTEMP_NO;
    7344:	6000      	lod	AL, #0
    7346:	4126      	mov	dp:0x26 <_g_e8ErrorOverTemperature>, AL
				l_e8ErrorDebounceFilter &= (uint8) ~C_DEBFLT_ERR_OVT;
    7348:	62d8 0109 	lod	AL, 0x109 <_l_e8ErrorDebounceFilter>
    734c:	94fd      	and	AL, #-3
    734e:	42d8 0109 	mov	0x109 <_l_e8ErrorDebounceFilter>, AL
				g_u8OverTemperatureCount = 0;
    7352:	6400      	lod	YL, #0
    7354:	46d8 010d 	mov	0x10d <_g_u8OverTemperatureCount>, YL
			}

		if (g_i16ChipTemperature > (int16) (C_CHIP_WARNING_OVERTEMP_LEVEL + C_TEMPERATURE_HYS))//over temperature waning process
    7358:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    735a:	aeda 0094 	cmp	A, #148
    735e:	1b05      	jsle	0x736a <_main+0x390>
		{
			if ( g_e8WarningOverTemperature != (uint8) C_WARNING_OTEMP_YES )
    7360:	611a      	lod	AL, dp:0x1a <_g_e8WarningOverTemperature>
    7362:	8c01      	cmp	AL, #1
    7364:	1908      	je	0x7376 <_main+0x39c>
			{
				g_e8WarningOverTemperature = (uint8) C_WARNING_OTEMP_YES;
    7366:	6001      	lod	AL, #1
    7368:	0005      	jmp	0x7374 <_main+0x39a>
			}
		}
		else if(g_i16ChipTemperature < (int16) (C_CHIP_WARNING_OVERTEMP_LEVEL - C_TEMPERATURE_HYS))
    736a:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    736c:	aeda 008d 	cmp	A, #141
    7370:	1f02      	jsg	0x7376 <_main+0x39c>
		{
			g_e8WarningOverTemperature = (uint8) C_WARNING_OTEMP_NO;
    7372:	6000      	lod	AL, #0
    7374:	411a      	mov	dp:0x1a <_g_e8WarningOverTemperature>, AL

		/* ****************************** */
		/* *** g. Degraded-mode check *** */
		/* ****************************** */
		/* Degraded check */
		if ( ((g_e8ErrorVoltage != (uint8) C_ERR_VOLTAGE_IN_RANGE) || (g_e8ErrorOverTemperature == (uint8) C_ERR_OTEMP_YES)) && ((g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_DEGRADED) == 0))
    7376:	612b      	lod	AL, dp:0x2b <_g_e8ErrorVoltage>
    7378:	1d03      	jne	0x7380 <_main+0x3a6>
    737a:	6126      	lod	AL, dp:0x26 <_g_e8ErrorOverTemperature>
    737c:	8c01      	cmp	AL, #1
    737e:	1d1d      	jne	0x73ba <_main+0x3e0>
    7380:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    7382:	8c00      	cmp	AL, #0
    7384:	1a9a      	jsl	0x73ba <_main+0x3e0>
		{
			/* Not in degradation state; Stop motor, remember last "request" and enter degradation state */
			if ( g_e8MotorRequest != (uint8) C_MOTOR_REQUEST_NONE )				/* MMP150313-3 - Begin */
    7386:	612e      	lod	AL, dp:0x2e <_g_e8MotorRequest>
    7388:	1904      	je	0x7392 <_main+0x3b8>
			{
				g_e8DegradedMotorRequest = g_e8MotorRequest;
    738a:	4125      	mov	dp:0x25 <_g_e8DegradedMotorRequest>, AL
				g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_NONE;
    738c:	6400      	lod	YL, #0
    738e:	452e      	mov	dp:0x2e <_g_e8MotorRequest>, YL
    7390:	0008      	jmp	0x73a2 <_main+0x3c8>
				MotorDriverStop( (uint16) C_STOP_RAMPDOWN);						/* Degraded-mode (Running) */
			}
			else if ( (g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING) != 0 )	/* MMP150313-3 - End */
    7392:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    7394:	b401      	and	A, #1
    7396:	1907      	je	0x73a6 <_main+0x3cc>
			{
				if ( g_e8MotorStatusMode == (uint8) C_MOTOR_STATUS_RUNNING )
    7398:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    739a:	8c01      	cmp	AL, #1
    739c:	1d0b      	jne	0x73b4 <_main+0x3da>
				{
					g_e8DegradedMotorRequest = (uint8) C_MOTOR_REQUEST_START;	/* Set before Diagnostics UV/OV kicks-in */
    739e:	6003      	lod	AL, #3
    73a0:	4125      	mov	dp:0x25 <_g_e8DegradedMotorRequest>, AL
					MotorDriverStop( (uint16) C_STOP_RAMPDOWN);					/* Degraded-mode (Running) */
    73a2:	7000      	lod	A, #0
    73a4:	0005      	jmp	0x73b0 <_main+0x3d6>
				else
				{
					/* "Stopping" */
				}
			}
			else if ( g_e8DegradedMotorRequest == (uint8) C_MOTOR_REQUEST_NONE )
    73a6:	6125      	lod	AL, dp:0x25 <_g_e8DegradedMotorRequest>
    73a8:	1d05      	jne	0x73b4 <_main+0x3da>
			{
				/* Actuator is stopped, but maybe still powered (holding-mode);
				 * Request to stop without ramp-down */
				g_e8DegradedMotorRequest = (uint8) C_MOTOR_REQUEST_STOP;		/* In case non-degraded mode, (optionally) turn on holding-mode */
    73aa:	6001      	lod	AL, #1
    73ac:	4125      	mov	dp:0x25 <_g_e8DegradedMotorRequest>, AL
				MotorDriverStop( (uint16) C_STOP_EMERGENCY);					/* Degraded-mode (MMP150313-2) */
    73ae:	7002      	lod	A, #2
    73b0:	82db 9246 	callf	0x9246 <_MotorDriverStop>
			}
			g_e8MotorStatusMode |= (uint8) C_MOTOR_STATUS_DEGRADED;
    73b4:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    73b6:	8480      	or	AL, #-128
    73b8:	0017      	jmp	0x73e8 <_main+0x40e>
		}
		else if ( (g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_DEGRADED) && 
    73ba:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    73bc:	8c00      	cmp	AL, #0
    73be:	1e95      	jsge	0x73ea <_main+0x410>
    73c0:	612b      	lod	AL, dp:0x2b <_g_e8ErrorVoltage>
    73c2:	1d13      	jne	0x73ea <_main+0x410>
    73c4:	6126      	lod	AL, dp:0x26 <_g_e8ErrorOverTemperature>
    73c6:	1d11      	jne	0x73ea <_main+0x410>
				(g_e8ErrorVoltage == (uint8) C_ERR_VOLTAGE_IN_RANGE) && (g_e8ErrorOverTemperature == (uint8) C_ERR_OTEMP_NO))
		{
			/* No longer degraded mode */
			if ( g_e8DegradedMotorRequest != (uint8) C_MOTOR_REQUEST_NONE ) 
    73c8:	6125      	lod	AL, dp:0x25 <_g_e8DegradedMotorRequest>
    73ca:	190c      	je	0x73e4 <_main+0x40a>
			{
				g_e8MotorRequest = (uint8) g_e8DegradedMotorRequest;
    73cc:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
				g_e8DegradedMotorRequest = (uint8) C_MOTOR_REQUEST_NONE;
    73ce:	6000      	lod	AL, #0
    73d0:	4125      	mov	dp:0x25 <_g_e8DegradedMotorRequest>, AL
				if(g_e8CalibrationStep == (uint8) C_CALIB_CHECK_HI_ENDPOS)//go back to continue calibration
    73d2:	611d      	lod	AL, dp:0x1d <_g_e8CalibrationStep>
    73d4:	8c03      	cmp	AL, #3
    73d6:	1d02      	jne	0x73dc <_main+0x402>
				{
					g_e8CalibrationStep = (uint8) C_CALIB_SETUP_HI_ENDPOS;
    73d8:	6002      	lod	AL, #2
    73da:	0003      	jmp	0x73e2 <_main+0x408>
				}
				else if(g_e8CalibrationStep == (uint8) C_CALIB_CHECK_LO_ENDPOS)
    73dc:	8c06      	cmp	AL, #6
    73de:	1d02      	jne	0x73e4 <_main+0x40a>
				{
					g_e8CalibrationStep = (uint8) C_CALIB_SETUP_LO_ENDPOS;
    73e0:	6005      	lod	AL, #5
    73e2:	411d      	mov	dp:0x1d <_g_e8CalibrationStep>, AL
				}
			}
			g_e8MotorStatusMode &= (uint8) ~C_MOTOR_STATUS_DEGRADED;
    73e4:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    73e6:	947f      	and	AL, #127
    73e8:	41ed      	mov	dp:0xed <_g_e8MotorStatusMode>, AL
		/* ************************************************* */
		/* *** i. Handling Motor Request (Emergency Run) *** */
		/* ************************************************* */
#if (_SUPPORT_BUSTIMEOUT)
		/* Bus-timeout occurred */
		if ( g_e8MotorRequest == (uint8) C_MOTOR_REQUEST_EMRUN )
    73ea:	612e      	lod	AL, dp:0x2e <_g_e8MotorRequest>
    73ec:	8c07      	cmp	AL, #7
    73ee:	1d2a      	jne	0x7444 <_main+0x46a>
		{
			//TODO, where to clear the emergency run flag, emergency run only occurred in initialized stage
			/* Actuator move's towards Emergency Run position */
			g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_NONE;
    73f0:	6400      	lod	YL, #0
    73f2:	452e      	mov	dp:0x2e <_g_e8MotorRequest>, YL


#if (((LINPROT & LINXX) == LIN2X) || ((LINPROT & LINXX) == LIN2J))
			if(g_e8CalibrationStep == (uint8) C_CALIB_DONE)
    73f4:	611d      	lod	AL, dp:0x1d <_g_e8CalibrationStep>
    73f6:	8c0a      	cmp	AL, #10
    73f8:	1d25      	jne	0x7444 <_main+0x46a>
			{
				if ( g_NvramUser.EmergencyRunEndStopHi == 0 )
    73fa:	616a      	lod	AL, dp:0x6a <_g_NvramUser+0x10>
    73fc:	44b2      	lsr	A, #2
    73fe:	b401      	and	A, #1
    7400:	1d0d      	jne	0x741c <_main+0x442>
				{
					/* Move to Low EndStop */
					g_u16TargetPosition = C_EXV_ZERO_POS;
    7402:	658e      	lod	YL, dp:0x8e <_g_NvramUser+0x34>
    7404:	44b6      	lsr	Y, #2
    7406:	44b6      	lsr	Y, #2
    7408:	4436      	lsr	Y
    740a:	f403      	and	Y, #3
    740c:	e001      	add	Y, #1
    740e:	7064      	lod	A, #100
    7410:	ec00      	cmp	Y, #0
    7412:	1b03      	jsle	0x741a <_main+0x440>
    7414:	46e9      	mov	Cx, YL
    7416:	4422      	asl	A
    7418:	1ffe      	djnz	Cx, 0x7416 <_main+0x43c>
    741a:	0001      	jmp	0x741e <_main+0x444>
				}
				else
				{
					/* Move to High EndStop */
					g_u16TargetPosition = g_u16CalibTravel;
    741c:	71f6      	lod	A, dp:0xf6 <_g_u16CalibTravel>
    741e:	51f2      	mov	dp:0xf2 <_g_u16TargetPosition>, A
				}
				if ( g_u16TargetPosition != g_u16ActualPosition)
    7420:	71f2      	lod	A, dp:0xf2 <_g_u16TargetPosition>
    7422:	adf0      	cmp	A, dp:0xf0 <_g_u16ActualPosition>
    7424:	190f      	je	0x7444 <_main+0x46a>
				{
					/* Only move actuator when not already at position */
					g_u8EmergencyRunOcc = TRUE;
    7426:	6001      	lod	AL, #1
    7428:	4127      	mov	dp:0x27 <_g_u8EmergencyRunOcc>, AL
					//g_e8StallDetectorEna = (uint8) C_STALLDET_ALL;
					g_u8StallOcc = FALSE;
    742a:	6400      	lod	YL, #0
    742c:	4528      	mov	dp:0x28 <_g_u8StallOcc>, YL
					g_u8StallTypeComm &= ~M_STALL_MODE;								/* MMP130916-1 */
    742e:	611f      	lod	AL, dp:0x1f <_g_u8StallTypeComm>
    7430:	9487      	and	AL, #-121
    7432:	411f      	mov	dp:0x1f <_g_u8StallTypeComm>, AL

					if ( g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_DEGRADED )
    7434:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    7436:	8c00      	cmp	AL, #0
    7438:	1e83      	jsge	0x7440 <_main+0x466>
					{
						g_e8DegradedMotorRequest = (uint8) C_MOTOR_REQUEST_START;
    743a:	6003      	lod	AL, #3
    743c:	4125      	mov	dp:0x25 <_g_e8DegradedMotorRequest>, AL
    743e:	0002      	jmp	0x7444 <_main+0x46a>
					}
					else
					{
						g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_START;
    7440:	6003      	lod	AL, #3
    7442:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
#endif /* (_SUPPORT_BUSTIMEOUT_SLEEP != FALSE) */								/* MMP130815-1 - End */
#endif /* (((LINPROT & LINXX) == LIN2X) || ((LINPROT & LINXX) == LIN2J)) */
		}
#endif /* (_SUPPORT_BUSTIMEOUT) */
		//Ban, Go to sleep after emergency run
		if((g_u8EmergencyRunOcc == TRUE) && (g_u16ActualPosition == g_u16CalibTravel))
    7444:	6127      	lod	AL, dp:0x27 <_g_u8EmergencyRunOcc>
    7446:	8c01      	cmp	AL, #1
    7448:	1d05      	jne	0x7454 <_main+0x47a>
    744a:	71f0      	lod	A, dp:0xf0 <_g_u16ActualPosition>
    744c:	adf6      	cmp	A, dp:0xf6 <_g_u16CalibTravel>
    744e:	1d02      	jne	0x7454 <_main+0x47a>
		{
			g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_SLEEP;
    7450:	6006      	lod	AL, #6
    7452:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL

		/* ********************************************************************************************* */
		/* *** j. Handling Motor Request (resp. STOP, INIT, START, CALIBRATION, SLEEP, SPEED-CHANGE) *** */
		/* ********************************************************************************************* */

		g_e8MotorRequest = C_MOTOR_REQUEST_START;
    7454:	6003      	lod	AL, #3
    7456:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
		g_e8CalibrationStep = C_CALIB_DONE;
    7458:	640a      	lod	YL, #10
    745a:	451d      	mov	dp:0x1d <_g_e8CalibrationStep>, YL
			g_e8DegradedMotorRequest = (uint8) C_MOTOR_REQUEST_NONE;			/* MMP150313-1 */
			//g_e8CalibrationStep = (uint8) C_CALIB_NONE;
			//g_e8CalibPostMotorRequest = (uint8) C_MOTOR_REQUEST_NONE;
		}
#if LIN_COMM
		else if ( (g_e8MotorRequest == (uint8) C_MOTOR_REQUEST_INIT) || (g_e8DegradedMotorRequest == (uint8) C_MOTOR_REQUEST_INIT) )	/* MMP150313-1 */
    745c:	6125      	lod	AL, dp:0x25 <_g_e8DegradedMotorRequest>
    745e:	420f      	mov	[S-16], AL
    7460:	8c02      	cmp	AL, #2
    7462:	1d06      	jne	0x7470 <_main+0x496>
		{
			/* Actuator initialisation: Set new actual position */
			g_u16ActuatorActPos = g_u16ActualPosition;
    7464:	71f0      	lod	A, dp:0xf0 <_g_u16ActualPosition>
    7466:	51f8      	mov	dp:0xf8 <_g_u16ActuatorActPos>, A
			g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_NONE;
    7468:	6000      	lod	AL, #0
    746a:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
			g_e8DegradedMotorRequest = (uint8) C_MOTOR_REQUEST_NONE;			/* MMP150313-1 */
    746c:	4125      	mov	dp:0x25 <_g_e8DegradedMotorRequest>, AL
			g_e8CalibrationStep = (uint8) C_CALIB_DONE;
    746e:	0087      	jmp	0x757e <_main+0x5a4>
		}
#endif /* LIN_COMM */
		else if ( (g_e8MotorRequest == (uint8) C_MOTOR_REQUEST_START) && (g_u8MotorStartDelay == 0))
    7470:	62d8 010c 	lod	AL, 0x10c <_g_u8MotorStartDelay>
    7474:	1901      	je	0x7478 <_main+0x49e>
    7476:	0049      	jmp	0x750a <_main+0x530>
		{
			//g_e8EXVMoveEnableRequestFlag = (uint8) C_EXV_MOVE_DISABLE;//make sure just run once
			if((g_u8EmergencyRunOcc == FALSE) && (g_e8EXVMoveEnableRequestFlag == (uint8) C_EXV_MOVE_ENABLE))
    7478:	6127      	lod	AL, dp:0x27 <_g_u8EmergencyRunOcc>
    747a:	1d2a      	jne	0x74d0 <_main+0x4f6>
    747c:	611c      	lod	AL, dp:0x1c <_g_e8EXVMoveEnableRequestFlag>
    747e:	8c01      	cmp	AL, #1
    7480:	1d27      	jne	0x74d0 <_main+0x4f6>
					g_u16TargetPosition = C_EXV_ZERO_POS + C_EXV_RANGE_MAX;
				}
				else
#endif
				{
					g_u16TargetPosition = (((uint32)g_u16EXVTargetPositionTemp)*C_EXV_POSITION_STD+512)/1023 + C_EXV_ZERO_POS;//update the target position
    7482:	618e      	lod	AL, dp:0x8e <_g_NvramUser+0x34>
    7484:	44b2      	lsr	A, #2
    7486:	44b2      	lsr	A, #2
    7488:	4432      	lsr	A
    748a:	b403      	and	A, #3
    748c:	a001      	add	A, #1
    748e:	520d      	mov	[S-14], A
    7490:	72da 0120 	lod	A, #288
    7494:	7a0d      	lod	Y, [S-14]
    7496:	ec00      	cmp	Y, #0
    7498:	1b03      	jsle	0x74a0 <_main+0x4c6>
    749a:	46e9      	mov	Cx, YL
    749c:	4422      	asl	A
    749e:	1ffe      	djnz	Cx, 0x749c <_main+0x4c2>
    74a0:	7ad8 0102 	lod	Y, 0x102 <_g_u16EXVTargetPositionTemp>
    74a4:	4821      	mulu	YA, A, Y
    74a6:	4c22 0200 	add	YA, #512
    74aa:	0000 
    74ac:	54ca 03ff 	pushw	#1023
    74b0:	54ca 0000 	pushw	#0
    74b4:	82db 6c94 	callf	0x6c94 <___udivsi3>
    74b8:	5c03      	dec	S, #4
    74ba:	520b      	mov	[S-12], A
    74bc:	5a09      	mov	[S-10], Y
    74be:	7064      	lod	A, #100
    74c0:	7a0d      	lod	Y, [S-14]
    74c2:	ec00      	cmp	Y, #0
    74c4:	1b03      	jsle	0x74cc <_main+0x4f2>
    74c6:	46e9      	mov	Cx, YL
    74c8:	4422      	asl	A
    74ca:	1ffe      	djnz	Cx, 0x74c8 <_main+0x4ee>
    74cc:	a20b      	add	A, [S-12]
    74ce:	51f2      	mov	dp:0xf2 <_g_u16TargetPosition>, A
				}
			}
			/* Start Actuator */
			if (( g_u16ActualPosition != g_u16TargetPosition ) && (g_e8CalibrationStep == C_CALIB_DONE))
    74d0:	71f0      	lod	A, dp:0xf0 <_g_u16ActualPosition>
    74d2:	adf2      	cmp	A, dp:0xf2 <_g_u16TargetPosition>
    74d4:	1917      	je	0x7504 <_main+0x52a>
    74d6:	611d      	lod	AL, dp:0x1d <_g_e8CalibrationStep>
    74d8:	8c0a      	cmp	AL, #10
    74da:	1d14      	jne	0x7504 <_main+0x52a>
			{
				uint8 u8NewMotorDirectionCCW;
#if LIN_COMM
				UpdateMotorSpeed();//TODO, when accelerate or Decelerate, may changed the speed
    74dc:	1540      	call	0x6f5e <_UpdateMotorSpeed>
				g_u8MotorStatusSpeed = (uint8) C_MOTOR_SPEED_2;
				g_u16MotorSpeedRPS = g_au16MotorSpeedRPS[C_MOTOR_SPEED_2];		/* Use Speed #2 as default */
				g_u16TargetCommutTimerPeriod = g_au16MotorSpeedCommutTimerPeriod[C_MOTOR_SPEED_2];
#endif /* LIN_COMM */

				u8NewMotorDirectionCCW = (g_u16TargetPosition < g_u16ActualPosition) ? TRUE : FALSE;
    74de:	7800      	lod	Y, #0
    74e0:	7df2      	lod	X, dp:0xf2 <_g_u16TargetPosition>
    74e2:	2df0      	cmp	X, dp:0xf0 <_g_u16ActualPosition>
    74e4:	1c01      	jnc	0x74e8 <_main+0x50e>
    74e6:	7801      	lod	Y, #1
						g_u8RewindFlags = 0;									/* Clear previous detected stall flags */
					}															/* MMP140331-1 - End */
				}
#endif

				if ( g_e8MotorStatusMode == (uint8) C_MOTOR_STATUS_STOP )
    74e8:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    74ea:	1d04      	jne	0x74f4 <_main+0x51a>
				{
					g_e8MotorDirectionCCW = u8NewMotorDirectionCCW;
    74ec:	452a      	mov	dp:0x2a <_g_e8MotorDirectionCCW>, YL
					MotorDriverStart();
    74ee:	82db 9106 	callf	0x9106 <_MotorDriverStart>
    74f2:	0008      	jmp	0x7504 <_main+0x52a>
				}
				else if ( u8NewMotorDirectionCCW != g_e8MotorDirectionCCW )
    74f4:	612a      	lod	AL, dp:0x2a <_g_e8MotorDirectionCCW>
    74f6:	8ee8      	cmp	AL, YL
    74f8:	1904      	je	0x7502 <_main+0x528>
				{
					/* Changing direction; Stop motor first before starting in opposite direction */
					MotorDriverStop( (uint16) C_STOP_RAMPDOWN);					/* Change of direction */
    74fa:	7000      	lod	A, #0
    74fc:	82db 9246 	callf	0x9246 <_MotorDriverStop>
					continue;
    7500:	0647      	jmp	0x7190 <_main+0x1b6>
				}
				else
				{
					g_u16ActuatorTgtPos = g_u16TargetPosition;					/* Motor already started; Update target-position only */
    7502:	5dfa      	mov	dp:0xfa <_g_u16ActuatorTgtPos>, X
				}
			}
			g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_NONE;
    7504:	6000      	lod	AL, #0
    7506:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
    7508:	003a      	jmp	0x757e <_main+0x5a4>
				g_e8DegradedMotorRequest = (uint8) C_MOTOR_REQUEST_NONE;
				//TODO, the post motor request, related to emergency run
				g_e8CalibPostMotorRequest = (uint8) C_MOTOR_REQUEST_NONE;
			}
		}
		else if ( (g_e8MotorRequest == (uint8) C_MOTOR_REQUEST_SLEEP) || (g_e8DegradedMotorRequest == (uint8) C_MOTOR_REQUEST_SLEEP) )	/* MMP150313-1 */
    750a:	620f      	lod	AL, [S-16]
    750c:	8c06      	cmp	AL, #6
    750e:	1901      	je	0x7512 <_main+0x538>
    7510:	0036      	jmp	0x757e <_main+0x5a4>
		{
			/* Actuator enters (Deep-)SLEEP mode (lowest power mode; Only LIN/PWM msg can wake-up) */
			if ( ((g_e8MotorStatusMode & ~C_MOTOR_STATUS_DEGRADED) == (uint8) C_MOTOR_STATUS_STOP) && /* MMP130730-1 */
    7512:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    7514:	b47f      	and	A, #127
    7516:	1d2e      	jne	0x7574 <_main+0x59a>
    7518:	6137      	lod	AL, dp:0x37 <_g_u8MotorStopDelay>
    751a:	1d2c      	jne	0x7574 <_main+0x59a>
    751c:	72d8 2024 	lod	A, 0x2024 <__ep__+0x1024>
    7520:	b401      	and	A, #1
    7522:	1d28      	jne	0x7574 <_main+0x59a>
					(g_u8MotorStopDelay == 0) &&
					((NV_CTRL & NV_BUSY) == 0) ) /* MMP140812-3 */
			{
				if ( g_u8MotorHoldingCurrEna &&									/* Holding mode enabled */
    7524:	61ef      	lod	AL, dp:0xef <_g_u8MotorHoldingCurrEna>
    7526:	1908      	je	0x7538 <_main+0x55e>
    7528:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    752a:	8c02      	cmp	AL, #2
    752c:	1905      	je	0x7538 <_main+0x55e>
    752e:	612b      	lod	AL, dp:0x2b <_g_e8ErrorVoltage>
    7530:	1d03      	jne	0x7538 <_main+0x55e>
						(g_e8ErrorElectric != (uint8) C_ERR_ELECTRIC_PERM) && (g_e8ErrorVoltage == (uint8) C_ERR_VOLTAGE_IN_RANGE) )
				{
					MotorDriverStop( (uint16) C_STOP_SLEEP);					/* Disable holding current */
    7532:	7003      	lod	A, #3
    7534:	82db 9246 	callf	0x9246 <_MotorDriverStop>

#if (LINPROT == LIN2J_VALVE_GM)
				/* Before the actuator enters in Sleep, it saves in EEPROM the CPOS,
				 * the Status and the NAD only if the value of cells is different as the RAM value.
				 */
				LIN_SAE_J2602_Store();											/* MMP160613-2 */
    7538:	12b9      	call	0x7aac <_LIN_SAE_J2602_Store>
				 * Wake up is done by resetting the chip. The source of the wake up can be found in ANA_INB.
				 * Note: In case between MLX4_HALT and MLX16_HALT a LIN-bus event happens, the chip will not
				 * enter SLEEP but HALT-mode. To allow a LIN-wakeup, the Analogue Watchdog is set to minimum
				 * period of 100us to allow a chip reset.
				 */
				IO_WU = 0;														/* Disable IO3 wake up */
    753a:	7800      	lod	Y, #0
    753c:	5ad8 28c8 	mov	0x28c8 <__io__+0xc8>, Y
				ANA_OUTG = ANA_OUTG & 0xFF9E;									/* Clear Internal WU delay and DIS_GTSM */
    7540:	72d8 28cc 	lod	A, 0x28cc <__io__+0xcc>
    7544:	b49e      	and	A, #-98
    7546:	52d8 28cc 	mov	0x28cc <__io__+0xcc>, A
				MASK = 0;
    754a:	5ad8 2006 	mov	0x2006 <__ep__+0x1006>, Y
				ADC_Stop();														/* MMP140812-4 - End */
    754e:	82db 8534 	callf	0x8534 <_ADC_Stop>
				/* Go into sleep/halt */
				AWD_CTRL = (3u << 8) | 1;										/* Set 1:1 prescaler and minimal period; AWD timeout will be 100 us (MMP140813-2) */
    7552:	72da 0301 	lod	A, #769
    7556:	529a      	mov	io:0x1a <_g_e8WarningOverTemperature>, A
				MLX4_RESET();
    7558:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    755c:	94fe      	and	AL, #-2
    755e:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
				MLX16_HALT();													/* See MELEXIS doc */
    7562:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    7566:	8402      	or	AL, #2
    7568:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
    756c:	0000      	nop
				/* Chip should reset upon LIN bus changes */
				/* We should never make it to here, as a backup we add a chip reset */
				MLX16_RESET();
    756e:	82db 5920 	callf	0x5920 <_MLX16_RESET>
    7572:	0005      	jmp	0x757e <_main+0x5a4>
			}
			else if ( g_e8MotorStatusMode != (uint8) C_MOTOR_STATUS_STOP )
    7574:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    7576:	1903      	je	0x757e <_main+0x5a4>
			{
				MotorDriverStop( (uint16) C_STOP_IMMEDIATE);	
    7578:	7001      	lod	A, #1
    757a:	82db 9246 	callf	0x9246 <_MotorDriverStop>
		}
#endif /* _SUPPORT_SPEED_AUTO */

		/* Update status actual-position (only incase not the initial position have been changed) */
		//if ( ((g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING) != 0) && ((g_u8RewindFlags & (uint8) C_REWIND_ACTIVE) == 0) )				/* MMP130626-4 */
		if ((g_u8RewindFlags & (uint8) C_REWIND_ACTIVE) == 0)//Ban, fix the move to 0 bug, because it stopped,but g_u16ActuatorActPos = 0,g_u16ActualPosition is not zero
    757e:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    7580:	b408      	and	A, #8
    7582:	1d02      	jne	0x7588 <_main+0x5ae>
		{
			g_u16ActualPosition = g_u16ActuatorActPos;
    7584:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    7586:	51f0      	mov	dp:0xf0 <_g_u16ActualPosition>, A
		}

		/* ********************************************************** */
		/* *** l. Threshold control (Stepper: Current-threshold) *** */
		/* ********************************************************** */
		ThresholdControl();													
    7588:	82db 9ed8 	callf	0x9ed8 <_ThresholdControl>

		/* ************************************************* */
		/* *** m. PID control (Stepper: current-control) *** */
		/* ************************************************* */
		PID_Control();															/* PID-control (Current) */
    758c:	82db 9d9e 	callf	0x9d9e <_PID_Control>
		{
			uint16 u16Mlx4CounterThreshold = C_MLX4_STATE_TIMEOUT;				/* MMP130905-4 - Begin */
#if _SUPPORT_LIN_BUS_ACTIVITY_CHECK && (__MLX_PLTF_VERSION_MAJOR__ == 4)
			{
				/* MLX4 LIN-Bus activity check when not in LIN-AA mode (only __MLX_PLTF_VERSION_MAJOR__ == 4) */
				if ( (ml_GetState( ML_NOT_CLEAR) != ml_stINVALID) && ((LinStatus & ML_LIN_BUS_ACTIVITY) != 0) )
    7590:	7009      	lod	A, #9
    7592:	82db 5b68 	callf	0x5b68 <_ml_GetState>
    7596:	acff      	cmp	A, #-1
    7598:	190e      	je	0x75b6 <_main+0x5dc>
    759a:	62d8 0330 	lod	AL, 0x330 <_LinStatus>
    759e:	b401      	and	A, #1
    75a0:	190a      	je	0x75b6 <_main+0x5dc>
				{
					/* MLX4 has detected a SYNC field */
					g_u16Mlx4StateCheckCounter = 0;
    75a2:	7800      	lod	Y, #0
    75a4:	5ad8 0110 	mov	0x110 <_g_u16Mlx4StateCheckCounter>, Y
					g_u8ErrorCommBusTimeout = FALSE;
    75a8:	6000      	lod	AL, #0
    75aa:	42d8 011c 	mov	0x11c <_g_u8ErrorCommBusTimeout>, AL
					(void) ml_GetState( ML_CLR_LIN_BUS_ACTIVITY);
    75ae:	7008      	lod	A, #8
    75b0:	82db 5b68 	callf	0x5b68 <_ml_GetState>
    75b4:	0005      	jmp	0x75c0 <_main+0x5e6>
				}
				else
				{
					g_u16Mlx4StateCheckCounter++;								/* State check counter */
    75b6:	72d8 0110 	lod	A, 0x110 <_g_u16Mlx4StateCheckCounter>
    75ba:	a001      	add	A, #1
    75bc:	52d8 0110 	mov	0x110 <_g_u16Mlx4StateCheckCounter>, A
				}
			}
#endif /* _SUPPORT_LIN_BUS_ACTIVITY_CHECK && (__MLX_PLTF_VERSION_MAJOR__ == 4) */

			if ( (g_u16Mlx4StateCheckCounter >= u16Mlx4CounterThreshold) || ((g_u8Mlx4ErrorState & (uint8) C_MLX4_STATE_IMMEDIATE_RST) != 0) ) /* MMP130905-4 - End */
    75c0:	72d8 0110 	lod	A, 0x110 <_g_u16Mlx4StateCheckCounter>
    75c4:	aeda 03e8 	cmp	A, #1000
    75c8:	1c05      	jnc	0x75d4 <_main+0x5fa>
    75ca:	62d8 010e 	lod	AL, 0x10e <_g_u8Mlx4ErrorState>
    75ce:	8c00      	cmp	AL, #0
    75d0:	1a81      	jsl	0x75d4 <_main+0x5fa>
    75d2:	0037      	jmp	0x7642 <_main+0x668>
			{
				/* Didn't receive MLX4 LIN command and/or data-request in the last period, or need immediate reset */
				g_u16Mlx4StateCheckCounter = 0;										/* MLX4 State check counter reset; MLX4 still active */
    75d4:	7800      	lod	Y, #0
    75d6:	5ad8 0110 	mov	0x110 <_g_u16Mlx4StateCheckCounter>, Y
				if ( ((g_u8Mlx4ErrorState & (uint8) C_MLX4_STATE_IMMEDIATE_RST) != 0) ||
    75da:	62d8 010e 	lod	AL, 0x10e <_g_u8Mlx4ErrorState>
    75de:	8c00      	cmp	AL, #0
    75e0:	1a8b      	jsl	0x75f8 <_main+0x61e>
    75e2:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    75e4:	b440      	and	A, #64
    75e6:	1d2a      	jne	0x763c <_main+0x662>
    75e8:	612e      	lod	AL, dp:0x2e <_g_e8MotorRequest>
    75ea:	8c06      	cmp	AL, #6
    75ec:	1927      	je	0x763c <_main+0x662>
    75ee:	7009      	lod	A, #9
    75f0:	82db 5b68 	callf	0x5b68 <_ml_GetState>
    75f4:	acff      	cmp	A, #-1
    75f6:	1d22      	jne	0x763c <_main+0x662>
#endif /* (__MLX_PLTF_VERSION_MAJOR__ == 4) */
#if (__MLX_PLTF_VERSION_MAJOR__ == 3)
					&& (ml_GetState() == ml_stINVALID) ) )					/* MMP130811-1 */
#endif /*((__MLX_PLTF_VERSION_MAJOR__ == 3) */
		{
			g_u8Mlx4ErrorState++;
    75f8:	62d8 010e 	lod	AL, 0x10e <_g_u8Mlx4ErrorState>
    75fc:	8001      	add	AL, #1
    75fe:	42d8 010e 	mov	0x10e <_g_u8Mlx4ErrorState>, AL
			if ( g_u8Mlx4ErrorState >= (uint8) C_MLX4_STATE_ERROR_THRSHLD )
    7602:	8c03      	cmp	AL, #3
    7604:	1a1e      	jule	0x7642 <_main+0x668>
			{
				/* Signal Error; Reset MLX4 */
				MLX4_RESET();
    7606:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    760a:	94fe      	and	AL, #-2
    760c:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
				NOP();
    7610:	0000      	nop
				NOP();
    7612:	0000      	nop
				NOP();
    7614:	0000      	nop
				MLX4_START();
    7616:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    761a:	8401      	or	AL, #1
    761c:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
				if ( (g_u8Mlx4ErrorState & C_MLX4_STATE_NOT_LOGGED) == 0 )	/* MMP131126-1 */
    7620:	62d8 010e 	lod	AL, 0x10e <_g_u8Mlx4ErrorState>
    7624:	b440      	and	A, #64
    7626:	1d04      	jne	0x7630 <_main+0x656>
				{
					SetLastError( (uint8) C_ERR_MLX4_RESTART);
    7628:	72da 00fa 	lod	A, #250
    762c:	82db 89f6 	callf	0x89f6 <_SetLastError>
				}
				LIN_Init( TRUE);										/* Re-initialise LIN interface w/o changing position */
    7630:	7001      	lod	A, #1
    7632:	1111      	call	0x7856 <_LIN_Init>
				g_u8Mlx4ErrorState = 0;
    7634:	6000      	lod	AL, #0
    7636:	42d8 010e 	mov	0x10e <_g_u8Mlx4ErrorState>, AL
    763a:	0003      	jmp	0x7642 <_main+0x668>
			}
		}
		else
		{
			g_u8Mlx4ErrorState = 0;
    763c:	6400      	lod	YL, #0
    763e:	46d8 010e 	mov	0x10e <_g_u8Mlx4ErrorState>, YL
		}

		/* ********************************** */
		/* *** o. Background System check *** */
		/* ********************************** */
		if ( (u8BackgroundSchedulerTaskID == 0) || (u8BackgroundSchedulerTaskID == 128) )
    7642:	7215      	lod	A, [S-22]
    7644:	1902      	je	0x764a <_main+0x670>
    7646:	8c80      	cmp	AL, #-128
    7648:	1d13      	jne	0x7670 <_main+0x696>
		{
#if (LINPROT == LIN2J_VALVE_GM)
			if ( RamBackgroundTest( 0) == FALSE )								/* Check RAM against NVRAM User-page */
    764a:	7000      	lod	A, #0
    764c:	82db 6d10 	callf	0x6d10 <_RamBackgroundTest>
    7650:	ac00      	cmp	A, #0
    7652:	1d0a      	jne	0x7668 <_main+0x68e>
				if ( RamBackgroundTest( u8BackgroundSchedulerTaskID ? 1 : 0) == FALSE )	/* Check RAM against NVRAM User-page #1/#2 */
#endif /* (LINPROT == LIN2J_VALVE_GM) */
				{
					/* MMP150925-1: RAM g_NvramUser structure not same as NVRAM Page #1.1.
					 * Either System RAM is corrupted or the NVRAM. Allow one time NVRAM reload */
					if ( l_u8RamPreError == FALSE )
    7654:	62d8 0108 	lod	AL, 0x108 <_l_u8RamPreError>
    7658:	1d04      	jne	0x7662 <_main+0x688>
					{
						NVRAM_LoadAll();
    765a:	82db 599a 	callf	0x599a <_NVRAM_LoadAll>
						l_u8RamPreError = TRUE;
    765e:	6001      	lod	AL, #1
    7660:	0004      	jmp	0x766a <_main+0x690>
					}
					else
					{
						SetLastError( (uint8) C_ERR_RAM_BG);						/* Log RAM failure */
    7662:	72da 00f8 	lod	A, #248
    7666:	000f      	jmp	0x7686 <_main+0x6ac>
#endif /* (LINPROT == LIN2J_VALVE_GM) */
					}
				}
				else
				{
					l_u8RamPreError = FALSE;										/* Error is gone (caused by wrong NVRAM shadow-RAM) */
    7668:	6000      	lod	AL, #0
    766a:	42d8 0108 	mov	0x108 <_l_u8RamPreError>, AL
    766e:	0018      	jmp	0x76a0 <_main+0x6c6>
				}
		}
		else if ( (FL_CTRL0 & FL_DETECT) != 0 )									/* MMP150603-2 */
    7670:	72d8 2026 	lod	A, 0x2026 <__ep__+0x1026>
    7674:	b401      	and	A, #1
    7676:	1914      	je	0x76a0 <_main+0x6c6>
		{
			if ( FlashBackgroundTest( C_FLASH_SEGMENT_SZ) == C_FLASH_CRC_FAILED )	/* Check Flash/ROM Memory Checksum (max. 250us) */
    7678:	7004      	lod	A, #4
    767a:	82db 6d3a 	callf	0x6d3a <_FlashBackgroundTest>
    767e:	ac00      	cmp	A, #0
    7680:	1d0f      	jne	0x76a0 <_main+0x6c6>
			{
				SetLastError( (uint8) C_ERR_FLASH_BG);
    7682:	72da 00f9 	lod	A, #249
    7686:	82db 89f6 	callf	0x89f6 <_SetLastError>
#if (LINPROT == LIN2J_VALVE_GM)
				MLX4_RESET();													/* Reset the Mlx4   */
    768a:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    768e:	94fe      	and	AL, #-2
    7690:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
				bistResetInfo = C_CHIP_STATE_LIN_CMD_RESET;
    7694:	7ada 3072 	lod	Y, #12402
    7698:	5ad8 0338 	mov	0x338 <_bistResetInfo>, Y
				MLX16_RESET();													/* Reset the Mlx16  */
    769c:	82db 5920 	callf	0x5920 <_MLX16_RESET>
#endif /* (LINPROT == LIN2J_VALVE_GM) */
			}
		}
		u8BackgroundSchedulerTaskID++; 
    76a0:	6215      	lod	AL, [S-22]
    76a2:	8001      	add	AL, #1
    76a4:	5cf2      	usex	A
    76a6:	5215      	mov	[S-22], A
#if _SUPPORT_MLX16_HALT
		/* ************************************* */
		/* *** r. Power-saving (non-running) *** */
		/* ************************************* */
		/* In case MLX4 is inactive, don't enter HALT mode, because the chip enters SLEEP mode which will stop the Core-timer as well */
		if ( ((g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING) == 0) && (g_u8MotorStopDelay == 0) && ((CONTROL & M4_RB) != 0) && (g_u8LinInFrameBufState == C_LIN_IN_FREE) )
    76a8:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    76aa:	b401      	and	A, #1
    76ac:	1901      	je	0x76b0 <_main+0x6d6>
    76ae:	0062      	jmp	0x7774 <_main+0x79a>
    76b0:	6137      	lod	AL, dp:0x37 <_g_u8MotorStopDelay>
    76b2:	1901      	je	0x76b6 <_main+0x6dc>
    76b4:	005f      	jmp	0x7774 <_main+0x79a>
    76b6:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    76ba:	b401      	and	A, #1
    76bc:	1d01      	jne	0x76c0 <_main+0x6e6>
    76be:	005a      	jmp	0x7774 <_main+0x79a>
    76c0:	62d8 011e 	lod	AL, 0x11e <_g_u8LinInFrameBufState>
    76c4:	1901      	je	0x76c8 <_main+0x6ee>
    76c6:	0056      	jmp	0x7774 <_main+0x79a>
		{
			uint16 u16XI0_Mask = XI0_MASK;
    76c8:	72d8 202a 	lod	A, 0x202a <__ep__+0x102a>
    76cc:	5207      	mov	[S-8], A
			uint16 u16IsrMask = MASK;
    76ce:	7ad8 2006 	lod	Y, 0x2006 <__ep__+0x1006>
    76d2:	5a05      	mov	[S-6], Y
			uint16 u16Timer1Ctrl = TMR1_CTRL;
    76d4:	72aa      	lod	A, io:0x2a <_g_e8MotorDirectionCCW>
    76d6:	5203      	mov	[S-4], A

			ADC_PowerOff();														/* Stop ADC, including turning off reference voltage (Approx: 0.6mA) */
    76d8:	82db 85dc 	callf	0x85dc <_ADC_PowerOff>
			DRVCFG |= DIS_SHOA;													/* Disable OpAmp for ADC measurement of shunt current (Approx: 0.6mA) */
    76dc:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    76e0:	a6da 0400 	or	A, #1024
    76e4:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A

			/* Setup wake-up timer event */
			TMR1_CTRL = (2 * TMRx_DIV0) | (0 * TMRx_MODE0) | TMRx_T_EBLK;		/* Timer mode 0, Divider 256 */
    76e8:	7ada 8001 	lod	Y, #32769
    76ec:	5aaa      	mov	io:0x2a <_g_e8MotorDirectionCCW>, Y
			TMR1_REGB = C_SLEEP_PERIOD;											/* Set sleep-period */
    76ee:	72da 155c 	lod	A, #5468
    76f2:	52ac      	mov	io:0x2c <_g_e8ErrorCoil>, A
			XI0_PEND = CLR_T1_INT4;												/* Clear (potentially) Timer1 second level interrupts (T1_INT4) */
    76f4:	7840      	lod	Y, #64
    76f6:	5ad8 2034 	mov	0x2034 <__ep__+0x1034>, Y
			XI0_MASK = EN_T1_INT4;												/* Disable Timer1 all 2nd level interrupts, except INT4 (CMP) */
    76fa:	5ad8 202a 	mov	0x202a <__ep__+0x102a>, Y
			PEND = CLR_EXT0_IT;
    76fe:	72da 0100 	lod	A, #256
    7702:	52d8 2008 	mov	0x2008 <__ep__+0x1008>, A
			MASK = EN_EXT4_IT | EN_EXT0_IT | EN_M4_SHE_IT;						/* Enable Diagnostics, Timer1 and MLX4 IRQ's only */
    7706:	7ada 1110 	lod	Y, #4368
    770a:	5ad8 2006 	mov	0x2006 <__ep__+0x1006>, Y
			TMR1_CTRL = (2 * TMRx_DIV0) | (0 * TMRx_MODE0) | TMRx_T_EBLK | TMRx_START;	/* Start timer */
    770e:	72da 8003 	lod	A, #32771
    7712:	52aa      	mov	io:0x2a <_g_e8MotorDirectionCCW>, A
			 * the LinInFrameBufState check and before the actual entering of
			 * the HALT-state. The LIN message is not lost, but delayed by the
			 * HALT time-out period. Below code blocks the IRQ's (post-pone)
			 * until the MLX16 enters HALT-state.
			 */
			__asm__("psup #0");													/* Block IRQ's */
    7714:	54d0      	psup	#0
			__asm__("lod AL, _g_u8LinInFrameBufState");							/* Check for LIN message received */
    7716:	62d8 011e 	lod	AL, 0x11e <_g_u8LinInFrameBufState>
			__asm__("jne _HALT_10");											/* Skip HALT in case LIN message received */
    771a:	1d0b      	jne	0x7732 <_main+0x758>
			__asm__("lod X, #_au16HaltZero");									/* X pointer to flash memory with 0x0000 (MMP150224-2) */
    771c:	7eda a174 	lod	X, #41332
			__asm__("lod AL, 0x2000");											/* Get MLX16 Control-state */
    7720:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
			__asm__("or  AL, #0x02");											/* Set HALT-state */
    7724:	8402      	or	AL, #2
			__asm__("mov R, #0");												/* Restore IRQ-state */
    7726:	4407      	mov	R, #0
			__asm__("pop M");
    7728:	72cb      	pop	M
			__asm__("mov 0x2000, AL");											/* Enter HALT-state */
    772a:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
			__asm__("mov A,[X]");												/* MMP150224-2 */
    772e:	72f8      	lod	A, [X]
			__asm__("jmp _HALT_20");											/* Leave HALT-state */
    7730:	0002      	jmp	0x7736 <_main+0x75c>
			__asm__("_HALT_10:");
			__asm__("mov R, #0");
    7732:	4407      	mov	R, #0
			__asm__("pop M");
    7734:	72cb      	pop	M
			__asm__("_HALT_20:");

			DRVCFG &= ~DIS_SHOA;												/* Enable OpAmp for ADC measurement of shunt current (Approx: 0.6mA) */
    7736:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    773a:	b6da fbff 	and	A, #64511
    773e:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A

			{
				uint16 u16TimerCnt = TMR1_CNT;									/* Take a copy of the Timer-count value */
    7742:	7ab0      	lod	Y, io:0x30 <_l_u8SynchFieldErrorCounter>
    7744:	5a01      	mov	[S-2], Y
				TMR1_CTRL = u16Timer1Ctrl & ~TMRx_START;						/* Stop Timer */
    7746:	7203      	lod	A, [S-4]
    7748:	b4fd      	and	A, #-3
    774a:	52aa      	mov	io:0x2a <_g_e8MotorDirectionCCW>, A
				XI0_PEND = u16XI0_Mask;											/* Clear (potentially) Timer1 second level interrupts (T1_INT4) */
    774c:	7207      	lod	A, [S-8]
    774e:	52d8 2034 	mov	0x2034 <__ep__+0x1034>, A
				XI0_MASK = u16XI0_Mask;											/* Restore Timer1 interrupt mask */
    7752:	52d8 202a 	mov	0x202a <__ep__+0x102a>, A
				PEND = CLR_EXT0_IT;
    7756:	7ada 0100 	lod	Y, #256
    775a:	5ad8 2008 	mov	0x2008 <__ep__+0x1008>, Y
				MASK = u16IsrMask;												/* Restore 1st level interrupt mask */
    775e:	7205      	lod	A, [S-6]
    7760:	52d8 2006 	mov	0x2006 <__ep__+0x1006>, A

				if ( g_u8MotorHoldingCurrState != FALSE )
    7764:	62d8 013e 	lod	AL, 0x13e <_g_u8MotorHoldingCurrState>
    7768:	1902      	je	0x776e <_main+0x794>
							l_u16AdcHoldMode = (l_u16AdcHoldMode + 1);
						}
					}
					ADC_Start( l_u16AdcHoldMode);
#else  /* _SUPPORT_PHASE_SHORT_DET */
					ADC_Start();
    776a:	82db 85ac 	callf	0x85ac <_ADC_Start>
#endif /* _SUPPORT_PHASE_SHORT_DET */
				}
				Timer_SleepCompensation( u16TimerCnt);							/* Compensate Timer counters for sleep-period */
    776e:	7201      	lod	A, [S-2]
    7770:	82db a03a 	callf	0xa03a <_Timer_SleepCompensation>

#if _SUPPORT_IOREG_CHECK
		/* ************************************ */
		/* *** s. Critical peripheral check *** */
		/* ************************************ */
		if ( (g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_APPL_STOP) == 0x00 )	/* If application is NOT stopped ... */
    7774:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    7776:	b440      	and	A, #64
    7778:	1901      	je	0x777c <_main+0x7a2>
    777a:	006a      	jmp	0x7850 <_main+0x876>
		{
			/* Check: Motor commutation timer disabled */
			if ( (TMR1_CTRL & TMRx_T_EBLK) == 0 )
    777c:	72aa      	lod	A, io:0x2a <_g_e8MotorDirectionCCW>
    777e:	b401      	and	A, #1
    7780:	1d0e      	jne	0x779e <_main+0x7c4>
			{
				/* Communication timer is disabled; Motor is stopped too */
				if ( g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING )
    7782:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    7784:	b401      	and	A, #1
    7786:	1904      	je	0x7790 <_main+0x7b6>
				{
					TMR1_CTRL = C_TMRx_CTRL_MODE0 | TMRx_START;					/* Start timer mode 0 */
    7788:	7ada 4003 	lod	Y, #16387
    778c:	5aaa      	mov	io:0x2a <_g_e8MotorDirectionCCW>, Y
    778e:	0003      	jmp	0x7796 <_main+0x7bc>
				}
				else
				{
					TMR1_CTRL = C_TMRx_CTRL_MODE0;								/* Timer mode 0 */
    7790:	72da 4001 	lod	A, #16385
    7794:	52aa      	mov	io:0x2a <_g_e8MotorDirectionCCW>, A
				}
				SetLastError( (uint8) C_ERR_IOREG);
    7796:	72da 00fc 	lod	A, #252
    779a:	82db 89f6 	callf	0x89f6 <_SetLastError>
			}
			/* Check: Administrative timer disabled */
			if ( (TIMER & TMR_EN) == 0 )							
    779e:	7286      	lod	A, io:0x6 <_LinMess2>
    77a0:	ac00      	cmp	A, #0
    77a2:	1a87      	jsl	0x77b2 <_main+0x7d8>
			{
				TIMER = TMR_EN | CT_PERIODIC_RATE;
    77a4:	7ada 81f4 	lod	Y, #33268
    77a8:	5a86      	mov	io:0x6 <_LinMess2>, Y
				SetLastError( (uint8) C_ERR_IOREG);
    77aa:	72da 00fc 	lod	A, #252
    77ae:	82db 89f6 	callf	0x89f6 <_SetLastError>
			}
			/* Check: IRQ-Mask (Respectively: Diagnostics, Timer1, CoreTimer and LIN-Communication */
			if ( (MASK & (EN_EXT4_IT | EN_EXT0_IT | EN_TIMER_IT | EN_M4_SHE_IT)) != (EN_EXT4_IT | EN_EXT0_IT | EN_TIMER_IT | EN_M4_SHE_IT) )
    77b2:	72d8 2006 	lod	A, 0x2006 <__ep__+0x1006>
    77b6:	b6da 1130 	and	A, #4400
    77ba:	aeda 1130 	cmp	A, #4400
    77be:	190e      	je	0x77dc <_main+0x802>
			{
				PEND = (EN_EXT4_IT | EN_EXT0_IT | EN_TIMER_IT | EN_M4_SHE_IT);
    77c0:	72da 1130 	lod	A, #4400
    77c4:	52d8 2008 	mov	0x2008 <__ep__+0x1008>, A
				MASK |= (EN_EXT4_IT | EN_EXT0_IT | EN_TIMER_IT | EN_M4_SHE_IT);
    77c8:	72d8 2006 	lod	A, 0x2006 <__ep__+0x1006>
    77cc:	a6da 1130 	or	A, #4400
    77d0:	52d8 2006 	mov	0x2006 <__ep__+0x1006>, A
				SetLastError( (uint8) C_ERR_IOREG);
    77d4:	72da 00fc 	lod	A, #252
    77d8:	82db 89f6 	callf	0x89f6 <_SetLastError>
			}
			/* Check: IRQ-priority (Respectively: Diagnostics, Timer1, CoreTimer) */
			if ( (PRIO & ((3u << 14) | (3u << 6) | (3u << 0))) != (/*((3-3) << 14) |*/ ((4-3) << 6) | ((6-3) << 0)) )
    77dc:	72d8 2004 	lod	A, 0x2004 <__ep__+0x1004>
    77e0:	b6da c0c3 	and	A, #49347
    77e4:	ac43      	cmp	A, #67
    77e6:	190b      	je	0x77fe <_main+0x824>
			{
				PRIO = (PRIO & ~((3u << 14) | (3u << 6) | (3u << 0))) | (/*((3-3) << 14) |*/ ((4-3) << 6) | ((6-3) << 0));
    77e8:	72d8 2004 	lod	A, 0x2004 <__ep__+0x1004>
    77ec:	b6da 3f3c 	and	A, #16188
    77f0:	a443      	or	A, #67
    77f2:	52d8 2004 	mov	0x2004 <__ep__+0x1004>, A
				SetLastError( (uint8) C_ERR_IOREG);
    77f6:	72da 00fc 	lod	A, #252
    77fa:	82db 89f6 	callf	0x89f6 <_SetLastError>
			}
			/* Check: 2nd level IRQ Timer1 */
			if ( (XI0_MASK & EN_T1_INT4) == 0 )
    77fe:	72d8 202a 	lod	A, 0x202a <__ep__+0x102a>
    7802:	b440      	and	A, #64
    7804:	1d09      	jne	0x7818 <_main+0x83e>
			{
				XI0_PEND = EN_T1_INT4;
    7806:	7840      	lod	Y, #64
    7808:	5ad8 2034 	mov	0x2034 <__ep__+0x1034>, Y
				XI0_MASK = EN_T1_INT4;
    780c:	5ad8 202a 	mov	0x202a <__ep__+0x102a>, Y
				SetLastError( (uint8) C_ERR_IOREG);
    7810:	72da 00fc 	lod	A, #252
    7814:	82db 89f6 	callf	0x89f6 <_SetLastError>
			}
			/* Check: 2nd level IRQ Diagnostics */
			if ( (XI4_MASK & (XI4_OVT | XI4_UV | XI4_OV | XI4_OC_DRV)) != C_DIAG_MASK )
    7818:	72d8 2032 	lod	A, 0x2032 <__ep__+0x1032>
    781c:	b6da e100 	and	A, #57600
    7820:	aeda e100 	cmp	A, #57600
    7824:	190a      	je	0x783a <_main+0x860>
			{
				XI4_PEND = C_DIAG_MASK;											/* MMP150409-1 */
    7826:	72da e100 	lod	A, #57600
    782a:	52d8 203c 	mov	0x203c <__ep__+0x103c>, A
				XI4_MASK = C_DIAG_MASK;											/* MMP150409-1 */
    782e:	52d8 2032 	mov	0x2032 <__ep__+0x1032>, A
				SetLastError( (uint8) C_ERR_IOREG);
    7832:	72da 00fc 	lod	A, #252
    7836:	82db 89f6 	callf	0x89f6 <_SetLastError>
			{
				ADC_DBASE = (uint16) &g_AdcMotorRunStepper4.UnfilteredDriverCurrent;
				SetLastError( (uint8) C_ERR_IOREG);
			}
#endif /* 0 */
			if ( ((g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING) != 0) && ((DRVCFG & (DRV_CFG_T|DRV_CFG_W|DRV_CFG_V|DRV_CFG_U)) == 0) )
    783a:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    783c:	b401      	and	A, #1
    783e:	1908      	je	0x7850 <_main+0x876>
    7840:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    7844:	8c00      	cmp	AL, #0
    7846:	1d04      	jne	0x7850 <_main+0x876>
			{
				/* Driver have been disabled */
				SetLastError( (uint8) C_ERR_IOREG);
    7848:	72da 00fc 	lod	A, #252
    784c:	82db 89f6 	callf	0x89f6 <_SetLastError>
			}
		}
#endif /* _SUPPORT_IOREG_CHECK */

		//DiagnosticCheck();//Ban
		RteExv2Lin();
    7850:	82db 6e42 	callf	0x6e42 <_RteExv2Lin>
#endif /* _SUPPORT_DIG_LIN */

	/* ******************************** */
	/* *** U. Main application loop *** */
	/* ******************************** */
	for(;;)
    7854:	049d      	jmp	0x7190 <_main+0x1b6>

00007856 <_LIN_Init>:
 *
 * Initialise LIN communication interface.
 * Default start-up, at 9600 Baud
 * ****************************************************************************	*/
void LIN_Init( uint16 u16WarmStart)
{
    7856:	5801      	inc	S, #2
    7858:	5201      	mov	[S-2], A
	/* Initialise LIN Communication */
	LIN_XCFG &= ~DISTERM;														/* Enable LIN pull-up resistor (MMP150811-2) */
    785a:	72a0      	lod	A, io:0x20 <_g_i16MotorVoltage>
    785c:	b4fb      	and	A, #-5
    785e:	52a0      	mov	io:0x20 <_g_i16MotorVoltage>, A
	(void) ml_InitLinModule();													/* Initialise the LIN module */
    7860:	82db 5e0c 	callf	0x5e0c <_ml_InitLinModule>

	/* Setup LIN baudrate */
#if (__MLX_PLTF_VERSION_MAJOR__ == 4)
#if (_SUPPORT_AUTO_BAUDRATE != FALSE)
	/* Auto baudrate only on first LIN frame */
	(void) ml_SetAutoBaudRateMode( ML_ABR_ON_FIRST_FRAME);						/* MMP141215-1 */
    7864:	7000      	lod	A, #0
    7866:	82db 5b9a 	callf	0x5b9a <_ml_SetAutoBaudRateMode>
						  ML_ENABLED,											/* StateChangeSignal */
						  1,													/* Light-sleep mode with timeout */
						  ML_SLEWHIGH);											/* SlewRate: ML_SLEWHIGH=20kbps / ML_SLEWLOW=10kbps */
#endif /* ((LIN_BR < 10000) && (_SUPPORT_AUTO_BAUDRATE == FALSE)) */
#elif (__MLX_PLTF_VERSION_MAJOR__ == 4)
	(void) ml_SetOptions( 1U,													/* IDStopBitLength = 1.5 Bit (Melexis LIN Master has 1.5 Tbit stop bit */
    786a:	54ca 0000 	pushw	#0
    786e:	54ca 0001 	pushw	#1
    7872:	54ca 0000 	pushw	#0
    7876:	7001      	lod	A, #1
    7878:	82db 5ae0 	callf	0x5ae0 <_ml_SetOptions>
						  ML_LIGHTSLEEP);										/* SleepMode: light-sleep mode */

#if ((LIN_BR < 12000) && (_SUPPORT_AUTO_BAUDRATE == FALSE))
	(void) ml_SetSlewRate( ML_SLEWLOW);
#else /* ((LIN_BR < 10000) && (_SUPPORT_AUTO_BAUDRATE == FALSE)) */
	(void) ml_SetSlewRate( ML_SLEWHIGH);
    787c:	7000      	lod	A, #0
    787e:	82db 5ad8 	callf	0x5ad8 <_ml_SetSlewRate>
#if ((LINPROT & LINXX) == LIN2X)
	LIN_2x_Init( u16WarmStart);
#endif /* ((LINPROT & LINXX) == LIN2X) */

#if ((LINPROT & LINXX) == LIN2J)
	LIN_SAE_J2602_Init( u16WarmStart);
    7882:	7207      	lod	A, [S-8]
    7884:	10d1      	call	0x7a28 <_LIN_SAE_J2602_Init>
#endif /* ((LINPROT & LINXX) == LIN2J) */

	(void) ml_Connect();
    7886:	82db 5ba2 	callf	0x5ba2 <_ml_Connect>
	g_u8ErrorCommBusTimeout = FALSE;
    788a:	6000      	lod	AL, #0
    788c:	42d8 011c 	mov	0x11c <_g_u8ErrorCommBusTimeout>, AL
    7890:	5c05      	dec	S, #6
    7892:	5403      	ret	#4

00007894 <_mlu_ApplicationStop>:
 *  LIN API event: mlu_ApplicationStop
 * ****************************************************************************	*/
ml_Status mlu_ApplicationStop(void)
{
	/* Stop motor (e.g. disconnect drivers) */
	MotorDriverStop( (uint16) C_STOP_IMMEDIATE);								/* Application stop */
    7894:	7001      	lod	A, #1
    7896:	82db 9246 	callf	0x9246 <_MotorDriverStop>
	SetLastError( (uint8) C_ERR_APPL_STOP);
    789a:	72da 00a8 	lod	A, #168
    789e:	82db 89f6 	callf	0x89f6 <_SetLastError>

	/* Disable all IRQ's, except LIN */
	XI0_MASK = 0;
    78a2:	7000      	lod	A, #0
    78a4:	52d8 202a 	mov	0x202a <__ep__+0x102a>, A
	XI1_MASK = 0;
    78a8:	52d8 202c 	mov	0x202c <__ep__+0x102c>, A
	XI2_MASK = 0;
    78ac:	52d8 202e 	mov	0x202e <__ep__+0x102e>, A
	XI3_MASK = 0;
    78b0:	52d8 2030 	mov	0x2030 <__ep__+0x1030>, A
	XI4_MASK = 0;
    78b4:	52d8 2032 	mov	0x2032 <__ep__+0x1032>, A
	MASK = EN_M4_SHE_IT;														/* Disable all interrupts, except LIN M4_SHE_IT */
    78b8:	7010      	lod	A, #16
    78ba:	52d8 2006 	mov	0x2006 <__ep__+0x1006>, A
	g_e8MotorStatusMode |= (uint8) C_MOTOR_STATUS_APPL_STOP;					/* Don't perform periodic MLX4 Status checks */
    78be:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    78c0:	8440      	or	AL, #64
    78c2:	41ed      	mov	dp:0xed <_g_e8MotorStatusMode>, AL

	return ( ML_SUCCESS );														/* Return that the application has stopped */
} /* End of mlu_ApplicationStop */
    78c4:	7000      	lod	A, #0
    78c6:	5401      	ret

000078c8 <_mlu_DataRequest>:

/* ****************************************************************************	*
 *  LIN API event: Data Request (slave TX)
 * ****************************************************************************	*/
void mlu_DataRequest( ml_MessageID MessageID) 
{
    78c8:	7ae2      	lod	Y, A
	g_u8ErrorCommBusTimeout = FALSE;											/* Data requested; No longer Bus time-out */
    78ca:	6000      	lod	AL, #0
    78cc:	42d8 011c 	mov	0x11c <_g_u8ErrorCommBusTimeout>, AL
	g_u8EmergencyRunOcc = FALSE;//clear emergency run flag,Ban
    78d0:	4127      	mov	dp:0x27 <_g_u8EmergencyRunOcc>, AL
	(void) ml_ReleaseBuffer();													/* See MELEXIS doc */
#endif /* (__MLX_PLTF_VERSION_MAJOR__ == 3) */
#endif /* ((LINPROT & LINXX) == LIN2X) */

#if ((LINPROT & LINXX) == LIN2J)												/* LIN 2.x_J2602 */
	if ( MessageID == (uint8) mlxRFR_DIAG )
    78d2:	62e8      	lod	AL, YL
    78d4:	8c11      	cmp	AL, #17
    78d6:	1d16      	jne	0x7904 <_mlu_DataRequest+0x3c>
	{
		/* Diagnostic */
		if ( g_u8BufferOutID == (uint8) QR_RFR_DIAG )
    78d8:	6131      	lod	AL, dp:0x31 <_g_u8BufferOutID>
    78da:	8c07      	cmp	AL, #7
    78dc:	1d10      	jne	0x78fe <_mlu_DataRequest+0x36>
		{
			RFR_DIAG *pDiag = &g_DiagResponse;
			uint16 *src = (uint16 *) pDiag;
			uint16 *dst = (uint16 *) LinFrameDataBuffer;
			dst[0] = src[0];
    78de:	7144      	lod	A, dp:0x44 <_g_DiagResponse>
    78e0:	51cc      	mov	dp:0xcc <_LinFrameDataBuffer>, A
			dst[1] = src[1];
    78e2:	7146      	lod	A, dp:0x46 <_g_DiagResponse+0x2>
    78e4:	51ce      	mov	dp:0xce <_LinFrameDataBuffer+0x2>, A
			dst[2] = src[2];
    78e6:	7148      	lod	A, dp:0x48 <_g_DiagResponse+0x4>
    78e8:	51d0      	mov	dp:0xd0 <_LinFrameDataBuffer+0x4>, A
			dst[3] = src[3];
    78ea:	714a      	lod	A, dp:0x4a <_g_DiagResponse+0x6>
    78ec:	51d2      	mov	dp:0xd2 <_LinFrameDataBuffer+0x6>, A

			(void) ml_DataReady( ML_END_OF_TX_DISABLED);
    78ee:	7000      	lod	A, #0
    78f0:	82db 5aa4 	callf	0x5aa4 <_ml_DataReady>
			l_u8SynchFieldErrorCounter = 0;										/* Reset sync field errors */
    78f4:	6000      	lod	AL, #0
    78f6:	4130      	mov	dp:0x30 <_l_u8SynchFieldErrorCounter>, AL
			g_u8BufferOutID = (uint8) QR_INVALID;								/* Invalidate LIN output buffer */
    78f8:	60ff      	lod	AL, #-1
    78fa:	4131      	mov	dp:0x31 <_g_u8BufferOutID>, AL
    78fc:	5401      	ret
		}
		else
		{
			(void) ml_DiscardFrame();											/* Output buffer response doesn't match requested response */
    78fe:	82db 5af6 	callf	0x5af6 <_ml_DiscardFrame>
    7902:	5401      	ret
		}
	}
#if (LINPROT == LIN2J_VALVE_GM)
	else if ( (g_u8NAD >= (uint8) C_MIN_J2602_NAD) && (g_u8NAD <= (uint8) C_MAX_J2602_NAD) )
    7904:	62d8 0034 	lod	AL, 0x34 <_g_u8NAD>
    7908:	80a0      	add	AL, #-96
    790a:	8c0d      	cmp	AL, #13
    790c:	1e07      	jug	0x791c <_mlu_DataRequest+0x54>
	{
		if ( MessageID == (uint8) mlxACT_STATUS )
    790e:	62e8      	lod	AL, YL
    7910:	8c01      	cmp	AL, #1
    7912:	1d04      	jne	0x791c <_mlu_DataRequest+0x54>
		{
			/* Status AGS */
			HandleActRfrSta();
    7914:	1183      	call	0x7c1c <_HandleActRfrSta>
			(void) ml_DataReady( ML_END_OF_TX_ENABLED);
    7916:	7001      	lod	A, #1
    7918:	82db 5aa4 	callf	0x5aa4 <_ml_DataReady>
    791c:	5401      	ret

0000791e <_mlu_DataTransmitted>:
	if ( g_u8SAE_SendErrorState )
	{
		g_u8SAE_ErrorFlags &= ~(uint8)(1 << g_u8SAE_SendErrorState);			/* Clear error-flags which have been transmitted */
	}
#else  /* (LINPROT != LIN2J_VALVE_GM) */
	if ( g_u8SAE_SendErrorState )
    791e:	62d8 0033 	lod	AL, 0x33 <_g_u8SAE_SendErrorState>
    7922:	1903      	je	0x792a <_mlu_DataTransmitted+0xc>
	{
		g_u8ErrorCommunication = FALSE;
    7924:	6000      	lod	AL, #0
    7926:	42d8 011d 	mov	0x11d <_g_u8ErrorCommunication>, AL
    792a:	5401      	ret

0000792c <_mlu_ErrorDetected>:

/* ****************************************************************************	*
 *  LIN API event: mlu_ErrorDetected
 * ****************************************************************************	*/
void mlu_ErrorDetected( ml_LinError Error)
{
    792c:	5801      	inc	S, #2
    792e:	5201      	mov	[S-2], A
	SetLastError( (uint8) C_ERR_LIN_COMM | ((uint8)Error & 0x1F));
    7930:	a6da 0080 	or	A, #128
    7934:	b6da 009f 	and	A, #159
    7938:	82db 89f6 	callf	0x89f6 <_SetLastError>
	LIN2x_ErrorHandling( Error);
#if (__MLX_PLTF_VERSION_MAJOR__ == 3)
	(void) ml_ReleaseBuffer(); 													/* Release the buffer in case there was a reception overflow */
#endif /* (__MLX_PLTF_VERSION_MAJOR__ == 3) */
#elif (LINPROT == LIN2J_VALVE_GM)
	LIN2J_ErrorHandling( Error);
    793c:	7201      	lod	A, [S-2]
    793e:	1206      	call	0x7d4c <_LIN2J_ErrorHandling>
    7940:	5403      	ret	#4

00007942 <_mlu_LinSleepMode>:
{
	/*
	 * MLX4 FW handles Goto Sleep frame (0x3C, 0x00 ...) automatically
	 * and does not report it via mlu_MessageReceived event.
	 */
	if ( (Reason == ml_reasonMaster) || (Reason == ml_reasonCommand) )			/* MMP130918-1 */
    7942:	7ae2      	lod	Y, A
    7944:	a0ff      	add	A, #-1
    7946:	ac01      	cmp	A, #1
    7948:	1e02      	jug	0x794e <_mlu_LinSleepMode+0xc>
	{
		{
			g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_SLEEP;
    794a:	6006      	lod	AL, #6
    794c:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
		}
	}

	if ( (Reason == ml_reasonTimeOut) || (Reason == ml_reasonTimeOutDominant) )
    794e:	72e6      	lod	A, Y
    7950:	a0fa      	add	A, #-6
    7952:	ac01      	cmp	A, #1
    7954:	1e01      	jug	0x7958 <_mlu_LinSleepMode+0x16>
		/*
		 * LIN bus was inactive for 4 seconds without receiving an explicit
		 * "Go-to-Sleep frame". This can be considered as a failure of the Master or
		 * PHY layer. Slave can enter limp-home mode.
		 */
		HandleBusTimeout();
    7956:	11e2      	call	0x7d1c <_HandleBusTimeout>
    7958:	5401      	ret

0000795a <_mlu_MessageReceived>:

/* ****************************************************************************	*
 *  LIN API event: MessageReceived (slave RX)
 * ****************************************************************************	*/
void mlu_MessageReceived( ml_MessageID byMessageID)
{
    795a:	7ae2      	lod	Y, A
	if ( g_u8LinInFrameBufState != (uint8) C_LIN_IN_FULL )
    795c:	62d8 011e 	lod	AL, 0x11e <_g_u8LinInFrameBufState>
    7960:	8c01      	cmp	AL, #1
    7962:	1911      	je	0x7986 <_mlu_MessageReceived+0x2c>
	{
		/* Buffer is either empty or message is postpone (overwrite allowed) */
		l_u8LinInFrameMsgID = byMessageID;
    7964:	454c      	mov	dp:0x4c <_l_u8LinInFrameMsgID>, YL

		/* LIN In-frame buffer to a Copy LIN In-frame buffer */
		{
			uint16 *pu16Source = (uint16 *) LinFrameDataBuffer;
			uint16 *pu16Target = (uint16 *) &g_LinCmdFrameBuffer;
			*pu16Target = *pu16Source;
    7966:	71cc      	lod	A, dp:0xcc <_LinFrameDataBuffer>
    7968:	513c      	mov	dp:0x3c <__data_dp_end>, A
			pu16Target++;
			pu16Source++;
			*pu16Target = *pu16Source;
    796a:	71ce      	lod	A, dp:0xce <_LinFrameDataBuffer+0x2>
    796c:	513e      	mov	dp:0x3e <__data_dp_end+0x2>, A
			pu16Target++;
			pu16Source++;
			*pu16Target = *pu16Source;
    796e:	71d0      	lod	A, dp:0xd0 <_LinFrameDataBuffer+0x4>
    7970:	5140      	mov	dp:0x40 <__data_dp_end+0x4>, A
			pu16Target++;
			pu16Source++;
			*pu16Target = *pu16Source;
    7972:	71d2      	lod	A, dp:0xd2 <_LinFrameDataBuffer+0x6>
    7974:	5142      	mov	dp:0x42 <__data_dp_end+0x6>, A
		}
#if (__MLX_PLTF_VERSION_MAJOR__ == 3)
		(void) ml_ReleaseBuffer();												/* See MELEXIS doc */
#endif /* (__MLX_PLTF_VERSION_MAJOR__ == 3) */
		g_u8LinInFrameBufState = (uint8) C_LIN_IN_FULL;
    7976:	6001      	lod	AL, #1
    7978:	42d8 011e 	mov	0x11e <_g_u8LinInFrameBufState>, AL
		g_u8ErrorCommBusTimeout = FALSE;										/* Frame received; No longer Bus time-out */
    797c:	6000      	lod	AL, #0
    797e:	42d8 011c 	mov	0x11c <_g_u8ErrorCommBusTimeout>, AL
		g_u8EmergencyRunOcc = FALSE;//clear emergency run flag,Ban
    7982:	4127      	mov	dp:0x27 <_g_u8EmergencyRunOcc>, AL
		LinFrame[0] = 0x00;														/* Clear NAD address */
    7984:	4108      	mov	dp:0x8 <__bist_stat_size>, AL
    7986:	5401      	ret

00007988 <_HandleLinInMsg>:
	}
} /* End of mlu_MessageReceived() */

void HandleLinInMsg( void)
{
    7988:	5801      	inc	S, #2
	if ( g_u8LinInFrameBufState == (uint8) C_LIN_IN_POSTPONE )
    798a:	62d8 011e 	lod	AL, 0x11e <_g_u8LinInFrameBufState>
    798e:	8c02      	cmp	AL, #2
    7990:	1d03      	jne	0x7998 <_HandleLinInMsg+0x10>
	{
		/* Last message postponed; Try again (without overwritten by LIN message ISR */
		g_u8LinInFrameBufState = (uint8) C_LIN_IN_FULL;
    7992:	6001      	lod	AL, #1
    7994:	42d8 011e 	mov	0x11e <_g_u8LinInFrameBufState>, AL
#endif /* (_SUPPORT_HVAC_GROUP_ADDRESS != FALSE) */								/* MMP150125-1 - End */
#endif /* (LINPROT == LIN2X_ACT44) */
#endif /* ((LINPROT & LINXX) == LIN2X) */

#if ((LINPROT & LINXX) == LIN2J)												/* LIN 2.x_J2602 */
	if ( l_u8LinInFrameMsgID == (uint8) mlxDFR_DIAG )
    7998:	614c      	lod	AL, dp:0x4c <_l_u8LinInFrameMsgID>
    799a:	4201      	mov	[S-2], AL
    799c:	8c10      	cmp	AL, #16
    799e:	1d02      	jne	0x79a4 <_HandleLinInMsg+0x1c>
	{
		/* Diagnostic frame */
		HandleDfrDiag();
    79a0:	1247      	call	0x7e30 <_HandleDfrDiag>
    79a2:	0008      	jmp	0x79b4 <_HandleLinInMsg+0x2c>
	}
#if (LINPROT == LIN2J_VALVE_GM)
	else if ( (g_u8NAD >= (uint8) C_MIN_J2602_NAD) && (g_u8NAD <= (uint8) C_MAX_J2602_NAD) && (l_u8LinInFrameMsgID == (uint8) mlxACT_CTRL) )
    79a4:	62d8 0034 	lod	AL, 0x34 <_g_u8NAD>
    79a8:	80a0      	add	AL, #-96
    79aa:	8c0d      	cmp	AL, #13
    79ac:	1e03      	jug	0x79b4 <_HandleLinInMsg+0x2c>
    79ae:	6201      	lod	AL, [S-2]
    79b0:	1d01      	jne	0x79b4 <_HandleLinInMsg+0x2c>
	{
		/* Control */
		HandleActCfrCtrl();
    79b2:	10c3      	call	0x7b3a <_HandleActCfrCtrl>
	}
#endif /* (LINPROT == LIN2J_VALVE_GM) */
#endif /* ((LINPROT & LINXX) == LIN2J) */

	if ( g_u8LinInFrameBufState != (uint8) C_LIN_IN_POSTPONE )
    79b4:	62d8 011e 	lod	AL, 0x11e <_g_u8LinInFrameBufState>
    79b8:	8c02      	cmp	AL, #2
    79ba:	1903      	je	0x79c2 <_HandleLinInMsg+0x3a>
	{
		/* LIN Message is handled; Release LIN message buffer */
		g_u8LinInFrameBufState = (uint8) C_LIN_IN_FREE;
    79bc:	6000      	lod	AL, #0
    79be:	42d8 011e 	mov	0x11e <_g_u8LinInFrameBufState>, AL
    79c2:	5403      	ret	#4

000079c4 <_mlu_AutoAddressingStep>:
/* ****************************************************************************	*
 *  LIN API event: mlu_AutoAddressingStep
 * ****************************************************************************	*/
void mlu_AutoAddressingStep( ml_uint8 StepNumber)
{
	(void) StepNumber; 
    79c4:	5401      	ret

000079c6 <_CalcProtectionBits>:
/* ****************************************************************************	*
 * CalcProtectionBits
 *
 * ****************************************************************************	*/
uint8 CalcProtectionBits( uint8 byFrameID)
{
    79c6:	7ee2      	lod	X, A
	byFrameID |= ((byFrameID & 0x01) ^ ((byFrameID & 0x02) >> 1) ^ ((byFrameID & 0x04) >> 2) ^ ((byFrameID & 0x10) >> 4)) ? 0x40 : 0x00;
    79c8:	7ae2      	lod	Y, A
    79ca:	f401      	and	Y, #1
    79cc:	b402      	and	A, #2
    79ce:	4472      	asr	A
    79d0:	fee2      	xor	Y, A
    79d2:	72ee      	lod	A, X
    79d4:	b404      	and	A, #4
    79d6:	44f2      	asr	A, #2
    79d8:	fee2      	xor	Y, A
    79da:	72ee      	lod	A, X
    79dc:	b410      	and	A, #16
    79de:	44f2      	asr	A, #2
    79e0:	44f2      	asr	A, #2
    79e2:	eee2      	cmp	Y, A
    79e4:	1903      	je	0x79ec <_CalcProtectionBits+0x26>
    79e6:	72ee      	lod	A, X
    79e8:	a440      	or	A, #64
    79ea:	0002      	jmp	0x79f0 <_CalcProtectionBits+0x2a>
    79ec:	72ee      	lod	A, X
    79ee:	5cf2      	usex	A
    79f0:	7ee2      	lod	X, A
	byFrameID |= (((byFrameID & 0x02) >> 1) ^ ((byFrameID & 0x08) >> 3) ^ ((byFrameID & 0x10) >> 4) ^ ((byFrameID & 0x20) >> 5)) ? 0x00 : 0x80;
    79f2:	7ae2      	lod	Y, A
    79f4:	f402      	and	Y, #2
    79f6:	4476      	asr	Y
    79f8:	b408      	and	A, #8
    79fa:	44f2      	asr	A, #2
    79fc:	4472      	asr	A
    79fe:	fee2      	xor	Y, A
    7a00:	72ee      	lod	A, X
    7a02:	b410      	and	A, #16
    7a04:	44f2      	asr	A, #2
    7a06:	44f2      	asr	A, #2
    7a08:	fee2      	xor	Y, A
    7a0a:	72ee      	lod	A, X
    7a0c:	b420      	and	A, #32
    7a0e:	44f2      	asr	A, #2
    7a10:	44f2      	asr	A, #2
    7a12:	4472      	asr	A
    7a14:	eee2      	cmp	Y, A
    7a16:	1903      	je	0x7a1e <_CalcProtectionBits+0x58>
    7a18:	72ee      	lod	A, X
    7a1a:	5cf2      	usex	A
    7a1c:	5401      	ret
    7a1e:	26da 0080 	or	X, #128
    7a22:	72ee      	lod	A, X
    7a24:	5cf2      	usex	A
	return ( byFrameID );
} /* End of CalcProtectionBits() */
    7a26:	5401      	ret

00007a28 <_LIN_SAE_J2602_Init>:
{
	(void) u16WarmStart;

#if (LINPROT == LIN2J_VALVE_GM)
	/* Check wake-up from SLEEP (MMP160613-2) */
	if ( ANA_INB & WAKEUP_LIN )
    7a28:	729e      	lod	A, io:0x1e <__ramfunc_size>
    7a2a:	b6da 0100 	and	A, #256
    7a2e:	655c      	lod	YL, dp:0x5c <_g_NvramUser+0x2>
    7a30:	ac00      	cmp	A, #0
    7a32:	1914      	je	0x7a5c <_LIN_SAE_J2602_Init+0x34>
	{
		g_u8NAD = g_NvramUser.NAD;
    7a34:	4534      	mov	dp:0x34 <_g_u8NAD>, YL
		l_u8ActDirection = g_NvramUser.MotorDirectionCCW;
    7a36:	616a      	lod	AL, dp:0x6a <_g_NvramUser+0x10>
    7a38:	b401      	and	A, #1
    7a3a:	4132      	mov	dp:0x32 <_l_u8ActDirection>, AL
		g_u16ActualPosition = g_u16TargetPosition = g_NvramUser.CPOS;
    7a3c:	7176      	lod	A, dp:0x76 <_g_NvramUser+0x1c>
    7a3e:	51f2      	mov	dp:0xf2 <_g_u16TargetPosition>, A
    7a40:	51f0      	mov	dp:0xf0 <_g_u16ActualPosition>, A
		{
			uint8 u8AppStatus = g_NvramUser.AppStatus;
    7a42:	6178      	lod	AL, dp:0x78 <_g_NvramUser+0x1e>
    7a44:	5cf2      	usex	A
			if ( u8AppStatus & 0x03 )
    7a46:	7ae2      	lod	Y, A
    7a48:	f403      	and	Y, #3
    7a4a:	1901      	je	0x7a4e <_LIN_SAE_J2602_Init+0x26>
				g_e8ErrorElectric = (uint8) (u8AppStatus & 0x03U);
    7a4c:	452d      	mov	dp:0x2d <_g_e8ErrorElectric>, YL
			if ( u8AppStatus & 0x08 )
    7a4e:	b408      	and	A, #8
    7a50:	1902      	je	0x7a56 <_LIN_SAE_J2602_Init+0x2e>
				g_u8EmergencyRunOcc = TRUE;
    7a52:	6001      	lod	AL, #1
    7a54:	4127      	mov	dp:0x27 <_g_u8EmergencyRunOcc>, AL
		}
		g_u8ChipResetOcc = FALSE;
    7a56:	6000      	lod	AL, #0
    7a58:	4129      	mov	dp:0x29 <_g_u8ChipResetOcc>, AL
    7a5a:	0009      	jmp	0x7a6e <_LIN_SAE_J2602_Init+0x46>
	}
	else if ( (g_NvramUser.NAD >= C_MIN_J2602_NAD) && (g_NvramUser.NAD <= C_MAX_J2602_NAD) && ((g_NvramUser.NAD & (C_STEP_J2602_NAD - 1)) == 0) )
    7a5c:	5cf6      	usex	Y
    7a5e:	72e6      	lod	A, Y
    7a60:	a0a0      	add	A, #-96
    7a62:	ac0d      	cmp	A, #13
    7a64:	1e04      	jug	0x7a6e <_LIN_SAE_J2602_Init+0x46>
	{
		g_u8NAD = g_NvramUser.NAD;
    7a66:	4534      	mov	dp:0x34 <_g_u8NAD>, YL
		l_u8ActDirection = g_NvramUser.MotorDirectionCCW;
    7a68:	616a      	lod	AL, dp:0x6a <_g_NvramUser+0x10>
    7a6a:	b401      	and	A, #1
    7a6c:	4132      	mov	dp:0x32 <_l_u8ActDirection>, AL
/*		g_u8SAE_ErrorFlags = (1 << C_SAE_RESET_ERROR);	MMP160613-1 */
	}

	if ( (g_u8NAD & 0x0F) != 0x0F )
    7a6e:	6534      	lod	YL, dp:0x34 <_g_u8NAD>
    7a70:	72e6      	lod	A, Y
    7a72:	b40f      	and	A, #15
    7a74:	ac0f      	cmp	A, #15
    7a76:	1915      	je	0x7aa2 <_LIN_SAE_J2602_Init+0x7a>
	{
		uint8 byFrameID = ((g_u8NAD & 0x0F) << 2) + 0x00;
    7a78:	72e6      	lod	A, Y
    7a7a:	44a2      	asl	A, #2
    7a7c:	b43c      	and	A, #60
		byFrameID = CalcProtectionBits( byFrameID);
    7a7e:	17a3      	call	0x79c6 <_CalcProtectionBits>
    7a80:	5cf2      	usex	A
		(void) ml_AssignFrameToMessageID( mlxACT_CTRL, byFrameID);
    7a82:	52df      	push	A
    7a84:	7000      	lod	A, #0
    7a86:	82db 5aba 	callf	0x5aba <_ml_AssignFrameToMessageID>
		byFrameID = ((g_u8NAD & 0x0F) << 2) + 0x01;
    7a8a:	6134      	lod	AL, dp:0x34 <_g_u8NAD>
    7a8c:	b40f      	and	A, #15
    7a8e:	44a2      	asl	A, #2
    7a90:	8001      	add	AL, #1
    7a92:	5cf2      	usex	A
		byFrameID = CalcProtectionBits( byFrameID);
    7a94:	1798      	call	0x79c6 <_CalcProtectionBits>
    7a96:	5cf2      	usex	A
		(void) ml_AssignFrameToMessageID( mlxACT_STATUS, byFrameID);
    7a98:	52df      	push	A
    7a9a:	7001      	lod	A, #1
    7a9c:	82db 5aba 	callf	0x5aba <_ml_AssignFrameToMessageID>
    7aa0:	5c03      	dec	S, #4
		SetLastError( (uint8) C_ERR_INV_NAD);
	}
	l_u8ActDirection = g_NvramUser.MotorDirectionCCW;
#endif /* (LINPROT == LIN2J_HVAC_GM) */

	(void) ml_SetLoaderNAD( g_u8NAD);											/* Setup NAD at power-up */
    7aa2:	6134      	lod	AL, dp:0x34 <_g_u8NAD>
    7aa4:	5cf2      	usex	A
    7aa6:	82db 5da0 	callf	0x5da0 <_ml_SetLoaderNAD>
    7aaa:	5401      	ret

00007aac <_LIN_SAE_J2602_Store>:
 * Before the actuator enters in Sleep, it saves in EEPROM the CPOS,
 * the Status, and the NAD only if the value of cells is different as the RAM value.
 * MMP160613-2
 * ****************************************************************************	*/
void LIN_SAE_J2602_Store( void)
{
    7aac:	5805      	inc	S, #6
	uint16 u16Store = FALSE;
    7aae:	7c00      	lod	X, #0
	if ( g_u16ActualPosition != g_NvramUser.CPOS )
    7ab0:	71f0      	lod	A, dp:0xf0 <_g_u16ActualPosition>
    7ab2:	ad76      	cmp	A, dp:0x76 <_g_NvramUser+0x1c>
    7ab4:	1902      	je	0x7aba <_LIN_SAE_J2602_Store+0xe>
	{
		g_NvramUser.CPOS = g_u16ActualPosition;
    7ab6:	5176      	mov	dp:0x76 <_g_NvramUser+0x1c>, A
		u16Store = TRUE;
    7ab8:	7c01      	lod	X, #1
	}
	{
		uint8 u8AppStatus = 0x00U;
    7aba:	7800      	lod	Y, #0

		if ( g_e8ErrorElectric != (uint8) C_ERR_ELECTRIC_NO )
    7abc:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    7abe:	1903      	je	0x7ac6 <_LIN_SAE_J2602_Store+0x1a>
			u8AppStatus |= (g_e8ErrorElectric & 0x03);
    7ac0:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    7ac2:	7ae2      	lod	Y, A
    7ac4:	f403      	and	Y, #3
		if ( g_u8EmergencyRunOcc != FALSE )
    7ac6:	6127      	lod	AL, dp:0x27 <_g_u8EmergencyRunOcc>
    7ac8:	1901      	je	0x7acc <_LIN_SAE_J2602_Store+0x20>
			u8AppStatus |= 0x08U;
    7aca:	e408      	or	Y, #8
		if ( u8AppStatus != g_NvramUser.AppStatus )
    7acc:	6178      	lod	AL, dp:0x78 <_g_NvramUser+0x1e>
    7ace:	5cf2      	usex	A
    7ad0:	eee2      	cmp	Y, A
    7ad2:	1902      	je	0x7ad8 <_LIN_SAE_J2602_Store+0x2c>
		{
			g_NvramUser.AppStatus = u8AppStatus;
    7ad4:	4578      	mov	dp:0x78 <_g_NvramUser+0x1e>, YL
			u16Store = TRUE;
    7ad6:	7c01      	lod	X, #1
		}
	}
	if ( g_u8NAD != g_NvramUser.NAD )
    7ad8:	6534      	lod	YL, dp:0x34 <_g_u8NAD>
    7ada:	615c      	lod	AL, dp:0x5c <_g_NvramUser+0x2>
    7adc:	8ee8      	cmp	AL, YL
    7ade:	1902      	je	0x7ae4 <_LIN_SAE_J2602_Store+0x38>
	{
		g_NvramUser.NAD = g_u8NAD;
    7ae0:	455c      	mov	dp:0x5c <_g_NvramUser+0x2>, YL
    7ae2:	0002      	jmp	0x7ae8 <_LIN_SAE_J2602_Store+0x3c>
		u16Store = TRUE;
	}
	if ( u16Store != FALSE )
    7ae4:	2c00      	cmp	X, #0
    7ae6:	1928      	je	0x7b38 <_LIN_SAE_J2602_Store+0x8c>
		 * 						  0		  0		Write C_NVRAM_USER_PAGE_1
		 * 						  0		  1		Write C_NVRAM_USER_PAGE_2
		 * 						  1		  0		Write C_NVRAM_USER_PAGE_2
		 * 						  1		  1		Write C_NVRAM_USER_PAGE_1
		 */
		if ( (((NVRAM_USER *) C_ADDR_USERPAGE1)->AppStatus & 0x80) ^ (((NVRAM_USER *) C_ADDR_USERPAGE2)->AppStatus & 0x80) )
    7ae8:	7ada 101e 	lod	Y, #4126
    7aec:	66f0      	lod	YL, [Y]
    7aee:	f6da 0080 	and	Y, #128
    7af2:	7ee6      	lod	X, Y
    7af4:	7ada 111e 	lod	Y, #4382
    7af8:	62f0      	lod	AL, [Y]
    7afa:	4201      	mov	[S-2], AL
    7afc:	66e0      	lod	YL, AL
    7afe:	f6da 0080 	and	Y, #128
    7b02:	6178      	lod	AL, dp:0x78 <_g_NvramUser+0x1e>
    7b04:	4204      	mov	[S-5], AL
    7b06:	6201      	lod	AL, [S-2]
    7b08:	9480      	and	AL, #-128
    7b0a:	4203      	mov	[S-4], AL
    7b0c:	2ee6      	cmp	X, Y
    7b0e:	1908      	je	0x7b20 <_LIN_SAE_J2602_Store+0x74>
		{
			g_NvramUser.AppStatus = (g_NvramUser.AppStatus & 0x7F) | (((NVRAM_USER *) C_ADDR_USERPAGE2)->AppStatus & 0x80);
    7b10:	6204      	lod	AL, [S-5]
    7b12:	947f      	and	AL, #127
    7b14:	8603      	or	AL, [S-4]
    7b16:	4178      	mov	dp:0x78 <_g_NvramUser+0x1e>, AL
			(void) NVRAM_Store( C_NVRAM_USER_PAGE_1);
    7b18:	7001      	lod	A, #1
    7b1a:	82db 97cc 	callf	0x97cc <_NVRAM_Store>
    7b1e:	5407      	ret	#8
		}
		else
		{
			g_NvramUser.AppStatus = (g_NvramUser.AppStatus & 0x7F) | ((((NVRAM_USER *) C_ADDR_USERPAGE2)->AppStatus & 0x80) ^ 0x80);
    7b20:	6204      	lod	AL, [S-5]
    7b22:	947f      	and	AL, #127
    7b24:	4201      	mov	[S-2], AL
    7b26:	6203      	lod	AL, [S-4]
    7b28:	9c80      	xor	AL, #-128
    7b2a:	4205      	mov	[S-6], AL
    7b2c:	6201      	lod	AL, [S-2]
    7b2e:	8605      	or	AL, [S-6]
    7b30:	4178      	mov	dp:0x78 <_g_NvramUser+0x1e>, AL
			(void) NVRAM_Store( C_NVRAM_USER_PAGE_2);
    7b32:	7002      	lod	A, #2
    7b34:	82db 97cc 	callf	0x97cc <_NVRAM_Store>
    7b38:	5407      	ret	#8

00007b3a <_HandleActCfrCtrl>:
 *	Byte 2	|		Reserved		|		TorqueLevel				| MovEn |
 *			+-----------------------+-------------------------------+-------+
 *
 * ****************************************************************************	*/
void HandleActCfrCtrl( void)
{
    7b3a:	580b      	inc	S, #12
	ACT_CFR_CTRL *pCfrCtrl = &g_LinCmdFrameBuffer.cfrCtrl;

		g_u16EXVTargetPositionTemp = (((uint16)pCfrCtrl->byPositionMSB & 0x03) << 8) | pCfrCtrl->byPositionLSB;
    7b3c:	653d      	lod	YL, dp:0x3d <__data_dp_end+0x1>
    7b3e:	f403      	and	Y, #3
    7b40:	6c00      	lod	YH, #0
    7b42:	7ae8      	swap	Y
    7b44:	613c      	lod	AL, dp:0x3c <__data_dp_end>
    7b46:	5cf2      	usex	A
    7b48:	e6e2      	or	Y, A
    7b4a:	5ad8 0102 	mov	0x102 <_g_u16EXVTargetPositionTemp>, Y
		if((g_e8MotorStatusMode & ((uint8) C_MOTOR_STATUS_DEGRADED)) == 0) //not degrade mode, otherwise, just update the target position
    7b4e:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    7b50:	8c00      	cmp	AL, #0
    7b52:	1aa5      	jsl	0x7b9e <_HandleActCfrCtrl+0x64>
		{
			if(pCfrCtrl->byMovEn == C_CTRL_MOVE_ENA){
    7b54:	613e      	lod	AL, dp:0x3e <__data_dp_end+0x2>
    7b56:	420b      	mov	[S-12], AL
    7b58:	9401      	and	AL, #1
    7b5a:	191c      	je	0x7b94 <_HandleActCfrCtrl+0x5a>
				g_e8EXVMoveEnableRequestFlag = (uint8) C_EXV_MOVE_ENABLE;
    7b5c:	6001      	lod	AL, #1
    7b5e:	411c      	mov	dp:0x1c <_g_e8EXVMoveEnableRequestFlag>, AL
				if(((g_e8CalibrationStep == (uint8) C_CALIB_NONE) || (g_e8CalibrationStep == (uint8) C_CALIB_DONE)) && (g_u16EXVTargetPositionTemp == 0x3FF))
    7b60:	611d      	lod	AL, dp:0x1d <_g_e8CalibrationStep>
    7b62:	1902      	je	0x7b68 <_HandleActCfrCtrl+0x2e>
    7b64:	8c0a      	cmp	AL, #10
    7b66:	1d08      	jne	0x7b78 <_HandleActCfrCtrl+0x3e>
    7b68:	eeda 03ff 	cmp	Y, #1023
    7b6c:	1d05      	jne	0x7b78 <_HandleActCfrCtrl+0x3e>
				{
					g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_CALIBRATION;
    7b6e:	6005      	lod	AL, #5
    7b70:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
					g_e8CalibrationStep = (uint8) C_CALIB_START;
    7b72:	6001      	lod	AL, #1
    7b74:	411d      	mov	dp:0x1d <_g_e8CalibrationStep>, AL
    7b76:	0006      	jmp	0x7b84 <_HandleActCfrCtrl+0x4a>
				}
				else if(g_e8CalibrationStep == (uint8) C_CALIB_DONE)
    7b78:	8c0a      	cmp	AL, #10
    7b7a:	1d02      	jne	0x7b80 <_HandleActCfrCtrl+0x46>
				{
					g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_START;
    7b7c:	6003      	lod	AL, #3
    7b7e:	0001      	jmp	0x7b82 <_HandleActCfrCtrl+0x48>
				}
				else
				{
					//TODO,Ban,what to do if during initalization?
					g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_CALIBRATION;
    7b80:	6005      	lod	AL, #5
    7b82:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
				}
				if(pCfrCtrl->byStallEnable == C_CTRL_STALL_ENABLE)
    7b84:	620b      	lod	AL, [S-12]
    7b86:	9408      	and	AL, #8
    7b88:	1902      	je	0x7b8e <_HandleActCfrCtrl+0x54>
				{
					g_e8StallDetectorEna = C_STALLDET_H;
    7b8a:	6004      	lod	AL, #4
    7b8c:	0001      	jmp	0x7b90 <_HandleActCfrCtrl+0x56>
				}
				else
				{
					g_e8StallDetectorEna = C_STALLDET_NONE;
    7b8e:	6000      	lod	AL, #0
    7b90:	41ee      	mov	dp:0xee <_g_e8StallDetectorEna>, AL
    7b92:	002b      	jmp	0x7bea <_HandleActCfrCtrl+0xb0>
				}
			}else{
				g_e8EXVMoveEnableRequestFlag = (uint8) C_EXV_MOVE_DISABLE;
    7b94:	6000      	lod	AL, #0
    7b96:	411c      	mov	dp:0x1c <_g_e8EXVMoveEnableRequestFlag>, AL
				g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_STOP;
    7b98:	6001      	lod	AL, #1
    7b9a:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
    7b9c:	0026      	jmp	0x7bea <_HandleActCfrCtrl+0xb0>
			}
		}
		else
		{
			g_u16TargetPosition = (((uint32)g_u16EXVTargetPositionTemp)*g_u16CalibTravel+128)/255 + C_EXV_ZERO_POS;//update the target position in degrade mode,
    7b9e:	71f6      	lod	A, dp:0xf6 <_g_u16CalibTravel>
    7ba0:	4801      	mulu	D, A, Y
    7ba2:	72ef      	lod	A, S
    7ba4:	a0fc      	add	A, #-4
    7ba6:	4cf3      	swap	YA
    7ba8:	4c85      	mov	[Y], D
    7baa:	7203      	lod	A, [S-4]
    7bac:	a2da 0080 	add	A, #128
    7bb0:	5203      	mov	[S-4], A
    7bb2:	7201      	lod	A, [S-2]
    7bb4:	b000      	adc	A, #0
    7bb6:	5201      	mov	[S-2], A
    7bb8:	54ca 00ff 	pushw	#255
    7bbc:	54ca 0000 	pushw	#0
    7bc0:	7207      	lod	A, [S-8]
    7bc2:	7a05      	lod	Y, [S-6]
    7bc4:	82db 6c94 	callf	0x6c94 <___udivsi3>
    7bc8:	5c03      	dec	S, #4
    7bca:	5209      	mov	[S-10], A
    7bcc:	5a07      	mov	[S-8], Y
    7bce:	658e      	lod	YL, dp:0x8e <_g_NvramUser+0x34>
    7bd0:	44b6      	lsr	Y, #2
    7bd2:	44b6      	lsr	Y, #2
    7bd4:	4436      	lsr	Y
    7bd6:	f403      	and	Y, #3
    7bd8:	e001      	add	Y, #1
    7bda:	7064      	lod	A, #100
    7bdc:	ec00      	cmp	Y, #0
    7bde:	1b03      	jsle	0x7be6 <_HandleActCfrCtrl+0xac>
    7be0:	46e9      	mov	Cx, YL
    7be2:	4422      	asl	A
    7be4:	1ffe      	djnz	Cx, 0x7be2 <_HandleActCfrCtrl+0xa8>
    7be6:	a209      	add	A, [S-10]
    7be8:	51f2      	mov	dp:0xf2 <_g_u16TargetPosition>, A
		}
		if ( (pCfrCtrl->byTorqueLevel >= C_CTRL_TORQUE_NOMINAL) && (pCfrCtrl->byTorqueLevel <= C_CTRL_TORQUE_BOOST_40PCT) )
    7bea:	613e      	lod	AL, dp:0x3e <__data_dp_end+0x2>
    7bec:	4205      	mov	[S-6], AL
    7bee:	9406      	and	AL, #6
    7bf0:	190d      	je	0x7c0c <_HandleActCfrCtrl+0xd2>
    7bf2:	6205      	lod	AL, [S-6]
    7bf4:	4430      	lsr	AL
    7bf6:	9403      	and	AL, #3
    7bf8:	4204      	mov	[S-5], AL
    7bfa:	8c03      	cmp	AL, #3
    7bfc:	1e07      	jug	0x7c0c <_HandleActCfrCtrl+0xd2>
		{
			g_u8TorqueBoostRequest = (pCfrCtrl->byTorqueLevel - C_CTRL_TORQUE_NOMINAL) * 10U;
    7bfe:	640a      	lod	YL, #10
    7c00:	4829      	mulu	Y, AL, YL
    7c02:	62e8      	lod	AL, YL
    7c04:	80f6      	add	AL, #-10
    7c06:	42d8 010a 	mov	0x10a <_g_u8TorqueBoostRequest>, AL
    7c0a:	0005      	jmp	0x7c16 <_HandleActCfrCtrl+0xdc>
		}
		else//undefined torque, just stop the motor
		{
			g_u8TorqueBoostRequest = C_CTRL_TORQUE_NO;
    7c0c:	6000      	lod	AL, #0
    7c0e:	42d8 010a 	mov	0x10a <_g_u8TorqueBoostRequest>, AL
			g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_STOP;
    7c12:	6001      	lod	AL, #1
    7c14:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
		}

		g_u8ChipResetOcc = FALSE;											/* Clear 'reset'-flag only after CFR_INI (4.2.6.3) */
    7c16:	6000      	lod	AL, #0
    7c18:	4129      	mov	dp:0x29 <_g_u8ChipResetOcc>, AL
    7c1a:	540d      	ret	#14

00007c1c <_HandleActRfrSta>:
 *	Byte 4	|			Reserved			|	ArcState	|	InitState	|
 *			+-------------------------------+---------------+---------------+
 *
 * ****************************************************************************	*/
void HandleActRfrSta( void)
{
    7c1c:	5817      	inc	S, #24
	ACT_RFR_STA *pRfrSta = (ACT_RFR_STA *)LinFrameDataBuffer;

	/*	if ( g_u8SAE_ErrorFlags != 0 )		(MMP160613-1) */
	if ( g_u8ErrorCommunication != FALSE )
    7c1e:	62d8 011d 	lod	AL, 0x11d <_g_u8ErrorCommunication>
    7c22:	4207      	mov	[S-8], AL
    7c24:	61cc      	lod	AL, dp:0xcc <_LinFrameDataBuffer>
    7c26:	4212      	mov	[S-19], AL
    7c28:	62d8 0101 	lod	AL, 0x101 <_g_e8EXVStatusFaultState>
    7c2c:	4211      	mov	[S-18], AL
    7c2e:	6207      	lod	AL, [S-8]
    7c30:	1903      	je	0x7c38 <_HandleActRfrSta+0x1c>
	{
		pRfrSta->byLinErr = C_STATUS_LIN_ERR;
    7c32:	6212      	lod	AL, [S-19]
    7c34:	8401      	or	AL, #1
    7c36:	0002      	jmp	0x7c3c <_HandleActRfrSta+0x20>
	}
	else
	{
		pRfrSta->byLinErr = C_STATUS_LIN_OK;
    7c38:	6212      	lod	AL, [S-19]
    7c3a:	94fe      	and	AL, #-2
    7c3c:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL
	}
	g_u8SAE_SendErrorState = g_u8ErrorCommunication;
    7c3e:	62d8 011d 	lod	AL, 0x11d <_g_u8ErrorCommunication>
    7c42:	4133      	mov	dp:0x33 <_g_u8SAE_SendErrorState>, AL

	pRfrSta->byFaultState = g_e8EXVStatusFaultState;
    7c44:	6211      	lod	AL, [S-18]
    7c46:	940f      	and	AL, #15
    7c48:	4420      	asl	AL
    7c4a:	4217      	mov	[S-24], AL
    7c4c:	61cc      	lod	AL, dp:0xcc <_LinFrameDataBuffer>
    7c4e:	94e1      	and	AL, #-31
    7c50:	66e0      	lod	YL, AL
    7c52:	6217      	lod	AL, [S-24]
    7c54:	86e8      	or	AL, YL
    7c56:	66e0      	lod	YL, AL
    7c58:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL

	if ( (g_e8MotorStatusMode & C_MOTOR_STATUS_RUNNING) == 0 )
    7c5a:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    7c5c:	b401      	and	A, #1
    7c5e:	1d03      	jne	0x7c66 <_HandleActRfrSta+0x4a>
	{
		pRfrSta->byMoveState = C_STATUS_MOVE_IDLE;
    7c60:	62e8      	lod	AL, YL
    7c62:	94df      	and	AL, #-33
    7c64:	0002      	jmp	0x7c6a <_HandleActRfrSta+0x4e>
	}
	else
	{
		pRfrSta->byMoveState = C_STATUS_MOVE_ACTIVE;
    7c66:	62e8      	lod	AL, YL
    7c68:	8420      	or	AL, #32
    7c6a:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL
	}

	if ( (g_e8MotorStatusMode & C_MOTOR_STATUS_RUNNING) == 0 )
    7c6c:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    7c6e:	7ae2      	lod	Y, A
    7c70:	f401      	and	Y, #1
    7c72:	61cc      	lod	AL, dp:0xcc <_LinFrameDataBuffer>
    7c74:	4212      	mov	[S-19], AL
    7c76:	72d8 00fe 	lod	A, 0xfe <_g_u16EXVStatusCurrentPositon>
    7c7a:	520f      	mov	[S-16], A
    7c7c:	61cf      	lod	AL, dp:0xcf <_LinFrameDataBuffer+0x3>
    7c7e:	420d      	mov	[S-14], AL
    7c80:	62d8 00fd 	lod	AL, 0xfd <_g_e8EXVStatusInitStat>
    7c84:	420c      	mov	[S-13], AL
    7c86:	61cd      	lod	AL, dp:0xcd <_LinFrameDataBuffer+0x1>
    7c88:	420b      	mov	[S-12], AL
    7c8a:	62d8 011f 	lod	AL, 0x11f <_l_u8StaCounter>
    7c8e:	420a      	mov	[S-11], AL
    7c90:	6118      	lod	AL, dp:0x18 <__data_dp_start>
    7c92:	4209      	mov	[S-10], AL
    7c94:	ec00      	cmp	Y, #0
    7c96:	1d03      	jne	0x7c9e <_HandleActRfrSta+0x82>
	{
		pRfrSta->byTorqueLevel = (uint8)C_CTRL_TORQUE_NO;
    7c98:	6212      	lod	AL, [S-19]
    7c9a:	943f      	and	AL, #63
    7c9c:	0012      	jmp	0x7cc2 <_HandleActRfrSta+0xa6>
    7c9e:	66d8 010a 	lod	YL, 0x10a <_g_u8TorqueBoostRequest>
    7ca2:	5cf6      	usex	Y
    7ca4:	5a05      	mov	[S-6], Y
    7ca6:	7205      	lod	A, [S-6]
    7ca8:	7800      	lod	Y, #0
    7caa:	5205      	mov	[S-6], A
    7cac:	5a03      	mov	[S-4], Y
    7cae:	7c0a      	lod	X, #10
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    7cb0:	4c63      	divu	YA, X
    7cb2:	4c63      	divu	YA, X
    7cb4:	5205      	mov	[S-6], A
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    7cb6:	44d0      	rr	AL, #2
    7cb8:	94c0      	and	AL, #-64
    7cba:	4216      	mov	[S-23], AL
    7cbc:	6212      	lod	AL, [S-19]
    7cbe:	943f      	and	AL, #63
    7cc0:	8616      	or	AL, [S-23]
    7cc2:	41cc      	mov	dp:0xcc <_LinFrameDataBuffer>, AL
	{
		pRfrSta->byTorqueLevel = (uint8) divU16_U32byU16( (uint32) g_u8TorqueBoostRequest, 10U);
	}

	//Byte 2
	pRfrSta->byActPositionLSB = g_u16EXVStatusCurrentPositon&0xFF;
    7cc4:	620f      	lod	AL, [S-16]
    7cc6:	41ce      	mov	dp:0xce <_LinFrameDataBuffer+0x2>, AL
	pRfrSta->byActPositionMSB = (g_u16EXVStatusCurrentPositon>>8)&0x3;
    7cc8:	7a0f      	lod	Y, [S-16]
    7cca:	6400      	lod	YL, #0
    7ccc:	7ae8      	swap	Y
    7cce:	5a0f      	mov	[S-16], Y
    7cd0:	620f      	lod	AL, [S-16]
    7cd2:	9403      	and	AL, #3
    7cd4:	4215      	mov	[S-22], AL
    7cd6:	620d      	lod	AL, [S-14]
    7cd8:	94fc      	and	AL, #-4
    7cda:	8615      	or	AL, [S-22]
    7cdc:	41cf      	mov	dp:0xcf <_LinFrameDataBuffer+0x3>, AL

	//Byte 3
	pRfrSta->byInitState = g_e8EXVStatusInitStat;
    7cde:	620c      	lod	AL, [S-13]
    7ce0:	9403      	and	AL, #3
    7ce2:	4214      	mov	[S-21], AL
    7ce4:	620b      	lod	AL, [S-12]
    7ce6:	94f0      	and	AL, #-16
    7ce8:	4213      	mov	[S-20], AL

	pRfrSta->byArcState = l_u8StaCounter;
    7cea:	620a      	lod	AL, [S-11]
    7cec:	9403      	and	AL, #3
    7cee:	44a0      	asl	AL, #2
    7cf0:	4205      	mov	[S-6], AL
    7cf2:	6213      	lod	AL, [S-20]
    7cf4:	8614      	or	AL, [S-21]
    7cf6:	66e0      	lod	YL, AL
    7cf8:	6205      	lod	AL, [S-6]
    7cfa:	86e8      	or	AL, YL
    7cfc:	66e0      	lod	YL, AL
    7cfe:	41cd      	mov	dp:0xcd <_LinFrameDataBuffer+0x1>, AL
	l_u8StaCounter++;
    7d00:	620a      	lod	AL, [S-11]
    7d02:	8001      	add	AL, #1
    7d04:	42d8 011f 	mov	0x11f <_l_u8StaCounter>, AL

	if(g_e8EXVErrorBlock == TRUE)
    7d08:	6209      	lod	AL, [S-10]
    7d0a:	8c01      	cmp	AL, #1
    7d0c:	1d03      	jne	0x7d14 <_HandleActRfrSta+0xf8>
	{
		pRfrSta->byStallDetectStatus = TRUE;
    7d0e:	62e8      	lod	AL, YL
    7d10:	8410      	or	AL, #16
    7d12:	0002      	jmp	0x7d18 <_HandleActRfrSta+0xfc>
	}
	else
	{
		pRfrSta->byStallDetectStatus = FALSE;
    7d14:	62e8      	lod	AL, YL
    7d16:	94ef      	and	AL, #-17
    7d18:	41cd      	mov	dp:0xcd <_LinFrameDataBuffer+0x1>, AL
    7d1a:	5419      	ret	#26

00007d1c <_HandleBusTimeout>:
 *  Bus-timeout
 * ****************************************************************************	*/
void HandleBusTimeout( void)
{
#if _SUPPORT_BUSTIMEOUT
	if ( g_u8ErrorCommBusTimeout == FALSE )
    7d1c:	62d8 011c 	lod	AL, 0x11c <_g_u8ErrorCommBusTimeout>
    7d20:	1d14      	jne	0x7d4a <_HandleBusTimeout+0x2e>
	{
		/* Emergency run is enabled */
		g_u8ErrorCommBusTimeout = TRUE;
    7d22:	6001      	lod	AL, #1
    7d24:	42d8 011c 	mov	0x11c <_g_u8ErrorCommBusTimeout>, AL
		SetLastError( (uint8) C_ERR_LIN_BUS_TIMEOUT);
    7d28:	72da 00bf 	lod	A, #191
    7d2c:	82db 89f6 	callf	0x89f6 <_SetLastError>

		if ( g_NvramUser.EmergencyRunEna != FALSE )
    7d30:	616a      	lod	AL, dp:0x6a <_g_NvramUser+0x10>
    7d32:	4432      	lsr	A
    7d34:	b401      	and	A, #1
    7d36:	1909      	je	0x7d4a <_HandleBusTimeout+0x2e>
		{
			if ( g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_DEGRADED )
    7d38:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    7d3a:	8c00      	cmp	AL, #0
    7d3c:	1e84      	jsge	0x7d46 <_HandleBusTimeout+0x2a>
			{
				/* Module is in degraded-mode; Postpone emergency-run till after degraded-mode have been obsoleted */
				g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_EMRUN;
    7d3e:	6007      	lod	AL, #7
    7d40:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
				g_e8DegradedMotorRequest = g_e8MotorRequest;
    7d42:	4125      	mov	dp:0x25 <_g_e8DegradedMotorRequest>, AL
    7d44:	5401      	ret
			}
			else
			{
				/* Perform emergency-run immediately */
				g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_EMRUN;
    7d46:	6007      	lod	AL, #7
    7d48:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
    7d4a:	5401      	ret

00007d4c <_LIN2J_ErrorHandling>:
 *	To see if this slave is addressed, check the NAD in the LinFrame. The
 *	position within the LinFrame depends on the Frame-ID.
 *
 * ****************************************************************************	*/
void LIN2J_ErrorHandling( ml_LinError Error)
{
    7d4c:	5805      	inc	S, #6
    7d4e:	7ee2      	lod	X, A
	uint8 u8FrameID = (uint8) (LinProtectedID & 0x3F);							/* Get Frame-ID without parity bits */
    7d50:	6107      	lod	AL, dp:0x7 <_LinProtectedID>
    7d52:	7ae2      	lod	Y, A
    7d54:	f43f      	and	Y, #63
    7d56:	5a05      	mov	[S-6], Y
	if ( (u8FrameID == (uint8) ML_MRF_ID) && ((Error == ml_erDataFraming) || (Error == ml_erCheckSum)) )
    7d58:	6205      	lod	AL, [S-6]
    7d5a:	8c3c      	cmp	AL, #60
    7d5c:	1d06      	jne	0x7d6a <_LIN2J_ErrorHandling+0x1e>
    7d5e:	2c06      	cmp	X, #6
    7d60:	1902      	je	0x7d66 <_LIN2J_ErrorHandling+0x1a>
    7d62:	2c04      	cmp	X, #4
    7d64:	1d02      	jne	0x7d6a <_LIN2J_ErrorHandling+0x1e>
	{
		/*
		 * Abort Diagnostic communication with corrupted Diagnostic request
		 * Checked by LIN2.1 CT test case 13.2.2
		 */
		g_u8BufferOutID = (uint8) QR_INVALID;
    7d66:	60ff      	lod	AL, #-1
    7d68:	4131      	mov	dp:0x31 <_g_u8BufferOutID>, AL
	}

	/* ---- ml_erLinModuleReset -------------------------------------------- */
	if ( Error == ml_erLinModuleReset )
    7d6a:	2c02      	cmp	X, #2
    7d6c:	1d01      	jne	0x7d70 <_LIN2J_ErrorHandling+0x24>
    7d6e:	002a      	jmp	0x7dc4 <_LIN2J_ErrorHandling+0x78>
	{
		/* Non-recoverable failure has occurred in the LIN Module */
		/* switch to System Mode and reinitialise LIN module */
	}
	/* ---- ml_erIdParity -------------------------------------------------- */
	else if ( Error == ml_erIdParity )
    7d70:	2c03      	cmp	X, #3
    7d72:	1928      	je	0x7dc4 <_LIN2J_ErrorHandling+0x78>
	{
		/* Do NOT set response_error bit, because error occurred in a header */
	}
	else if ( u8FrameID == (((g_u8NAD & 0x0F) << 2) + 0x01) )
    7d74:	6134      	lod	AL, dp:0x34 <_g_u8NAD>
    7d76:	4203      	mov	[S-4], AL
    7d78:	66e0      	lod	YL, AL
    7d7a:	f40f      	and	Y, #15
    7d7c:	44a6      	asl	Y, #2
    7d7e:	72e6      	lod	A, Y
    7d80:	a001      	add	A, #1
    7d82:	5201      	mov	[S-2], A
    7d84:	7205      	lod	A, [S-6]
    7d86:	ae01      	cmp	A, [S-2]
    7d88:	1d06      	jne	0x7d96 <_LIN2J_ErrorHandling+0x4a>
	{
		/* Status Frame */
		if ( Error == ml_erIdFraming )
    7d8a:	2c07      	cmp	X, #7
    7d8c:	1d1b      	jne	0x7dc4 <_LIN2J_ErrorHandling+0x78>
		{
			g_u8ErrorCommunication = TRUE;
    7d8e:	6001      	lod	AL, #1
    7d90:	42d8 011d 	mov	0x11d <_g_u8ErrorCommunication>, AL
    7d94:	5407      	ret	#8
		}
	}
	else if ( (u8FrameID == (((g_u8NAD & 0x0F) << 2) + 0x00)) ||			/* 1.3.4.2 */
    7d96:	7205      	lod	A, [S-6]
    7d98:	aee6      	cmp	A, Y
    7d9a:	190b      	je	0x7db2 <_LIN2J_ErrorHandling+0x66>
    7d9c:	8c3c      	cmp	AL, #60
    7d9e:	1d03      	jne	0x7da6 <_LIN2J_ErrorHandling+0x5a>
    7da0:	6108      	lod	AL, dp:0x8 <__bist_stat_size>
    7da2:	8e03      	cmp	AL, [S-4]
    7da4:	1906      	je	0x7db2 <_LIN2J_ErrorHandling+0x66>
    7da6:	6205      	lod	AL, [S-6]
    7da8:	8c3d      	cmp	AL, #61
    7daa:	1d0c      	jne	0x7dc4 <_LIN2J_ErrorHandling+0x78>
    7dac:	6108      	lod	AL, dp:0x8 <__bist_stat_size>
    7dae:	8e03      	cmp	AL, [S-4]
    7db0:	1d09      	jne	0x7dc4 <_LIN2J_ErrorHandling+0x78>
			  ((u8FrameID == ML_MRF_ID) && (LinFrame[0] == g_u8NAD)) ||		/* 1.3.4.3 */
			  ((u8FrameID == ML_SRF_ID) && (LinFrame[0] == g_u8NAD)) )		/* 1.3.4.3 */
	{
		/* Control frame or Diagnostics frame */
		if ( (Error == ml_erCheckSum) || (Error == ml_erDataFraming) || (Error == ml_erIdFraming) )
    7db2:	2c04      	cmp	X, #4
    7db4:	1904      	je	0x7dbe <_LIN2J_ErrorHandling+0x72>
    7db6:	2c06      	cmp	X, #6
    7db8:	1902      	je	0x7dbe <_LIN2J_ErrorHandling+0x72>
    7dba:	2c07      	cmp	X, #7
    7dbc:	1d03      	jne	0x7dc4 <_LIN2J_ErrorHandling+0x78>
		{
			g_u8ErrorCommunication = TRUE;
    7dbe:	6001      	lod	AL, #1
    7dc0:	42d8 011d 	mov	0x11d <_g_u8ErrorCommunication>, AL
    7dc4:	5407      	ret	#8

00007dc6 <_SetupDiagResponse>:

/* ****************************************************************************	*
 * SetupDiagResponse
 * ****************************************************************************	*/
void SetupDiagResponse( uint8 u8NAD, uint8 u8SID, uint8 u8ResponseCode)
{
    7dc6:	5801      	inc	S, #2
    7dc8:	6605      	lod	YL, [S-6]
    7dca:	5cf6      	usex	Y
    7dcc:	5a01      	mov	[S-2], Y
    7dce:	6607      	lod	YL, [S-8]
    7dd0:	5cf6      	usex	Y
	g_DiagResponse.byNAD = u8NAD;
    7dd2:	4144      	mov	dp:0x44 <_g_DiagResponse>, AL
	if ( u8ResponseCode == (uint8) C_ERRCODE_POSITIVE_RESPONSE )
    7dd4:	1d09      	jne	0x7de8 <_SetupDiagResponse+0x22>
		 *	+-------+-----+------+----------+----------+----------+----------+----------+
		 *	|Initial| 0x01|  SID | Reserved | Reserved | Reserved | Reserved | Reserved |
		 *	|  NAD  |     | |0x40|   0xFF   |   0xFF   |   0xFF   |   0xFF   |   0xFF   |
		 *	+-------+-----+------+----------+----------+----------+----------+----------+
		 */
		g_DiagResponse.byPCI = (uint8) C_RPCI_REASSIGN_NAD;
    7dd6:	6001      	lod	AL, #1
    7dd8:	4145      	mov	dp:0x45 <_g_DiagResponse+0x1>, AL
		g_DiagResponse.byRSID = (uint8) (u8SID | C_RSID_OK);
    7dda:	6201      	lod	AL, [S-2]
    7ddc:	8440      	or	AL, #64
    7dde:	4146      	mov	dp:0x46 <_g_DiagResponse+0x2>, AL
		g_DiagResponse.byD1 = (uint8) C_DIAG_RES;								/* Clear Pending feedback (MMP151130-1) */
    7de0:	60ff      	lod	AL, #-1
    7de2:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
		g_DiagResponse.byD2 = (uint8) C_DIAG_RES;								/* Clear Pending feedback (MMP151130-1) */
    7de4:	4148      	mov	dp:0x48 <_g_DiagResponse+0x4>, AL
    7de6:	0007      	jmp	0x7df6 <_SetupDiagResponse+0x30>
		 *	+-------+-----+------+----------+----------+----------+----------+----------+
		 *	|Initial| 0x03| 0x7F | Requested| Response | Reserved | Reserved | Reserved |
		 *	|  NAD  |     |      |    SID   |   Code   |   0xFF   |   0xFF   |   0xFF   |
		 *	+-------+-----+------+----------+----------+----------+----------+----------+
		 */
		g_DiagResponse.byPCI = (uint8) C_RPCI_NOK;
    7de8:	6003      	lod	AL, #3
    7dea:	4145      	mov	dp:0x45 <_g_DiagResponse+0x1>, AL
		g_DiagResponse.byRSID = (uint8) C_RSID_NOK;
    7dec:	607f      	lod	AL, #127
    7dee:	4146      	mov	dp:0x46 <_g_DiagResponse+0x2>, AL
		g_DiagResponse.byD1 = u8SID;
    7df0:	6201      	lod	AL, [S-2]
    7df2:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
		g_DiagResponse.byD2 = u8ResponseCode;
    7df4:	4548      	mov	dp:0x48 <_g_DiagResponse+0x4>, YL
	}

	g_u8BufferOutID = (uint8) QR_RFR_DIAG;										/* LIN Output buffer is valid (RFR_DIAG) */
    7df6:	6007      	lod	AL, #7
    7df8:	4131      	mov	dp:0x31 <_g_u8BufferOutID>, AL
    7dfa:	5403      	ret	#4

00007dfc <_CheckSupplier>:
/* ****************************************************************************	*
 * CheckSupplier
 * ****************************************************************************	*/
uint16 CheckSupplier( uint16 const u16SupplierID)
{
	uint16 u16Result = FALSE;
    7dfc:	7800      	lod	Y, #0
	if ( (u16SupplierID == (uint16) C_WILDCARD_SUPPLIER_ID)
    7dfe:	aeda 7fff 	cmp	A, #32767
    7e02:	1903      	je	0x7e0a <_CheckSupplier+0xe>
    7e04:	aeda 0124 	cmp	A, #292
    7e08:	1d01      	jne	0x7e0c <_CheckSupplier+0x10>
		|| (u16SupplierID == (uint16)C_SUPPLIER_ID) )
	{
		u16Result = TRUE;
    7e0a:	7801      	lod	Y, #1
	}
	return ( u16Result );
} /* End of CheckSupplier() */
    7e0c:	72e6      	lod	A, Y
    7e0e:	5401      	ret

00007e10 <_ValidSupplierFunctionID>:
 * Pre:		Pointer to address of supplier and function ID
 * Post:	FALSE: Incorrect supplier and/or function ID
 *			TRUE: Correct supplier and function ID
 * ****************************************************************************	*/
uint16 ValidSupplierFunctionID( uint16 const u16SupplierID, uint16 const u16FunctionID )
{
    7e10:	7a03      	lod	Y, [S-4]
	uint16 u16Result = FALSE;
    7e12:	7c00      	lod	X, #0
	if ( ((u16SupplierID == C_SUPPLIER_ID)
    7e14:	aeda 0124 	cmp	A, #292
    7e18:	1903      	je	0x7e20 <_ValidSupplierFunctionID+0x10>
    7e1a:	aeda 7fff 	cmp	A, #32767
    7e1e:	1d06      	jne	0x7e2c <_ValidSupplierFunctionID+0x1c>
    7e20:	eeda 00b0 	cmp	Y, #176
    7e24:	1902      	je	0x7e2a <_ValidSupplierFunctionID+0x1a>
    7e26:	ecff      	cmp	Y, #-1
    7e28:	1d01      	jne	0x7e2c <_ValidSupplierFunctionID+0x1c>
		|| (u16SupplierID == C_WILDCARD_SUPPLIER_ID)) &&
		((u16FunctionID == C_FUNCTION_ID)
		|| (u16FunctionID == C_WILDCARD_FUNCTION_ID)) )
	{
		u16Result = TRUE;
    7e2a:	7c01      	lod	X, #1
	}
	return ( u16Result );
} /* End of ValidSupplierFunctionID() */
    7e2c:	72ee      	lod	A, X
    7e2e:	5401      	ret

00007e30 <_HandleDfrDiag>:

/* ****************************************************************************	*
 * Diagnostic
 * ****************************************************************************	*/
void HandleDfrDiag( void)
{
    7e30:	581b      	inc	S, #28
	}
	else if ( (pDiag->byNAD == g_u8NAD) || (pDiag->byNAD == (uint8) C_BROADCAST_NAD) )
#endif /* ((LINPROT & LINXX) == LIN2X) */
#if ((LINPROT & LINXX) == LIN2J)
	/* Targeted or Broadcast */
	if ( (pDiag->byNAD == g_u8NAD) || (pDiag->byNAD == C_BROADCAST_J2602_NAD) )
    7e32:	613c      	lod	AL, dp:0x3c <__data_dp_end>
    7e34:	4203      	mov	[S-4], AL
    7e36:	62d8 0034 	lod	AL, 0x34 <_g_u8NAD>
    7e3a:	421b      	mov	[S-28], AL
    7e3c:	6203      	lod	AL, [S-4]
    7e3e:	8e1b      	cmp	AL, [S-28]
    7e40:	1903      	je	0x7e48 <_HandleDfrDiag+0x18>
    7e42:	8c7f      	cmp	AL, #127
    7e44:	1901      	je	0x7e48 <_HandleDfrDiag+0x18>
    7e46:	0345      	jmp	0x84d2 <_HandleDfrDiag+0x6a2>
#endif /* ((LINPROT & LINXX) == LIN2J) */
	{
		uint16 u16DiagPCI_SID = (((uint16)pDiag->byPCI) << 8) | ((uint16)pDiag->bySID);
    7e48:	6d3d      	lod	YH, dp:0x3d <__data_dp_end+0x1>
    7e4a:	6400      	lod	YL, #0
    7e4c:	613e      	lod	AL, dp:0x3e <__data_dp_end+0x2>
    7e4e:	4217      	mov	[S-24], AL
    7e50:	5cf2      	usex	A
    7e52:	5219      	mov	[S-26], A
    7e54:	e6e2      	or	Y, A

		g_DiagResponse.byD1 = (uint8) C_DIAG_RES;
    7e56:	60ff      	lod	AL, #-1
    7e58:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
		g_DiagResponse.byD2 = (uint8) C_DIAG_RES;
    7e5a:	4148      	mov	dp:0x48 <_g_DiagResponse+0x4>, AL
		g_DiagResponse.byD3 = (uint8) C_DIAG_RES;
    7e5c:	4149      	mov	dp:0x49 <_g_DiagResponse+0x5>, AL
		g_DiagResponse.byD4 = (uint8) C_DIAG_RES;
    7e5e:	414a      	mov	dp:0x4a <_g_DiagResponse+0x6>, AL
		g_DiagResponse.byD5 = (uint8) C_DIAG_RES;
    7e60:	414b      	mov	dp:0x4b <_g_DiagResponse+0x7>, AL
			SetupDiagResponse( g_u8NAD, pDiag->bySID, (uint8) C_ERRCODE_COND_SEQ);	/* Status = Negative feedback */
			SetLastError( (uint8) C_ERR_LIN2X_WRITE);
		}
		else if ( (u16DiagPCI_SID == C_PCI_SID_REASSIGN_NAD) && (pDiag->byNAD != (uint8) C_DEFAULT_NAD) )
#else  /* ((LINPROT & LINXX) == LIN2X) */
		if ( u16DiagPCI_SID == C_PCI_SID_REASSIGN_NAD )
    7e62:	eeda 06b0 	cmp	Y, #1712
    7e66:	1901      	je	0x7e6a <_HandleDfrDiag+0x3a>
    7e68:	0038      	jmp	0x7eda <_HandleDfrDiag+0xaa>
			 *	+-----+-----+------+----------+----------+----------+----------+----------+
			 *	| NAD | 0x06| 0xB0 | Supplier | Supplier | Function | Function |  New NAD |
			 *	|     |     |      | ID (LSB) | ID (MSB) | ID (LSB) | ID (MSB) |          |
			 *	+-----+-----+------+----------+----------+----------+----------+----------+
			 */
			if ( ValidSupplierFunctionID( (pDiag->byD1) | ((uint16)(pDiag->byD2) << 8), (pDiag->byD3) | ((uint16)(pDiag->byD4) << 8)) )
    7e6a:	6141      	lod	AL, dp:0x41 <__data_dp_end+0x5>
    7e6c:	5cf2      	usex	A
    7e6e:	7ee2      	lod	X, A
    7e70:	6942      	lod	AH, dp:0x42 <__data_dp_end+0x6>
    7e72:	6000      	lod	AL, #0
    7e74:	26e2      	or	X, A
    7e76:	6940      	lod	AH, dp:0x40 <__data_dp_end+0x4>
    7e78:	613f      	lod	AL, dp:0x3f <__data_dp_end+0x3>
    7e7a:	5edf      	push	X
    7e7c:	17c9      	call	0x7e10 <_ValidSupplierFunctionID>
    7e7e:	5c01      	dec	S, #2
    7e80:	ac00      	cmp	A, #0
    7e82:	1d01      	jne	0x7e86 <_HandleDfrDiag+0x56>
    7e84:	0326      	jmp	0x84d2 <_HandleDfrDiag+0x6a2>
			{
				uint8 byInitialNAD = g_NvramUser.NAD;
    7e86:	615c      	lod	AL, dp:0x5c <_g_NvramUser+0x2>
    7e88:	5cf2      	usex	A
    7e8a:	5215      	mov	[S-22], A
					SetupDiagResponse( byInitialNAD, pDiag->bySID, (uint8) C_ERRCODE_INV_MSG_INV_SZ);		/* Status = Negative feedback */
				}
				else
#endif /* ((LINPROT & LINXX) == LIN2J) */
				{
					SetupDiagResponse( byInitialNAD, pDiag->bySID, (uint8) C_ERRCODE_PENDING);				/* Status = Pending */
    7e8c:	54ca 0078 	pushw	#120
    7e90:	7a1b      	lod	Y, [S-28]
    7e92:	5adf      	push	Y
    7e94:	7219      	lod	A, [S-26]
    7e96:	1797      	call	0x7dc6 <_SetupDiagResponse>
					g_NvramUser.NAD = pDiag->byD5;
    7e98:	6143      	lod	AL, dp:0x43 <__data_dp_end+0x7>
    7e9a:	415c      	mov	dp:0x5c <_g_NvramUser+0x2>, AL
					g_u8NAD = g_NvramUser.NAD;
    7e9c:	42d8 0034 	mov	0x34 <_g_u8NAD>, AL
					/* Store NVRAM */
					if ( (NVRAM_Store( (uint16) C_NVRAM_USER_PAGE_ALL) == C_NVRAM_STORE_OKAY) && (g_NvramUser.NAD == pDiag->byD5) )
    7ea0:	7003      	lod	A, #3
    7ea2:	82db 97cc 	callf	0x97cc <_NVRAM_Store>
    7ea6:	5c03      	dec	S, #4
    7ea8:	ac00      	cmp	A, #0
    7eaa:	1d0a      	jne	0x7ec0 <_HandleDfrDiag+0x90>
    7eac:	6143      	lod	AL, dp:0x43 <__data_dp_end+0x7>
    7eae:	8d5c      	cmp	AL, dp:0x5c <_g_NvramUser+0x2>
    7eb0:	1d07      	jne	0x7ec0 <_HandleDfrDiag+0x90>
					{
						/* NAD changed */
						SetupDiagResponse( byInitialNAD, pDiag->bySID, (uint8) C_ERRCODE_POSITIVE_RESPONSE);/* Status = Positive feedback */
    7eb2:	54ca 0000 	pushw	#0
    7eb6:	613e      	lod	AL, dp:0x3e <__data_dp_end+0x2>
    7eb8:	5cf2      	usex	A
    7eba:	52df      	push	A
    7ebc:	7219      	lod	A, [S-26]
    7ebe:	0284      	jmp	0x83c8 <_HandleDfrDiag+0x598>
					}
					else
					{
						/* NAD couldn't be changed */
						SetupDiagResponse( byInitialNAD, pDiag->bySID, (uint8) C_ERRCODE_SFUNC_NOSUP);		/* Status = Negative feedback */
    7ec0:	54ca 0012 	pushw	#18
    7ec4:	613e      	lod	AL, dp:0x3e <__data_dp_end+0x2>
    7ec6:	5cf2      	usex	A
    7ec8:	52df      	push	A
    7eca:	7219      	lod	A, [S-26]
    7ecc:	177c      	call	0x7dc6 <_SetupDiagResponse>
						SetLastError( (uint8) C_ERR_LIN2X_B0);
    7ece:	72da 00b0 	lod	A, #176
    7ed2:	82db 89f6 	callf	0x89f6 <_SetLastError>
    7ed6:	5c03      	dec	S, #4
    7ed8:	541d      	ret	#30
					SetLastError( (uint8) C_ERR_LIN2X_B1);
				}
			}
		}
#endif /* ((LINPROT & LINXX) == LIN2X) */
		else if ( u16DiagPCI_SID == C_PCI_SID_READ_BY_ID )
    7eda:	eeda 06b2 	cmp	Y, #1714
    7ede:	1901      	je	0x7ee2 <_HandleDfrDiag+0xb2>
    7ee0:	0043      	jmp	0x7f68 <_HandleDfrDiag+0x138>
			 * (0x40-0xFF: Reserved)
			 * (M) = Mandatory
			 * (O) = Optional
			 * (U) = User defined
			 */
			if ( ValidSupplierFunctionID( (pDiag->byD2) | ((uint16)(pDiag->byD3) << 8), (pDiag->byD4) | ((uint16)(pDiag->byD5) << 8)) )
    7ee2:	6142      	lod	AL, dp:0x42 <__data_dp_end+0x6>
    7ee4:	5cf2      	usex	A
    7ee6:	7ee2      	lod	X, A
    7ee8:	6943      	lod	AH, dp:0x43 <__data_dp_end+0x7>
    7eea:	6000      	lod	AL, #0
    7eec:	26e2      	or	X, A
    7eee:	6941      	lod	AH, dp:0x41 <__data_dp_end+0x5>
    7ef0:	6140      	lod	AL, dp:0x40 <__data_dp_end+0x4>
    7ef2:	5edf      	push	X
    7ef4:	178d      	call	0x7e10 <_ValidSupplierFunctionID>
    7ef6:	5c01      	dec	S, #2
    7ef8:	ac00      	cmp	A, #0
    7efa:	1d01      	jne	0x7efe <_HandleDfrDiag+0xce>
    7efc:	02ea      	jmp	0x84d2 <_HandleDfrDiag+0x6a2>
			{
				if ( pDiag->byD1 == (uint8) C_LIN_PROD_ID )
    7efe:	613f      	lod	AL, dp:0x3f <__data_dp_end+0x3>
    7f00:	1d0d      	jne	0x7f1c <_HandleDfrDiag+0xec>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| 0xF2 | Supplier | Supplier | Function | Function |  Variant |
					 *	|     |     |      | ID (LSB) | ID (MSB) | ID (LSB) | ID (MSB) |    ID    |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					g_DiagResponse.byNAD = g_u8NAD;
    7f02:	621b      	lod	AL, [S-28]
    7f04:	4144      	mov	dp:0x44 <_g_DiagResponse>, AL
					g_DiagResponse.byPCI = (uint8) C_RPCI_READ_BY_ID_00;
    7f06:	6006      	lod	AL, #6
    7f08:	4145      	mov	dp:0x45 <_g_DiagResponse+0x1>, AL
					g_DiagResponse.byRSID = (uint8) C_RSID_READ_BY_ID;
    7f0a:	60f2      	lod	AL, #-14
    7f0c:	4146      	mov	dp:0x46 <_g_DiagResponse+0x2>, AL
					g_DiagResponse.byD5 = (uint8) C_VARIANT;	/* g_NvramUser.Variant; (MMP160613-3) */
    7f0e:	60b0      	lod	AL, #-80
    7f10:	414b      	mov	dp:0x4b <_g_DiagResponse+0x7>, AL
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to2() */

static __inline__ void StoreD1to4( uint16 a, uint16 b)
{
    7f12:	72da 0124 	lod	A, #292
    7f16:	7ada 00b0 	lod	Y, #176
    7f1a:	000a      	jmp	0x7f30 <_HandleDfrDiag+0x100>
					g_DiagResponse.byPCI = (uint8) C_RPCI_READ_BY_ID_00;
					g_DiagResponse.byRSID = (uint8) C_RSID_READ_BY_ID;
					g_DiagResponse.byD5 = (uint8) C_VARIANT;	/* g_NvramUser.Variant; (MMP160613-3) */
					StoreD1to4( C_SUPPLIER_ID, C_FUNCTION_ID);					/* Supplier & Function-ID */
				}
				else if ( pDiag->byD1 == C_SERIAL_NR_ID )
    7f1c:	8c01      	cmp	AL, #1
    7f1e:	1d0f      	jne	0x7f3e <_HandleDfrDiag+0x10e>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x05| 0xF2 | SerialNr | SerialNr | SerialNr | SerialNr | Reserved |
					 *	|     |     |      |   (LSB)  |		     |          |   (MSB)  |          |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					g_DiagResponse.byNAD = g_u8NAD;
    7f20:	661b      	lod	YL, [S-28]
    7f22:	4544      	mov	dp:0x44 <_g_DiagResponse>, YL
					g_DiagResponse.byPCI = (uint8) C_RPCI_READ_BY_ID_01;
    7f24:	6005      	lod	AL, #5
    7f26:	4145      	mov	dp:0x45 <_g_DiagResponse+0x1>, AL
					g_DiagResponse.byRSID = (uint8) C_RSID_READ_BY_ID;
    7f28:	60f2      	lod	AL, #-14
    7f2a:	4146      	mov	dp:0x46 <_g_DiagResponse+0x2>, AL
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to2() */

static __inline__ void StoreD1to4( uint16 a, uint16 b)
{
    7f2c:	7166      	lod	A, dp:0x66 <_g_NvramUser+0xc>
    7f2e:	7968      	lod	Y, dp:0x68 <_g_NvramUser+0xe>
	__asm__ __volatile__
    7f30:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
    7f32:	4948      	mov	dp:0x48 <_g_DiagResponse+0x4>, AH
    7f34:	4549      	mov	dp:0x49 <_g_DiagResponse+0x5>, YL
    7f36:	4d4a      	mov	dp:0x4a <_g_DiagResponse+0x6>, YH
		"mov dp:_g_DiagResponse+5, YL\n\t"
		"mov dp:_g_DiagResponse+6, YH"
		:
		: "b" (a), "y" (b)
	);
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
    7f38:	6007      	lod	AL, #7
    7f3a:	4131      	mov	dp:0x31 <_g_u8BufferOutID>, AL
    7f3c:	541d      	ret	#30
					g_DiagResponse.byPCI = (uint8) C_RPCI_READ_BY_ID_01;
					g_DiagResponse.byRSID = (uint8) C_RSID_READ_BY_ID;
					StoreD1to4( g_NvramUser.SerialNumberLSW, g_NvramUser.SerialNumberMSW);	/* Serial-number */
				}
#if (LINPROT == LIN2J_VALVE_GM)
				else if ( pDiag->byD1 == (uint8) C_SVN_ID )
    7f3e:	8c30      	cmp	AL, #48
    7f40:	1d09      	jne	0x7f54 <_HandleDfrDiag+0x124>
				{
					g_DiagResponse.byNAD = g_u8NAD;
    7f42:	621b      	lod	AL, [S-28]
    7f44:	4144      	mov	dp:0x44 <_g_DiagResponse>, AL
					g_DiagResponse.byPCI = (uint8) C_RPCI_READ_BY_ID_30;
    7f46:	6005      	lod	AL, #5
    7f48:	4145      	mov	dp:0x45 <_g_DiagResponse+0x1>, AL
					g_DiagResponse.byRSID = (uint8) C_RSID_READ_BY_ID;
    7f4a:	60f2      	lod	AL, #-14
    7f4c:	4146      	mov	dp:0x46 <_g_DiagResponse+0x2>, AL
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to2() */

static __inline__ void StoreD1to4( uint16 a, uint16 b)
{
    7f4e:	7001      	lod	A, #1
    7f50:	78ff      	lod	Y, #-1
    7f52:	07ee      	jmp	0x7f30 <_HandleDfrDiag+0x100>
				}
#endif /* ((LINPROT & LINXX) == LIN2X) */
				else
				{
					/* Identifier not supported */
					SetupDiagResponse( g_u8NAD, pDiag->bySID, (uint8) C_ERRCODE_SFUNC_NOSUP);	/* Status = Negative feedback */
    7f54:	621b      	lod	AL, [S-28]
    7f56:	5cf2      	usex	A
    7f58:	54ca 0012 	pushw	#18
    7f5c:	7a1b      	lod	Y, [S-28]
    7f5e:	5adf      	push	Y
    7f60:	1732      	call	0x7dc6 <_SetupDiagResponse>
					SetLastError( (uint8) C_ERR_LIN2X_B2);
    7f62:	72da 00b2 	lod	A, #178
    7f66:	07b5      	jmp	0x7ed2 <_HandleDfrDiag+0xa2>
				SetLastError( (uint8) C_ERR_LIN2X_CB);
			}
		}
#endif /* ((LINPROT & LINXX) == LIN2X) */
#if ((LINPROT & LINXX) == LIN2J)
		else if ( u16DiagPCI_SID == C_SID_PCI_RESET )	/* Targeted or Broadcast reset */
    7f68:	eeda 01b5 	cmp	Y, #437
    7f6c:	1d0a      	jne	0x7f82 <_HandleDfrDiag+0x152>
		{
			/* Reset Target */
			MLX4_RESET();														/* Reset the Mlx4   */
    7f6e:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    7f72:	94fe      	and	AL, #-2
    7f74:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
			bistResetInfo = C_CHIP_STATE_LIN_CMD_RESET;
    7f78:	72da 3072 	lod	A, #12402
    7f7c:	52d8 0338 	mov	0x338 <_bistResetInfo>, A
    7f80:	01ac      	jmp	0x82da <_HandleDfrDiag+0x4aa>
			MLX16_RESET();														/* Reset the Mlx16  */
			/* This reset restart the chip as POR, and doesn't come back (no answer) */
		}
#endif /* ((LINPROT & LINXX) == LIN2J) */
#if _SUPPORT_MLX_DEBUG_MODE
		else if ( pDiag->bySID == C_SID_MLX_DEBUG )
    7f82:	6217      	lod	AL, [S-24]
    7f84:	8cdb      	cmp	AL, #-37
    7f86:	1901      	je	0x7f8a <_HandleDfrDiag+0x15a>
    7f88:	0221      	jmp	0x83cc <_HandleDfrDiag+0x59c>
			 *	+-----+-----+------+----------+----------+----------+----------+----------+
			 *	| NAD | 0x06| Debug| Supplier | Supplier | Param #1 | Param #2 | Function |
			 *	|     |     | 0xDB | ID (LSB) | ID (MSB) |          |          |    ID    |
			 *	+-----+-----+------+----------+----------+----------+----------+----------+
			 */
			uint16 u16SupplierID = (((uint16) pDiag->byD2) << 8) | ((uint16) pDiag->byD1);
    7f8a:	6940      	lod	AH, dp:0x40 <__data_dp_end+0x4>
    7f8c:	613f      	lod	AL, dp:0x3f <__data_dp_end+0x3>
			if ( u16SupplierID == C_SUPPLIER_ID )
    7f8e:	aeda 0124 	cmp	A, #292
    7f92:	1901      	je	0x7f96 <_HandleDfrDiag+0x166>
    7f94:	0213      	jmp	0x83bc <_HandleDfrDiag+0x58c>
			{
				/* MMP131024-1: Reply diagnostics response with NAD, length and RSID.*/
				g_DiagResponse.byNAD = g_u8NAD;
    7f96:	661b      	lod	YL, [S-28]
    7f98:	4544      	mov	dp:0x44 <_g_DiagResponse>, YL
				g_DiagResponse.byPCI = 0x06;
    7f9a:	6006      	lod	AL, #6
    7f9c:	4145      	mov	dp:0x45 <_g_DiagResponse+0x1>, AL
				g_DiagResponse.byRSID = (uint8) C_SID_MLX_DEBUG;
    7f9e:	6217      	lod	AL, [S-24]
    7fa0:	4146      	mov	dp:0x46 <_g_DiagResponse+0x2>, AL
				 * 0xF8: NVRAM Clear function
				 * 0xFC: Clear Fatal-handler error logging
				 * 0xFD: Get I/O-register value (16-bits)
				 * 0xFE: Get Fatal-error: error-code, info and address
				 */
				if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_SUPPORT )				/* MMP140519-2 - Begin */
    7fa2:	6143      	lod	AL, dp:0x43 <__data_dp_end+0x7>
    7fa4:	4213      	mov	[S-20], AL
    7fa6:	1d07      	jne	0x7fb6 <_HandleDfrDiag+0x186>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| 0xDB |   index  |MLX DBG[i]|MLX DBG[i]| Reserved | Reserved |
					 *	|     |     |      |          |   (LSB)  |   (MSB)  |          |          |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					uint16 u16Index = (uint16) (pDiag->byD3 & 0x0F);
    7fa8:	6141      	lod	AL, dp:0x41 <__data_dp_end+0x5>
    7faa:	b40f      	and	A, #15
	}
	return ( u16Result );
} /* End of ValidSupplierFunctionID() */

static __inline__ void StoreD1to2( uint16 a)
{
    7fac:	4422      	asl	A
    7fae:	7ae2      	lod	Y, A
    7fb0:	e2da a178 	add	Y, #41336
    7fb4:	010b      	jmp	0x81cc <_HandleDfrDiag+0x39c>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					uint16 u16Index = (uint16) (pDiag->byD3 & 0x0F);
					StoreD1to2( tMlxDbgSupport[u16Index]);
				}																/* MMP140519-2 - End */
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_STALLDET )
    7fb6:	6213      	lod	AL, [S-20]
    7fb8:	8c5d      	cmp	AL, #93
    7fba:	1d32      	jne	0x8020 <_HandleDfrDiag+0x1f0>
 *
 * Example:
 *   uint32 result = ((uint32) a) * b
 */
static __inline__ uint32 mulU32_U16byU16(uint16 a, uint16 b)
{
    7fbc:	7ad8 031e 	lod	Y, 0x31e <_l_u16MotorCurrentStallThrshldxN>
    7fc0:	44b6      	lsr	Y, #2
    7fc2:	44b6      	lsr	Y, #2
    7fc4:	44b6      	lsr	Y, #2
    7fc6:	72d8 11d0 	lod	A, 0x11d0 <__ep__+0x1d0>
    7fca:	b6da 00ff 	and	A, #255
    7fce:	a2da 0100 	add	A, #256
    uint32 result;

    __asm__ __volatile__ (
    7fd2:	4801      	mulu	D, A, Y
    7fd4:	4c80      	mov	YA, D
 *
 * Example:
 *   uint32 result = ((uint32) a) * b
 */
static __inline__ uint32 mulU32_U16byU16(uint16 a, uint16 b)
{
    7fd6:	4c22 0040 	add	YA, #64
    7fda:	0000 
    7fdc:	48a6      	lsr	YA, #7
					 *	| NAD | 0x06| 0xDB |Stallcurrent|Stallcurrent|Motorcurrent|Motorcurrent|StallFlags|
					 *	|     |     |      |Thrshld(LSB)|Thrshld(LSB)|MovAvg (LSB)|MovAvg (MSB)|          |
					 *	+-----+-----+------+------------+------------+------------+------------+----------+
					 */
					uint16 u16Value = (uint16) ((mulU32_U16byU16( (l_u16MotorCurrentStallThrshldxN >> C_MOVAVG_SSZ), EE_GMCURR) + (C_GMCURR_DIV/2)) / C_GMCURR_DIV); /* Stall motor-current threshold [mA] */
					g_DiagResponse.byD1 = (uint8) (u16Value & 0xFF);
    7fde:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
					g_DiagResponse.byD2 = (uint8) (u16Value >> 8);
    7fe0:	4948      	mov	dp:0x48 <_g_DiagResponse+0x4>, AH
    7fe2:	7956      	lod	Y, dp:0x56 <__data_size>
    7fe4:	44b6      	lsr	Y, #2
    7fe6:	44b6      	lsr	Y, #2
    7fe8:	44b6      	lsr	Y, #2
    7fea:	72d8 11d0 	lod	A, 0x11d0 <__ep__+0x1d0>
    7fee:	b6da 00ff 	and	A, #255
    7ff2:	a2da 0100 	add	A, #256
    uint32 result;

    __asm__ __volatile__ (
    7ff6:	4801      	mulu	D, A, Y
    7ff8:	4c80      	mov	YA, D
 *
 * Example:
 *   uint32 result = ((uint32) a) * b
 */
static __inline__ uint32 mulU32_U16byU16(uint16 a, uint16 b)
{
    7ffa:	4c22 0040 	add	YA, #64
    7ffe:	0000 
    8000:	48a6      	lsr	YA, #7
					u16Value = (uint16) ((mulU32_U16byU16( (g_u16MotorCurrentMovAvgxN >> C_MOVAVG_SSZ), EE_GMCURR) + (C_GMCURR_DIV/2)) / C_GMCURR_DIV); /* Moving average-motor current [mA] */
					g_DiagResponse.byD3 = (uint8) (u16Value & 0xFF);
    8002:	4149      	mov	dp:0x49 <_g_DiagResponse+0x5>, AL
					g_DiagResponse.byD4 = (uint8) (u16Value >> 8);
    8004:	494a      	mov	dp:0x4a <_g_DiagResponse+0x6>, AH
						g_DiagResponse.byD5 = (g_u8StallTypeComm & M_STALL_MODE) | (l_u8StallCountO & 0x07);	/* Stall detection & count */
					}
					else
#endif /* _SUPPORT_STALLDET_O */												/* MMP140330-1 */
					{
						g_DiagResponse.byD5 = (g_u8StallTypeComm & M_STALL_MODE) | (l_u8StallCountA & 0x07);	/* Stall detection & count */
    8006:	611f      	lod	AL, dp:0x1f <_g_u8StallTypeComm>
    8008:	9478      	and	AL, #120
    800a:	4211      	mov	[S-18], AL
    800c:	613b      	lod	AL, dp:0x3b <_l_u8StallCountA>
    800e:	9407      	and	AL, #7
    8010:	8611      	or	AL, [S-18]
    8012:	414b      	mov	dp:0x4b <_g_DiagResponse+0x7>, AL
					}
					if ( g_e8StallDetectorEna != C_STALLDET_NONE )				/* MMP130916-1 */
    8014:	61ee      	lod	AL, dp:0xee <_g_e8StallDetectorEna>
    8016:	1d01      	jne	0x801a <_HandleDfrDiag+0x1ea>
    8018:	078f      	jmp	0x7f38 <_HandleDfrDiag+0x108>
					{
						g_u8StallTypeComm = (uint8) C_STALL_NOT_FOUND;
    801a:	6000      	lod	AL, #0
    801c:	411f      	mov	dp:0x1f <_g_u8StallTypeComm>, AL
    801e:	078c      	jmp	0x7f38 <_HandleDfrDiag+0x108>
					}
					g_u8BufferOutID = (uint8) QR_RFR_DIAG;						/* LIN Output buffer is valid (RFR_DIAG) */
				}
#if (LIN_AA_INFO != FALSE)
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_LINAA_1 )
    8020:	6213      	lod	AL, [S-20]
    8022:	8ca1      	cmp	AL, #-95
    8024:	1d26      	jne	0x8072 <_HandleDfrDiag+0x242>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| 0xDB |   Step   |  Ishunt1 |  Ishunt2 |  Ishunt3 | AA-Flags |
					 *	|     |     |      |CycleCount|          |          |          |          |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					PSNPD_DATA pSNPD_Data = LIN_AA_DATA + l_u8SNPD_CycleCountComm;
    8026:	62d8 0122 	lod	AL, 0x122 <_l_u8SNPD_CycleCountComm>
    802a:	4210      	mov	[S-17], AL
    802c:	5cf2      	usex	A
    802e:	4872 0010 	muls	A, A, #16
    8032:	7ae2      	lod	Y, A
    8034:	e2da 0156 	add	Y, #342
					g_DiagResponse.byD1 = (uint8) ((pSNPD_Data->byStepAndFlags << 1) & 0xF0) | (l_u8SNPD_CycleCountComm & 0x0F); /* MMP130818-1 */
    8038:	62f0      	lod	AL, [Y]
    803a:	420f      	mov	[S-16], AL
    803c:	4420      	asl	AL
    803e:	94f0      	and	AL, #-16
    8040:	420e      	mov	[S-15], AL
    8042:	6210      	lod	AL, [S-17]
    8044:	940f      	and	AL, #15
    8046:	860e      	or	AL, [S-15]
    8048:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
					g_DiagResponse.byD2 = pSNPD_Data->byIshunt1;
    804a:	62f1      	lod	AL, [Y+1]
    804c:	4148      	mov	dp:0x48 <_g_DiagResponse+0x4>, AL
					g_DiagResponse.byD3 = pSNPD_Data->byIshunt2;
    804e:	62f2      	lod	AL, [Y+2]
    8050:	4149      	mov	dp:0x49 <_g_DiagResponse+0x5>, AL
					g_DiagResponse.byD4 = pSNPD_Data->byIshunt3;
    8052:	62f3      	lod	AL, [Y+3]
    8054:	414a      	mov	dp:0x4a <_g_DiagResponse+0x6>, AL
					g_DiagResponse.byD5 = (pSNPD_Data->byStepAndFlags & 0x87);	/* MMP130818-1 */
    8056:	620f      	lod	AL, [S-16]
    8058:	9487      	and	AL, #-121
    805a:	414b      	mov	dp:0x4b <_g_DiagResponse+0x7>, AL
					l_u8SNPD_CycleCountComm++;
    805c:	6210      	lod	AL, [S-17]
    805e:	8001      	add	AL, #1
    8060:	42d8 0122 	mov	0x122 <_l_u8SNPD_CycleCountComm>, AL
					if ( l_u8SNPD_CycleCountComm >= LIN_AA_INFO_SZ )								/* Don't increase index incase last AA-structure index */
    8064:	8c0f      	cmp	AL, #15
    8066:	1e01      	jug	0x806a <_HandleDfrDiag+0x23a>
    8068:	0767      	jmp	0x7f38 <_HandleDfrDiag+0x108>
					{
						l_u8SNPD_CycleCountComm = 0;
    806a:	6400      	lod	YL, #0
    806c:	46d8 0122 	mov	0x122 <_l_u8SNPD_CycleCountComm>, YL
    8070:	0763      	jmp	0x7f38 <_HandleDfrDiag+0x108>
					}
					g_u8BufferOutID = (uint8) QR_RFR_DIAG;											/* LIN Output buffer is valid (RFR_DIAG) */
				}
#if (LIN_AA_SCREENTEST != FALSE)
				else if ( (pDiag->byD5 >= (uint8) C_DBG_SUBFUNC_LINAA_2) && (pDiag->byD5 <= (uint8) C_DBG_SUBFUNC_LINAA_4) )
    8072:	6213      	lod	AL, [S-20]
    8074:	805e      	add	AL, #94
    8076:	8c02      	cmp	AL, #2
    8078:	1e19      	jug	0x80ac <_HandleDfrDiag+0x27c>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| 0xDB |CycleCount|CommonMode|CommonMode|DifferMode|DifferMode|
					 *	|     |     |      |          |   (LSB)  |   (MSB)  |   (LSB)  |   (MSB)  |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					PSNPD_DATA pSNPD_Data = LIN_AA_DATA + l_u8SNPD_CycleCountComm;
    807a:	66d8 0122 	lod	YL, 0x122 <_l_u8SNPD_CycleCountComm>
    807e:	62e8      	lod	AL, YL
    8080:	5cf2      	usex	A
    8082:	4872 0010 	muls	A, A, #16
    8086:	7ee2      	lod	X, A
    8088:	22da 0156 	add	X, #342
					uint16 *pu16CMDM;
					g_DiagResponse.byD1 = l_u8SNPD_CycleCountComm;
    808c:	4547      	mov	dp:0x47 <_g_DiagResponse+0x3>, YL
					if ( (pDiag->byD5 == (uint8) C_DBG_SUBFUNC_LINAA_2))
    808e:	6213      	lod	AL, [S-20]
    8090:	8ca2      	cmp	AL, #-94
    8092:	1d03      	jne	0x809a <_HandleDfrDiag+0x26a>
						pu16CMDM = (uint16 *) &(pSNPD_Data->u16CM_1);
    8094:	7aee      	lod	Y, X
    8096:	e004      	add	Y, #4
    8098:	01f6      	jmp	0x8486 <_HandleDfrDiag+0x656>
					else if (pDiag->byD5 >= (uint8) C_DBG_SUBFUNC_LINAA_3)
    809a:	6213      	lod	AL, [S-20]
    809c:	8ca2      	cmp	AL, #-94
    809e:	1a03      	jule	0x80a6 <_HandleDfrDiag+0x276>
						pu16CMDM = (uint16 *) &(pSNPD_Data->u16CM_2);
    80a0:	7aee      	lod	Y, X
    80a2:	e008      	add	Y, #8
    80a4:	01f0      	jmp	0x8486 <_HandleDfrDiag+0x656>
					else
						pu16CMDM = (uint16 *) &(pSNPD_Data->u16CM_3);
    80a6:	7aee      	lod	Y, X
    80a8:	e00c      	add	Y, #12
    80aa:	01ed      	jmp	0x8486 <_HandleDfrDiag+0x656>
					StoreD2to5( pu16CMDM[0], pu16CMDM[1]); /*lint !e415 */
				}
#endif /* (LIN_AA_SCREENTEST != FALSE) */
#endif /* (LIN_AA_INFO != FALSE) */
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_APPLSTATE )
    80ac:	6213      	lod	AL, [S-20]
    80ae:	8ca5      	cmp	AL, #-91
    80b0:	1d25      	jne	0x80fc <_HandleDfrDiag+0x2cc>
					 *	bit 5: Emergency Run occurred
					 *	bit 4: Over-temperature
					 *  bit 3:2: Voltage (In-range, UV and OV)
					 *  bit 1:0: Electric Error (Ok, Error, Permanent)
					 */
					g_DiagResponse.byD1 = g_e8MotorStatusMode;
    80b2:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    80b4:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
					{
						uint16 u16CopyPosition = g_u16ActualPosition;
    80b6:	71f0      	lod	A, dp:0xf0 <_g_u16ActualPosition>
						g_DiagResponse.byD2 = (uint8) (u16CopyPosition & 0xFF);
    80b8:	4148      	mov	dp:0x48 <_g_DiagResponse+0x4>, AL
						g_DiagResponse.byD3 = (uint8) (u16CopyPosition >> 8);
    80ba:	4949      	mov	dp:0x49 <_g_DiagResponse+0x5>, AH
					}
					g_DiagResponse.byD4 = (g_e8MotorRequest & 0x0F);
    80bc:	612e      	lod	AL, dp:0x2e <_g_e8MotorRequest>
    80be:	940f      	and	AL, #15
    80c0:	414a      	mov	dp:0x4a <_g_DiagResponse+0x6>, AL
					{
						uint8 u8D5 = ((g_e8ErrorVoltage & 0x03) << 2) | (g_e8ErrorElectric & 0x03);
    80c2:	612b      	lod	AL, dp:0x2b <_g_e8ErrorVoltage>
    80c4:	b403      	and	A, #3
    80c6:	44a2      	asl	A, #2
    80c8:	652d      	lod	YL, dp:0x2d <_g_e8ErrorElectric>
    80ca:	f403      	and	Y, #3
    80cc:	e6e2      	or	Y, A
						if ( g_e8ErrorOverTemperature != FALSE )
    80ce:	6126      	lod	AL, dp:0x26 <_g_e8ErrorOverTemperature>
    80d0:	1901      	je	0x80d4 <_HandleDfrDiag+0x2a4>
							u8D5 |= 0x10;
    80d2:	e410      	or	Y, #16
						if ( g_u8EmergencyRunOcc != FALSE )
    80d4:	6127      	lod	AL, dp:0x27 <_g_u8EmergencyRunOcc>
    80d6:	1904      	je	0x80e0 <_HandleDfrDiag+0x2b0>
							u8D5 |= 0x20;
    80d8:	62e8      	lod	AL, YL
    80da:	8420      	or	AL, #32
    80dc:	66e0      	lod	YL, AL
    80de:	5cf6      	usex	Y
						if ( g_u8StallOcc != FALSE )
    80e0:	6128      	lod	AL, dp:0x28 <_g_u8StallOcc>
    80e2:	1904      	je	0x80ec <_HandleDfrDiag+0x2bc>
							u8D5 |= 0x40;
    80e4:	62e8      	lod	AL, YL
    80e6:	8440      	or	AL, #64
    80e8:	66e0      	lod	YL, AL
    80ea:	5cf6      	usex	Y
						if (g_u8ChipResetOcc != FALSE)
    80ec:	6129      	lod	AL, dp:0x29 <_g_u8ChipResetOcc>
    80ee:	1904      	je	0x80f8 <_HandleDfrDiag+0x2c8>
							u8D5 |= 0x80;
    80f0:	62e8      	lod	AL, YL
    80f2:	8480      	or	AL, #-128
    80f4:	66e0      	lod	YL, AL
    80f6:	5cf6      	usex	Y
						g_DiagResponse.byD5 = u8D5;
    80f8:	454b      	mov	dp:0x4b <_g_DiagResponse+0x7>, YL
    80fa:	071e      	jmp	0x7f38 <_HandleDfrDiag+0x108>
					}
					g_u8BufferOutID = (uint8) QR_RFR_DIAG;											/* LIN Output buffer is valid (RFR_DIAG) */
				}
#if (LIN_AA_INFO && LIN_AA_SCREENTEST)
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_LIN_BAUDRATE )	/* MMP130810-1 - Begin */
    80fc:	6213      	lod	AL, [S-20]
    80fe:	8ca6      	cmp	AL, #-90
    8100:	1d07      	jne	0x8110 <_HandleDfrDiag+0x2e0>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| 0xDB |  MCU_PLL |NomLINBaud|NomLINBaud|ActLINBaud|ActLINBaud|
					 *	|     |     |      |   _MULT  |rate (LSB)|rate (MSB)|rate (LSB)|rate (MSB)|
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					g_DiagResponse.byD1 = (uint8) MCU_PLL_MULT;					/* MMP131022-1 */
    8102:	6070      	lod	AL, #112
    8104:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to4() */

static __inline__ void StoreD2to5( uint16 a, uint16 b)
{
    8106:	82db 5dda 	callf	0x5dda <_ml_GetBaudRate>
    810a:	7ae2      	lod	Y, A
	__asm__ __volatile__
    810c:	70ff      	lod	A, #-1
    810e:	01bd      	jmp	0x848a <_HandleDfrDiag+0x65a>
					g_DiagResponse.byD5 = (uint8) (u16Baudrate >> 8);
					g_u8BufferOutID = (uint8) QR_RFR_DIAG;						/* LIN Output buffer is valid (RFR_DIAG) */
#endif /* (__MLX_PLTF_VERSION_MAJOR__ == 3) */
				}																/* MMP130810-1 - End */
#endif /* (LIN_AA_INFO && LIN_AA_SCREENTEST) */
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_RESTART_AUTO_BAUDRATE )	/* MMP130828-1 - Begin */
    8110:	6213      	lod	AL, [S-20]
    8112:	8ca7      	cmp	AL, #-89
    8114:	1d07      	jne	0x8124 <_HandleDfrDiag+0x2f4>
					 */
#if ((__MLX_PLTF_VERSION_MAJOR__ == 3) && (__MLX_PLTF_VERSION_MINOR__ >= 1))
					__asm__("clrb dp:_LinBusStatus.1");							/* LinBusStatus &= ~ML_LIN_BAUDRATE_DETECTED; */
#endif /* ((__MLX_PLTF_VERSION_MAJOR__ == 3) && (__MLX_PLTF_VERSION_MINOR__ >= 1)) */
#if (__MLX_PLTF_VERSION_MAJOR__ == 4)
					(void)ml_SetAutoBaudRateMode( ML_ABR_ON_FIRST_FRAME);		/* MMP141215-1 */
    8116:	7000      	lod	A, #0
    8118:	82db 5b9a 	callf	0x5b9a <_ml_SetAutoBaudRateMode>
#endif /* (__MLX_PLTF_VERSION_MAJOR__ == 4) */
#if _SUPPORT_LIN_BUS_ACTIVITY_CHECK
					g_u8Mlx4ErrorState = C_MLX4_STATE_IMMEDIATE_RST;			/* Reset MLX4 too */
    811c:	6080      	lod	AL, #-128
    811e:	42d8 010e 	mov	0x10e <_g_u8Mlx4ErrorState>, AL
    8122:	541d      	ret	#30
#endif /* _SUPPORT_LIN_BUS_ACTIVITY_CHECK */
				}																/* MMP130828-1 - End */
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_ADC_RAW )
    8124:	6213      	lod	AL, [S-20]
    8126:	8cac      	cmp	AL, #-84
    8128:	1d06      	jne	0x8136 <_HandleDfrDiag+0x306>
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to2() */

static __inline__ void StoreD1to4( uint16 a, uint16 b)
{
    812a:	12eb      	call	0x8702 <_GetRawTemperature>
    812c:	520d      	mov	[S-14], A
    812e:	1282      	call	0x8634 <_GetRawChipSupply>
    8130:	7ae2      	lod	Y, A
	__asm__ __volatile__
    8132:	720d      	lod	A, [S-14]
    8134:	06fd      	jmp	0x7f30 <_HandleDfrDiag+0x100>
					 *	|     |     |      |   (LSB)   |   (MSB)   |  (LSB)  |  (MSB)  |          |
					 *	+-----+-----+------+-----------+-----------+---------+---------+----------+
					 */
					StoreD1to4( GetRawTemperature(), GetRawChipSupply());
				}
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_AMBJENV )
    8136:	6213      	lod	AL, [S-20]
    8138:	8cae      	cmp	AL, #-82
    813a:	1d03      	jne	0x8142 <_HandleDfrDiag+0x312>
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to4() */

static __inline__ void StoreD2to5( uint16 a, uint16 b)
{
    813c:	7120      	lod	A, dp:0x20 <_g_i16MotorVoltage>
    813e:	78ff      	lod	Y, #-1
    8140:	01a4      	jmp	0x848a <_HandleDfrDiag+0x65a>
					StoreD2to5( (uint16) g_i16MotorVoltage, (uint16) g_i16PhaseVoltage);
#else  /* _SUPPORT_PHASE_SHORT_DET */
					StoreD2to5( (uint16) g_i16MotorVoltage, 0xFFFF);
#endif /* _SUPPORT_PHASE_SHORT_DET */
				}
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_MLX16_CLK )		/* MMP140527-1 - Begin */
    8142:	6213      	lod	AL, [S-20]
    8144:	8cc0      	cmp	AL, #-64
    8146:	1d30      	jne	0x81a8 <_HandleDfrDiag+0x378>
    8148:	72d8 11c4 	lod	A, 0x11c4 <__ep__+0x1c4>
    814c:	5ce2      	ssex	A
    814e:	a2da 0800 	add	A, #2048
    8152:	5201      	mov	[S-2], A
    8154:	7ada 03e8 	lod	Y, #1000
    8158:	7eda 0800 	lod	X, #2048
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    815c:	4821      	mulu	YA, A, Y
    815e:	4c63      	divu	YA, X
    8160:	4c63      	divu	YA, X
    8162:	520b      	mov	[S-12], A
					 *	| NAD | 0x06| 0xDB |MLX16Clock|MLX16Clock| Reserved | Reserved | Reserved |
					 *	|     |     |      |[kHz](LSB)|[kHz](MSB)|   0xFF   |   0xFF   |   0xFF   |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					uint16 u16RC_Clock = muldivU16_U16byU16byU16( (2048 + EE_OCLOCK), 1000, 2048);
					int16 i16ADC_Temp = (int16) (GetRawTemperature() - EE_OTEMP);
    8164:	12ce      	call	0x8702 <_GetRawTemperature>
    8166:	7ad8 11ba 	lod	Y, 0x11ba <__ep__+0x1ba>
    816a:	aae6      	sub	A, Y
    816c:	7ae2      	lod	Y, A
					int16 i16Coef;
					if ( i16ADC_Temp <= 0 )
    816e:	ac00      	cmp	A, #0
    8170:	1f05      	jsg	0x817c <_HandleDfrDiag+0x34c>
					{
						/* ((dTemp * Gp) * 1000)/131072 --> ((dTemp * Gp) * 125)/16384 */
						i16Coef = EE_GPCLOCK;
    8172:	72d8 11c4 	lod	A, 0x11c4 <__ep__+0x1c4>
    8176:	62e4      	lod	AL, AH
    8178:	5ce2      	ssex	A
    817a:	0003      	jmp	0x8182 <_HandleDfrDiag+0x352>
					}
					else
					{
						/* ((dTemp * Gn) * 1000)/131072 --> ((dTemp * Gn) * 125)/16384 */
						i16Coef = EE_GNCLOCK;
    817c:	72d8 11c6 	lod	A, 0x11c6 <__ep__+0x1c6>
    8180:	5ce2      	ssex	A
					}
					i16Coef = (125 * i16Coef);
    8182:	4872 007d 	muls	A, A, #125
/*
 *	Multiplication
 */
static __inline__ int16 muldivI16_I16byI16byI16(int16 a, int16 b, int16 c) __attribute__ ((always_inline));
static __inline__ int16 muldivI16_I16byI16byI16(int16 a, int16 b, int16 c)
{
    8186:	7eda 4000 	lod	X, #16384
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    818a:	4831      	muls	YA, A, Y
    818c:	4c73      	divs	YA, X
    818e:	4c73      	divs	YA, X
    8190:	4c7b      	dadjs	YA, X
/*
 *	Multiplication
 */
static __inline__ int16 muldivI16_I16byI16byI16(int16 a, int16 b, int16 c) __attribute__ ((always_inline));
static __inline__ int16 muldivI16_I16byI16byI16(int16 a, int16 b, int16 c)
{
    8192:	7a0b      	lod	Y, [S-12]
    8194:	e2e2      	add	Y, A
    8196:	72d8 203e 	lod	A, 0x203e <__ep__+0x103e>
    819a:	6000      	lod	AL, #0
    819c:	72e4      	swap	A
    819e:	a001      	add	A, #1
    uint32 result;

    __asm__ __volatile__ (
    81a0:	4801      	mulu	D, A, Y
 *
 * Example:
 *   uint32 result = ((uint32) a) * b
 */
static __inline__ uint32 mulU32_U16byU16(uint16 a, uint16 b)
{
    81a2:	4881      	lsr	D, #2
	return ( u16Result );
} /* End of ValidSupplierFunctionID() */

static __inline__ void StoreD1to2( uint16 a)
{
	__asm__ __volatile__
    81a4:	4c88      	mov	A, DL
    81a6:	0013      	jmp	0x81ce <_HandleDfrDiag+0x39e>
					}
					i16Coef = (125 * i16Coef);
					u16RC_Clock += muldivI16_I16byI16byI16( i16ADC_Temp, i16Coef, 16384);
					StoreD1to2( (uint16) (mulU32_U16byU16( u16RC_Clock, ((PLL_CTRL >> 8) + 1)) >> 2));
				}																/* MMP140527-1 - End */
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_CHIPID )
    81a8:	6213      	lod	AL, [S-20]
    81aa:	8cc1      	cmp	AL, #-63
    81ac:	1d08      	jne	0x81be <_HandleDfrDiag+0x38e>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| 0xDB |   index  | NVRAM[i] | NVRAM[i] |NVRAM[i+1]|NVRAM[i+1]|
					 *	|     |     |      |          |   (LSB)  |   (MSB)  |   (LSB)  |   (MSB)  |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					uint16 u16Index = (uint16) (pDiag->byD3 & 0x02);
    81ae:	6141      	lod	AL, dp:0x41 <__data_dp_end+0x5>
    81b0:	b402      	and	A, #2
					g_DiagResponse.byD1 = (uint8) u16Index;
    81b2:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
					{
						uint16 *pu16NvramData = ((uint16 *) C_ADDR_MLX_CHIPID) + u16Index;			/* NVRAM 16-bit pointer */
    81b4:	4422      	asl	A
    81b6:	7ae2      	lod	Y, A
    81b8:	e2da 1188 	add	Y, #4488
    81bc:	0164      	jmp	0x8486 <_HandleDfrDiag+0x656>
						StoreD2to5( pu16NvramData[0], pu16NvramData[1]);
					}
				}
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_HWSWID )
    81be:	6213      	lod	AL, [S-20]
    81c0:	8cc2      	cmp	AL, #-62
    81c2:	1d08      	jne	0x81d4 <_HandleDfrDiag+0x3a4>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| 0xDB | HW/SW ID | HW/SW ID | CPU-Clock| Reserved | Reserved |
					 *	|     |     |      |   (LSB)  |   (MSB)  |          |   0xFF   |   0xFF   |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					g_DiagResponse.byD3 = (uint8) MCU_PLL_MULT;
    81c4:	6070      	lod	AL, #112
    81c6:	4149      	mov	dp:0x49 <_g_DiagResponse+0x5>, AL
	}
	return ( u16Result );
} /* End of ValidSupplierFunctionID() */

static __inline__ void StoreD1to2( uint16 a)
{
    81c8:	7ada 1182 	lod	Y, #4482
    81cc:	72f0      	lod	A, [Y]
	__asm__ __volatile__
    81ce:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
    81d0:	4948      	mov	dp:0x48 <_g_DiagResponse+0x4>, AH
    81d2:	06b2      	jmp	0x7f38 <_HandleDfrDiag+0x108>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					g_DiagResponse.byD3 = (uint8) MCU_PLL_MULT;
					StoreD1to2( *((uint16 *) C_ADDR_MLX_HWSWID));
				}
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_SUPPORT_OPTIONS )	/* MMP140904-1 - Begin */
    81d4:	6213      	lod	AL, [S-20]
    81d6:	8cc6      	cmp	AL, #-58
    81d8:	1d0a      	jne	0x81ee <_HandleDfrDiag+0x3be>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| 0xDB | SUPPORT  | SUPPORT  |  SUPPORT |  SUPPORT | Reserved |
					 *	|     |     |      |   (LSB)  |          |          |   (MSB)  |   0xFF   |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					g_DiagResponse.byD1 = (uint8) (C_DIAG_RES
    81da:	6084      	lod	AL, #-124
    81dc:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
#endif /* _SUPPORT_MLX16_HALT */
#if _SUPPORT_CHIP_TEMP_PROFILE
													& ~(1U << 7)				/* bit 7: Chip temperature profile check (dT/dt) support */
#endif /* _SUPPORT_CHIP_TEMP_PROFILE */
																);
					g_DiagResponse.byD2 = (uint8) (C_DIAG_RES
    81de:	60f8      	lod	AL, #-8
    81e0:	4148      	mov	dp:0x48 <_g_DiagResponse+0x4>, AL
#endif /* _SUPPORT_LINNETWORK_LOADER */
#if _SUPPORT_BUSTIMEOUT_SLEEP
													& ~(1U << 3)				/* bit 3: Bus-time-out to sleep support */
#endif /* _SUPPORT_BUSTIMEOUT_SLEEP */
																);
					g_DiagResponse.byD3 = (uint8) (C_DIAG_RES
    81e2:	60cd      	lod	AL, #-51
    81e4:	4149      	mov	dp:0x49 <_g_DiagResponse+0x5>, AL
#endif /* _SUPPORT_PHASE_SHORT_DET */
#if _SUPPORT_STALLDET_O
													& ~(1U << 7)				/* bit 7: Current-oscillation stall-detection support */
#endif /* _SUPPORT_STALLDET_O */
																);
					g_DiagResponse.byD4 = (uint8) (C_DIAG_RES
    81e6:	60f6      	lod	AL, #-10
    81e8:	414a      	mov	dp:0x4a <_g_DiagResponse+0x6>, AL
#endif /* _SUPPORT_DIAG_OC */
#if _SUPPORT_DOUBLE_USTEP
													& ~(1U << 3)				/* bit 3: Double uStep support */
#endif /* _SUPPORT_DOUBLE_USTEP */
																);
					g_DiagResponse.byD5 = (uint8) C_DIAG_RES;
    81ea:	60ff      	lod	AL, #-1
    81ec:	0101      	jmp	0x83f0 <_HandleDfrDiag+0x5c0>
					g_u8BufferOutID = (uint8) QR_RFR_DIAG;						/* LIN Output buffer is valid (RFR_DIAG) */
				}																/* MMP140904-1 - End */
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_MLX4_VERSION )	/* MMP140523-1 - Begin */
    81ee:	6213      	lod	AL, [S-20]
    81f0:	8cc7      	cmp	AL, #-57
    81f2:	1d07      	jne	0x8202 <_HandleDfrDiag+0x3d2>
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to2() */

static __inline__ void StoreD1to4( uint16 a, uint16 b)
{
    81f4:	7ada 4018 	lod	Y, #16408
    81f8:	72f0      	lod	A, [Y]
    81fa:	7ada 401a 	lod	Y, #16410
    81fe:	7af0      	lod	Y, [Y]
    8200:	0697      	jmp	0x7f30 <_HandleDfrDiag+0x100>
					 *	|     |     |      |   (LSB)  |   (MSB)  |   (LSB)  |   (MSB)  |   0xFF   |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					StoreD1to4( *((uint16 *) 0x4018), *((uint16 *) 0x401A));
				}																/* MMP140523-1 - End */
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_PLTF_VERSION )	/* MMP140519-1 - Begin */
    8202:	6213      	lod	AL, [S-20]
    8204:	8cc8      	cmp	AL, #-56
    8206:	1d04      	jne	0x8210 <_HandleDfrDiag+0x3e0>
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to2() */

static __inline__ void StoreD1to4( uint16 a, uint16 b)
{
    8208:	72da 0104 	lod	A, #260
    820c:	7800      	lod	Y, #0
    820e:	0690      	jmp	0x7f30 <_HandleDfrDiag+0x100>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					StoreD1to4( (__MLX_PLTF_VERSION_MAJOR__ | (__MLX_PLTF_VERSION_MINOR__ << 8)),
								(__MLX_PLTF_VERSION_REVISION__ | (__MLX_PLTF_VERSION_CUSTOMER_BUILD__ << 8)));
				}
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_APP_VERSION )
    8210:	6213      	lod	AL, [S-20]
    8212:	8cc9      	cmp	AL, #-55
    8214:	1d15      	jne	0x8240 <_HandleDfrDiag+0x410>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| 0xDB | Appl ver | Appl ver | Appl ver | Appl ver | Appl ver |
					 *	|     |     |      |  (Major) |  (Minor) | (Rev LSB)| (Rev MSB)|   0xFF   |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					if ( pDiag->byD3 == 0 )									/* MMP140618-2 */
    8216:	6141      	lod	AL, dp:0x41 <__data_dp_end+0x5>
    8218:	1d04      	jne	0x8222 <_HandleDfrDiag+0x3f2>
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to2() */

static __inline__ void StoreD1to4( uint16 a, uint16 b)
{
    821a:	7001      	lod	A, #1
    821c:	7ada e008 	lod	Y, #57352
    8220:	0687      	jmp	0x7f30 <_HandleDfrDiag+0x100>
					 */
					if ( pDiag->byD3 == 0 )									/* MMP140618-2 */
					{
						StoreD1to4( (__APP_VERSION_MAJOR__ | (__APP_VERSION_MINOR__ << 8)), __APP_VERSION_REVISION__);
					}
					else if ( pDiag->byD3 == 1 )								/* MMP140618-2 - Begin */
    8222:	8c01      	cmp	AL, #1
    8224:	1d05      	jne	0x8230 <_HandleDfrDiag+0x400>
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to2() */

static __inline__ void StoreD1to4( uint16 a, uint16 b)
{
    8226:	72d8 bf50 	lod	A, 0xbf50 <_product_id>
    822a:	7ad8 bf52 	lod	Y, 0xbf52 <_product_id+0x2>
    822e:	0680      	jmp	0x7f30 <_HandleDfrDiag+0x100>
					}
					else if ( pDiag->byD3 == 1 )								/* MMP140618-2 - Begin */
					{
						StoreD1to4( *((uint16 *) &product_id[0]), *((uint16 *) &product_id[2]));
					}
					else if ( pDiag->byD3 == 2 )
    8230:	8c02      	cmp	AL, #2
    8232:	1901      	je	0x8236 <_HandleDfrDiag+0x406>
    8234:	014e      	jmp	0x84d2 <_HandleDfrDiag+0x6a2>
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to2() */

static __inline__ void StoreD1to4( uint16 a, uint16 b)
{
    8236:	72d8 bf54 	lod	A, 0xbf54 <_product_id+0x4>
    823a:	7ad8 bf56 	lod	Y, 0xbf56 <_product_id+0x6>
    823e:	0678      	jmp	0x7f30 <_HandleDfrDiag+0x100>
					else if ( pDiag->byD3 == 2 )
					{
						StoreD1to4( *((uint16 *) &product_id[4]), *((uint16 *) &product_id[6]));
					}
				}																/* MMP140519-1 - End */
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_MLXPAGE )
    8240:	6213      	lod	AL, [S-20]
    8242:	8cca      	cmp	AL, #-54
    8244:	1d08      	jne	0x8256 <_HandleDfrDiag+0x426>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| 0xDB |   index  | NVRAM[i] | NVRAM[i] |NVRAM[i+1]|NVRAM[i+1]|
					 *	|     |     |      |          |   (LSB)  |   (MSB)  |   (LSB)  |   (MSB)  |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					uint16 u16Index = (uint16) (pDiag->byD3 & 0x3E);
    8246:	6141      	lod	AL, dp:0x41 <__data_dp_end+0x5>
    8248:	b43e      	and	A, #62
					g_DiagResponse.byD1 = (uint8) u16Index;
    824a:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
					{
						uint16 *pu16NvramData = ((uint16 *) C_ADDR_MLXF_PAGE) + u16Index;			/* NVRAM 16-bit pointer */
    824c:	4422      	asl	A
    824e:	7ae2      	lod	Y, A
    8250:	e2da 1180 	add	Y, #4480
    8254:	0118      	jmp	0x8486 <_HandleDfrDiag+0x656>
						StoreD2to5( pu16NvramData[0], pu16NvramData[1]);
					}
				}
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_MLXPID )
    8256:	6213      	lod	AL, [S-20]
    8258:	8ccb      	cmp	AL, #-53
    825a:	1d04      	jne	0x8264 <_HandleDfrDiag+0x434>
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to4() */

static __inline__ void StoreD2to5( uint16 a, uint16 b)
{
    825c:	72d8 0320 	lod	A, 0x320 <_g_u16PidCtrlRatio>
    8260:	79ca      	lod	Y, dp:0xca <_g_u16PID_I>
    8262:	0113      	jmp	0x848a <_HandleDfrDiag+0x65a>
					 *	|     |     |      |          |   (LSB)  |   (MSB)  |   (LSB)  |   (MSB)  |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					StoreD2to5( g_u16PidCtrlRatio, g_u16PID_I);
				}
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_NVRAM_ERRORCODES )
    8264:	6213      	lod	AL, [S-20]
    8266:	8ccc      	cmp	AL, #-52
    8268:	1d13      	jne	0x8290 <_HandleDfrDiag+0x460>
					 *	| NAD | PCI | RSID |    D1    |    D2    |    D3    |    D4    |    D5    |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| 0xDB |   Index  | ErrorCode| ErrorCode| ErrorCode| ErrorCode|
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					uint16 u16Index = (uint16) (pDiag->byD3 & 0x1C);
    826a:	6141      	lod	AL, dp:0x41 <__data_dp_end+0x5>
    826c:	b41c      	and	A, #28
					if ( u16Index < (2 * (C_MAX_ERRORS_PER_PAGE - 1)) )
    826e:	ac15      	cmp	A, #21
    8270:	1a01      	jule	0x8274 <_HandleDfrDiag+0x444>
    8272:	012f      	jmp	0x84d2 <_HandleDfrDiag+0x6a2>
					{
						uint16 *pu16ErrorCode;
						g_DiagResponse.byD1 = (uint8) (u16Index & 0xFF);
    8274:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
						u16Index = u16Index >> 1;
    8276:	4432      	lsr	A
						if ( u16Index < (C_MAX_ERRORS_PER_PAGE/2) )
    8278:	ac05      	cmp	A, #5
    827a:	1e05      	jug	0x8286 <_HandleDfrDiag+0x456>
						{
							pu16ErrorCode = (uint16 *) &(((PNVRAM_ERRORLOG) (C_ADDR_USERPAGE1 + sizeof(NVRAM_USER)))->ErrorLog[u16Index]);
    827c:	4422      	asl	A
    827e:	7ae2      	lod	Y, A
    8280:	e2da 1074 	add	Y, #4212
    8284:	0100      	jmp	0x8486 <_HandleDfrDiag+0x656>
						}
						else
						{
							u16Index -= (C_MAX_ERRORS_PER_PAGE/2);
							pu16ErrorCode = (uint16 *) &(((PNVRAM_ERRORLOG) (C_ADDR_USERPAGE2 + sizeof(NVRAM_USER)))->ErrorLog[u16Index]);
    8286:	4422      	asl	A
    8288:	7ae2      	lod	Y, A
    828a:	e2da 1168 	add	Y, #4456
    828e:	00fb      	jmp	0x8486 <_HandleDfrDiag+0x656>
						}
						StoreD2to5( *pu16ErrorCode, *(pu16ErrorCode+1)); /*lint !e661 */
					}
				}
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_CLR_NVRAM_ERRORCODES )
    8290:	6213      	lod	AL, [S-20]
    8292:	8ccd      	cmp	AL, #-51
    8294:	1d03      	jne	0x829c <_HandleDfrDiag+0x46c>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| Debug| Supplier | Supplier | Reserved | Reserved |   FUNC   |
					 *	|     |     | 0xDB | ID (LSB) | ID (MSB) |          |          |   0xCD   |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					NVRAM_ClearErrorLog();
    8296:	82db 9c10 	callf	0x9c10 <_NVRAM_ClearErrorLog>
    829a:	541d      	ret	#30
				}
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_CHIPENV )
    829c:	6213      	lod	AL, [S-20]
    829e:	8cce      	cmp	AL, #-50
    82a0:	1d08      	jne	0x82b2 <_HandleDfrDiag+0x482>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| 0xDB | Chip-Temp|  Current |  Current |  Voltage |  Voltage |
					 *	|     |     |      |          |   (LSB)  |   (MSB)  |   (LSB)  |   (MSB)  |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					uint16 u16Value = (uint16) (g_i16ChipTemperature + C_TEMPOFF);					/* Chip Junction temperature + offset (C_TEMPOFF); Range: -C_TEMPOFF .. +(255-C_TEMPOFF) */
    82a2:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    82a4:	a03c      	add	A, #60
					g_DiagResponse.byD1 = (uint8) (u16Value & 0xFF);
    82a6:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to4() */

static __inline__ void StoreD2to5( uint16 a, uint16 b)
{
    82a8:	72d8 0112 	lod	A, 0x112 <_g_i16Current>
    82ac:	7ad8 0116 	lod	Y, 0x116 <_g_i16SupplyVoltage>
    82b0:	00ec      	jmp	0x848a <_HandleDfrDiag+0x65a>
					 */
					uint16 u16Value = (uint16) (g_i16ChipTemperature + C_TEMPOFF);					/* Chip Junction temperature + offset (C_TEMPOFF); Range: -C_TEMPOFF .. +(255-C_TEMPOFF) */
					g_DiagResponse.byD1 = (uint8) (u16Value & 0xFF);
					StoreD2to5( (uint16) g_i16Current, (uint16) g_i16SupplyVoltage); /* Motor driver current [mA] & Supply voltage [10mV] */
				}
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_FUNC )
    82b2:	6213      	lod	AL, [S-20]
    82b4:	8ccf      	cmp	AL, #-49
    82b6:	1d14      	jne	0x82e0 <_HandleDfrDiag+0x4b0>
					 *	| NAD | 0x06| Debug| Supplier | Supplier | Function | Function |   FUNC   |
					 *	|     |     | 0xDB | ID (LSB) | ID (MSB) | ID (LSB) | ID (MSB) |   0xCF   |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 * (No response)
					 */
					uint16 u16FunctionID = (((uint16) pDiag->byD4) << 8) | ((uint16) pDiag->byD3);
    82b8:	6942      	lod	AH, dp:0x42 <__data_dp_end+0x6>
    82ba:	6141      	lod	AL, dp:0x41 <__data_dp_end+0x5>

					if ( u16FunctionID == C_DBG_DBGFUNC_RESET )
    82bc:	aeda 4a74 	cmp	A, #19060
    82c0:	1901      	je	0x82c4 <_HandleDfrDiag+0x494>
    82c2:	0107      	jmp	0x84d2 <_HandleDfrDiag+0x6a2>
					{
						/* Function ID = Chip reset */
						(void) mlu_ApplicationStop();
    82c4:	82db 7894 	callf	0x7894 <_mlu_ApplicationStop>
						MLX4_RESET();											/* Reset the Mlx4   */
    82c8:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    82cc:	94fe      	and	AL, #-2
    82ce:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
						bistResetInfo = C_CHIP_STATE_LIN_CMD_RESET;
    82d2:	7ada 3072 	lod	Y, #12402
    82d6:	5ad8 0338 	mov	0x338 <_bistResetInfo>, Y
						MLX16_RESET();											/* Reset the Mlx16  */
    82da:	82db 5920 	callf	0x5920 <_MLX16_RESET>
    82de:	541d      	ret	#30
					{
						MLX16_RESET();											/* Reset the Mlx16  */
					}
#endif /* _SUPPORT_LINCMD_WD_RST */
				}
				else if ( (pDiag->byD5 >= (uint8) C_DBG_SUBFUNC_SET_ANAOUTA) && (pDiag->byD5 <= (uint8) C_DBG_SUBFUNC_SET_ANAOUTH) )
    82e0:	6213      	lod	AL, [S-20]
    82e2:	8030      	add	AL, #48
    82e4:	8c07      	cmp	AL, #7
    82e6:	1e15      	jug	0x8312 <_HandleDfrDiag+0x4e2>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| Debug| Supplier | Supplier |   Value  |   Value  |   FUNC   |
					 *	|     |     | 0xDB | ID (LSB) | ID (MSB) |   (LSB)  |   (MSB)  | 0xD0-0xD7|
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					uint16 *pu16IoReg = (uint16*) au16AnaOutRegs[pDiag->byD5 & 0x07];
    82e8:	6213      	lod	AL, [S-20]
    82ea:	b407      	and	A, #7
    82ec:	4422      	asl	A
    82ee:	7ae2      	lod	Y, A
    82f0:	e2da a198 	add	Y, #41368
    82f4:	7ef0      	lod	X, [Y]
					CONTROL |= (OUTA_WE | OUTB_WE | OUTC_WE);					/* Grant access to ANA_OUTx registers */
    82f6:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    82fa:	8438      	or	AL, #56
    82fc:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
					*pu16IoReg = (((uint16) pDiag->byD4) << 8) | ((uint16) pDiag->byD3);
    8300:	6942      	lod	AH, dp:0x42 <__data_dp_end+0x6>
    8302:	6141      	lod	AL, dp:0x41 <__data_dp_end+0x5>
    8304:	52f8      	mov	[X], A
					CONTROL &= ~(OUTA_WE | OUTB_WE | OUTC_WE);
    8306:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    830a:	94c7      	and	AL, #-57
    830c:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
    8310:	541d      	ret	#30
						uint16 *pu16MotorCurrRaw = (uint16*) &l_au8MotorCurrRaw[u16Index];
						StoreD1to4( pu16MotorCurrRaw[0], pu16MotorCurrRaw[1]);
					}
				}
#endif /* _DEBUG_MOTOR_CURRENT_FLT */
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_FILLNVRAM )		/* MMP140407-1 - Begin */
    8312:	6213      	lod	AL, [S-20]
    8314:	8cf8      	cmp	AL, #-8
    8316:	1901      	je	0x831a <_HandleDfrDiag+0x4ea>
    8318:	0035      	jmp	0x8384 <_HandleDfrDiag+0x554>
					 *	| NAD | 0x06| Debug| Supplier | Supplier | NVRAM ID |  Pattern |   FUNC   |
					 *	|     |     | 0xDB | ID (LSB) | ID (MSB) |          |          |   0xF8   |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 * (No response)
					 */
					uint8 u8NvramID = pDiag->byD3;
    831a:	6141      	lod	AL, dp:0x41 <__data_dp_end+0x5>
    831c:	5cf2      	usex	A
    831e:	5209      	mov	[S-10], A
					uint16 u16Pattern = (((uint16) pDiag->byD4) << 8) | ((uint16) pDiag->byD4);
    8320:	6142      	lod	AL, dp:0x42 <__data_dp_end+0x6>
    8322:	5cf2      	usex	A
    8324:	7ae2      	lod	Y, A
    8326:	6c00      	lod	YH, #0
    8328:	7ae8      	swap	Y
    832a:	a6e6      	or	A, Y
    832c:	5207      	mov	[S-8], A
					if ( u8NvramID & 0x01 )
    832e:	7209      	lod	A, [S-10]
    8330:	b401      	and	A, #1
    8332:	1909      	je	0x8346 <_HandleDfrDiag+0x516>
					{
						/* Fill NVRAM #1, 1 */
						uint16 *pu16NvramData = ((uint16 *) BGN_NVRAM1_PAGE1_ADDRESS);
    8334:	7ada 1000 	lod	Y, #4096
    8338:	7c40      	lod	X, #64
						do
						{
							*pu16NvramData++ = u16Pattern;
    833a:	7207      	lod	A, [S-8]
    833c:	52d6      	mov	[Y++], A
    833e:	1bfd      	djnz	X, 0x833a <_HandleDfrDiag+0x50a>
						} while (pu16NvramData < (uint16 *) END_NVRAM1_PAGE1_ADDRESS);
						NVRAM_SavePage( NVRAM1_PAGE1);
    8340:	7000      	lod	A, #0
    8342:	82db 5a00 	callf	0x5a00 <_NVRAM_SavePage>
					}
					if ( u8NvramID & 0x02 )
    8346:	7209      	lod	A, [S-10]
    8348:	b402      	and	A, #2
    834a:	1909      	je	0x835e <_HandleDfrDiag+0x52e>
					{
						/* Fill NVRAM #1, 2 (Don't overwrite the NVRAM1 trim value) */
						uint16 *pu16NvramData = ((uint16 *) BGN_NVRAM1_PAGE2_ADDRESS);
    834c:	7ada 1080 	lod	Y, #4224
    8350:	7c3e      	lod	X, #62
						do
						{
							*pu16NvramData++ = u16Pattern;
    8352:	7207      	lod	A, [S-8]
    8354:	52d6      	mov	[Y++], A
    8356:	1bfd      	djnz	X, 0x8352 <_HandleDfrDiag+0x522>
						} while (pu16NvramData < (uint16 *) END_NVRAM1_PAGE2_ADDRESS);
						NVRAM_SavePage( NVRAM1_PAGE2);
    8358:	7001      	lod	A, #1
    835a:	82db 5a00 	callf	0x5a00 <_NVRAM_SavePage>
					}
					if ( u8NvramID & 0x04 )
    835e:	7209      	lod	A, [S-10]
    8360:	b404      	and	A, #4
    8362:	1909      	je	0x8376 <_HandleDfrDiag+0x546>
					{
						/* Fill NVRAM #2, 1 */
						uint16 *pu16NvramData = ((uint16 *) BGN_NVRAM2_PAGE1_ADDRESS);
    8364:	7ada 1100 	lod	Y, #4352
    8368:	7c40      	lod	X, #64
						do
						{
							*pu16NvramData++ = u16Pattern;
    836a:	7207      	lod	A, [S-8]
    836c:	52d6      	mov	[Y++], A
    836e:	1bfd      	djnz	X, 0x836a <_HandleDfrDiag+0x53a>
						} while (pu16NvramData < (uint16 *) END_NVRAM2_PAGE1_ADDRESS);
						NVRAM_SavePage( NVRAM2_PAGE1);
    8370:	7002      	lod	A, #2
    8372:	82db 5a00 	callf	0x5a00 <_NVRAM_SavePage>
					}
					if ( u8NvramID & 0x80 )
    8376:	6209      	lod	AL, [S-10]
    8378:	8c00      	cmp	AL, #0
    837a:	1a81      	jsl	0x837e <_HandleDfrDiag+0x54e>
    837c:	00aa      	jmp	0x84d2 <_HandleDfrDiag+0x6a2>
					{
						NVRAM_LoadUserPage();
    837e:	82db 98d6 	callf	0x98d6 <_NVRAM_LoadUserPage>
    8382:	541d      	ret	#30
						pu16NvramData++;
					} while ( (uint16) pu16NvramData < (C_ADDR_FATALPAGE + 0x7C));
					NVRAM_StorePatch();
				}
#endif /* (_DEBUG_FATAL != FALSE) */
				else if ( pDiag->byD5 == (uint8) C_DBG_SUBFUNC_GET_IO_REG )
    8384:	6213      	lod	AL, [S-20]
    8386:	8cfd      	cmp	AL, #-3
    8388:	1901      	je	0x838c <_HandleDfrDiag+0x55c>
    838a:	00a3      	jmp	0x84d2 <_HandleDfrDiag+0x6a2>
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 *	| NAD | 0x06| 0xDB |  I/O-reg |  I/O-reg | I/O-value| I/O-value| Reserved |
					 *	|     |     |      |   (LSB)  |   (MSB)  |   (LSB)  |   (MSB)  |  (0xFF)  |
					 *	+-----+-----+------+----------+----------+----------+----------+----------+
					 */
					uint16 u16IoAddress = (((uint16) pDiag->byD4) << 8) | ((uint16) pDiag->byD3);
    838c:	6d42      	lod	YH, dp:0x42 <__data_dp_end+0x6>
    838e:	6400      	lod	YL, #0
    8390:	7ee6      	lod	X, Y
    8392:	6141      	lod	AL, dp:0x41 <__data_dp_end+0x5>
    8394:	5cf2      	usex	A
    8396:	26e2      	or	X, A
					if ( ((u16IoAddress >= 0x2000) && (u16IoAddress <= 0x2056)) ||	/* System I/O */
    8398:	72ee      	lod	A, X
    839a:	a2da e000 	add	A, #57344
    839e:	ac56      	cmp	A, #86
    83a0:	1a0a      	jule	0x83b6 <_HandleDfrDiag+0x586>
    83a2:	2eda 07fe 	cmp	X, #2046
    83a6:	1a07      	jule	0x83b6 <_HandleDfrDiag+0x586>
    83a8:	72ee      	lod	A, X
    83aa:	a2da d800 	add	A, #55296
    83ae:	aeda 00da 	cmp	A, #218
    83b2:	1a01      	jule	0x83b6 <_HandleDfrDiag+0x586>
    83b4:	008e      	jmp	0x84d2 <_HandleDfrDiag+0x6a2>
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to2() */

static __inline__ void StoreD1to4( uint16 a, uint16 b)
{
    83b6:	7af8      	lod	Y, [X]
	__asm__ __volatile__
    83b8:	72ee      	lod	A, X
    83ba:	05ba      	jmp	0x7f30 <_HandleDfrDiag+0x100>
				}
#endif /* (_DEBUG_FATAL != FALSE) */
			}
			else
			{
				SetupDiagResponse( g_u8NAD, pDiag->bySID, (uint8) C_ERRCODE_SFUNC_NOSUP);			/* Status = Negative feedback */
    83bc:	621b      	lod	AL, [S-28]
    83be:	5cf2      	usex	A
    83c0:	54ca 0012 	pushw	#18
    83c4:	54ca 00db 	pushw	#219
    83c8:	14fe      	call	0x7dc6 <_SetupDiagResponse>
    83ca:	0585      	jmp	0x7ed6 <_HandleDfrDiag+0xa6>
			}
		}
#endif /* _SUPPORT_MLX_DEBUG_MODE */
		else if ( pDiag->bySID == (uint8) C_SID_MLX_ERROR_CODES )
    83cc:	6217      	lod	AL, [S-24]
    83ce:	8cec      	cmp	AL, #-20
    83d0:	1d11      	jne	0x83f4 <_HandleDfrDiag+0x5c4>
			 *	| NAD | PCI | RSID |    D1    |    D2    |    D3    |    D4    |    D5    |
			 *	+-----+-----+------+----------+----------+----------+----------+----------+
			 *	| NAD | 0x06| 0xEC | Error[0] | Error[1] | Error[2] | Error[3] | Error[4] |
			 *	+-----+-----+------+----------+----------+----------+----------+----------+
			 */
			g_DiagResponse.byNAD = g_u8NAD;
    83d2:	661b      	lod	YL, [S-28]
    83d4:	4544      	mov	dp:0x44 <_g_DiagResponse>, YL
			g_DiagResponse.byPCI = 0x06;
    83d6:	6006      	lod	AL, #6
    83d8:	4145      	mov	dp:0x45 <_g_DiagResponse+0x1>, AL
			g_DiagResponse.byRSID = (uint8) C_SID_MLX_ERROR_CODES;
    83da:	6217      	lod	AL, [S-24]
    83dc:	4146      	mov	dp:0x46 <_g_DiagResponse+0x2>, AL
			g_DiagResponse.byD1 = GetLastError();													/* Oldest Error-code */
    83de:	133a      	call	0x8a54 <_GetLastError>
    83e0:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
			g_DiagResponse.byD2 = GetLastError();
    83e2:	1338      	call	0x8a54 <_GetLastError>
    83e4:	4148      	mov	dp:0x48 <_g_DiagResponse+0x4>, AL
			g_DiagResponse.byD3 = GetLastError();
    83e6:	1336      	call	0x8a54 <_GetLastError>
    83e8:	4149      	mov	dp:0x49 <_g_DiagResponse+0x5>, AL
			g_DiagResponse.byD4 = GetLastError();
    83ea:	1334      	call	0x8a54 <_GetLastError>
    83ec:	414a      	mov	dp:0x4a <_g_DiagResponse+0x6>, AL
			g_DiagResponse.byD5 = GetLastError();
    83ee:	1332      	call	0x8a54 <_GetLastError>
    83f0:	414b      	mov	dp:0x4b <_g_DiagResponse+0x7>, AL
    83f2:	05a2      	jmp	0x7f38 <_HandleDfrDiag+0x108>

			g_u8BufferOutID = (uint8) QR_RFR_DIAG;													/* LIN Output buffer is valid (RFR_DIAG) */
		}
		else if ( (pDiag->bySID == (uint8) C_SID_MLX_EE_PATCH) && ((FL_CTRL0 & FL_DETECT) == 0) )	/* MMP150603-2 */
    83f4:	6217      	lod	AL, [S-24]
    83f6:	8ced      	cmp	AL, #-19
    83f8:	1d26      	jne	0x8446 <_HandleDfrDiag+0x616>
    83fa:	72d8 2026 	lod	A, 0x2026 <__ep__+0x1026>
    83fe:	b401      	and	A, #1
    8400:	1d22      	jne	0x8446 <_HandleDfrDiag+0x616>
			/* EEPROM/NVRAM Patch support
			 * D1.bit 7 = 0 : Read Patch area
			 *			  1 : Write Patch area
			 * D1.bit[6:0] : 16-bit data index. Valid 0x00 through 0x3D.
			 */
			uint16 u16Index = (uint16) (pDiag->byD1 & 0x3F);
    8402:	613f      	lod	AL, dp:0x3f <__data_dp_end+0x3>
    8404:	4201      	mov	[S-2], AL
    8406:	66e0      	lod	YL, AL
    8408:	f43f      	and	Y, #63
    840a:	72e6      	lod	A, Y
    840c:	4422      	asl	A
    840e:	5205      	mov	[S-6], A
			if ( pDiag->byD1 & 0x80 )
    8410:	6201      	lod	AL, [S-2]
    8412:	8c00      	cmp	AL, #0
    8414:	1e8d      	jsge	0x8430 <_HandleDfrDiag+0x600>
				 *	| NAD | 0x06| 0xED |  Write   | W[index] | W[index] |W[index+1]|W[index+1]|
				 *	|     |     |      |   Index  |  (LSB)   |  (MSB)   |   (LSB)  |   (MSB)  |
				 *	+-----+-----+------+----------+----------+----------+----------+----------+
			     * No Response
				 */
				uint16 *pu16NvramData = ((uint16 *) C_ADDR_PATCHPAGE) + u16Index;	/* NVRAM 16-bit pointer */
    8416:	7e05      	lod	X, [S-6]
    8418:	22da 1080 	add	X, #4224
				*pu16NvramData = (((uint16) pDiag->byD3) << 8) | ((uint16) pDiag->byD2);
    841c:	6941      	lod	AH, dp:0x41 <__data_dp_end+0x5>
    841e:	6140      	lod	AL, dp:0x40 <__data_dp_end+0x4>
    8420:	52f8      	mov	[X], A
				pu16NvramData++;
    8422:	7e05      	lod	X, [S-6]
    8424:	22da 1082 	add	X, #4226
				*pu16NvramData = (((uint16) pDiag->byD5) << 8) | ((uint16) pDiag->byD4);
    8428:	6943      	lod	AH, dp:0x43 <__data_dp_end+0x7>
    842a:	6142      	lod	AL, dp:0x42 <__data_dp_end+0x6>
    842c:	52f8      	mov	[X], A
    842e:	541d      	ret	#30
				 *	+-----+-----+------+----------+----------+----------+----------+----------+
				 *	| NAD | 0x06| 0xED |Read Index| R[index] | R[index] |R[index+1]|R[index+1]|
				 *	|     |     |      |          |  (LSB)   |  (MSB)   |   (LSB)  |   (MSB)  |
				 *	+-----+-----+------+----------+----------+----------+----------+----------+
				 */
				g_DiagResponse.byNAD = g_u8NAD;
    8430:	621b      	lod	AL, [S-28]
    8432:	4144      	mov	dp:0x44 <_g_DiagResponse>, AL
				g_DiagResponse.byPCI = 0x06;
    8434:	6006      	lod	AL, #6
    8436:	4145      	mov	dp:0x45 <_g_DiagResponse+0x1>, AL
				g_DiagResponse.byRSID = (uint8) C_SID_MLX_EE_PATCH;
    8438:	6217      	lod	AL, [S-24]
    843a:	4146      	mov	dp:0x46 <_g_DiagResponse+0x2>, AL
				g_DiagResponse.byD1 = (uint8) u16Index;
    843c:	4547      	mov	dp:0x47 <_g_DiagResponse+0x3>, YL
				{
					uint16 *pu16NvramData = ((uint16 *) C_ADDR_PATCHPAGE) + u16Index;	/* NVRAM 16-bit pointer */
    843e:	7a05      	lod	Y, [S-6]
    8440:	e2da 1080 	add	Y, #4224
    8444:	0020      	jmp	0x8486 <_HandleDfrDiag+0x656>
					StoreD2to5( pu16NvramData[0], pu16NvramData[1]);
				}
			}
		}
		else if ( pDiag->bySID == (uint8) C_SID_MLX_EE_USERPG1 )
    8446:	6217      	lod	AL, [S-24]
    8448:	8cee      	cmp	AL, #-18
    844a:	1d24      	jne	0x8494 <_HandleDfrDiag+0x664>
			/* EEPROM/NVRAM User-page #1 support
			 * D1.bit 7 = 0 : Read User-page #1
			 *			  1 : Write User-page #1
			 * D1.bit[6:0] : 16-bit data index. Valid 0x00 through 0x3F.
			 */
			uint16 u16Index = (uint16) (pDiag->byD1 & 0x3F);
    844c:	613f      	lod	AL, dp:0x3f <__data_dp_end+0x3>
    844e:	4201      	mov	[S-2], AL
    8450:	66e0      	lod	YL, AL
    8452:	f43f      	and	Y, #63
    8454:	72e6      	lod	A, Y
    8456:	4422      	asl	A
    8458:	7ee2      	lod	X, A
			if ( pDiag->byD1 & 0x80 )
    845a:	6201      	lod	AL, [S-2]
    845c:	8c00      	cmp	AL, #0
    845e:	1e89      	jsge	0x8472 <_HandleDfrDiag+0x642>
				 *	| NAD | 0x06| 0xEE |  Write   | W[index] | W[index] |W[index+1]|W[index+1]|
				 *	|     |     |      |   Index  |  (LSB)   |  (MSB)   |   (LSB)  |   (MSB)  |
				 *	+-----+-----+------+----------+----------+----------+----------+----------+
			     * No Response
				 */
				uint16 *pu16NvramData = ((uint16 *) &g_NvramUser) + u16Index;	/* NVRAM 16-bit pointer */
    8460:	22da 005a 	add	X, #90
				pu16NvramData[0] = (((uint16) pDiag->byD3) << 8) | ((uint16) pDiag->byD2);
    8464:	6941      	lod	AH, dp:0x41 <__data_dp_end+0x5>
    8466:	6140      	lod	AL, dp:0x40 <__data_dp_end+0x4>
    8468:	52f8      	mov	[X], A
				pu16NvramData[1] = (((uint16) pDiag->byD5) << 8) | ((uint16) pDiag->byD4);
    846a:	6943      	lod	AH, dp:0x43 <__data_dp_end+0x7>
    846c:	6142      	lod	AL, dp:0x42 <__data_dp_end+0x6>
    846e:	52fa      	mov	[X+2], A
    8470:	541d      	ret	#30
				 *	+-----+-----+------+----------+----------+----------+----------+----------+
				 *	| NAD | 0x06| 0xEE |Read Index| R[index] | R[index] |R[index+1]|R[index+1]|
				 *	|     |     |      |          |  (LSB)   |  (MSB)   |   (LSB)  |   (MSB)  |
				 *	+-----+-----+------+----------+----------+----------+----------+----------+
				 */
				g_DiagResponse.byNAD = g_u8NAD;
    8472:	621b      	lod	AL, [S-28]
    8474:	4144      	mov	dp:0x44 <_g_DiagResponse>, AL
				g_DiagResponse.byPCI = 0x06;
    8476:	6006      	lod	AL, #6
    8478:	4145      	mov	dp:0x45 <_g_DiagResponse+0x1>, AL
				g_DiagResponse.byRSID = (uint8) C_SID_MLX_EE_USERPG1;
    847a:	6217      	lod	AL, [S-24]
    847c:	4146      	mov	dp:0x46 <_g_DiagResponse+0x2>, AL
				g_DiagResponse.byD1 = (uint8) u16Index;
    847e:	4547      	mov	dp:0x47 <_g_DiagResponse+0x3>, YL
				{
					uint16 *pu16NvramData = ((uint16 *) &g_NvramUser) + u16Index;	/* NVRAM 16-bit pointer */
    8480:	7aee      	lod	Y, X
    8482:	e2da 005a 	add	Y, #90
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to4() */

static __inline__ void StoreD2to5( uint16 a, uint16 b)
{
    8486:	72f0      	lod	A, [Y]
    8488:	7af2      	lod	Y, [Y+2]
	__asm__ __volatile__
    848a:	4148      	mov	dp:0x48 <_g_DiagResponse+0x4>, AL
    848c:	4949      	mov	dp:0x49 <_g_DiagResponse+0x5>, AH
    848e:	454a      	mov	dp:0x4a <_g_DiagResponse+0x6>, YL
    8490:	4d4b      	mov	dp:0x4b <_g_DiagResponse+0x7>, YH
    8492:	0552      	jmp	0x7f38 <_HandleDfrDiag+0x108>
					uint16 *pu16NvramData = ((uint16 *) &g_NvramUser) + u16Index;	/* NVRAM 16-bit pointer */
					StoreD2to5( pu16NvramData[0], pu16NvramData[1]);
				}
			}
		}
		else if ( pDiag->bySID == (uint8) C_SID_MLX_EE_STORE )
    8494:	6217      	lod	AL, [S-24]
    8496:	8cef      	cmp	AL, #-17
    8498:	1d1c      	jne	0x84d2 <_HandleDfrDiag+0x6a2>
		{
			if ( pDiag->byD1 == (uint8) C_EE_STORE_USERPG1 )
    849a:	613f      	lod	AL, dp:0x3f <__data_dp_end+0x3>
    849c:	8cee      	cmp	AL, #-18
    849e:	1d11      	jne	0x84c2 <_HandleDfrDiag+0x692>
				 *	| NAD | 0x06| 0xEF |   0xEE   | Pages &  |          |          |          |
				 *	|     |     |      |          | ResetFlg |          |          |          |
				 *	+-----+-----+------+----------+----------+----------+----------+----------+
				 * No Response
				 */
				(void) NVRAM_Store( pDiag->byD2);
    84a0:	6140      	lod	AL, dp:0x40 <__data_dp_end+0x4>
    84a2:	5cf2      	usex	A
    84a4:	82db 97cc 	callf	0x97cc <_NVRAM_Store>
				if ( (pDiag->byD2 != 0xFF) && ((pDiag->byD2 & C_NVRAM_USER_PAGE_RESET) != 0) )
    84a8:	6140      	lod	AL, dp:0x40 <__data_dp_end+0x4>
    84aa:	8cff      	cmp	AL, #-1
    84ac:	1912      	je	0x84d2 <_HandleDfrDiag+0x6a2>
    84ae:	b420      	and	A, #32
    84b0:	1910      	je	0x84d2 <_HandleDfrDiag+0x6a2>
				{
					(void) mlu_ApplicationStop();
    84b2:	82db 7894 	callf	0x7894 <_mlu_ApplicationStop>
					MLX4_RESET();												/* Reset the Mlx4   */
    84b6:	62d8 2000 	lod	AL, 0x2000 <__ep__+0x1000>
    84ba:	94fe      	and	AL, #-2
    84bc:	42d8 2000 	mov	0x2000 <__ep__+0x1000>, AL
    84c0:	070c      	jmp	0x82da <_HandleDfrDiag+0x4aa>
					MLX16_RESET();												/* Reset the Mlx16  */
				}
			}
			else if ( (pDiag->byD1 == (uint8) C_EE_STORE_PATCH) && ((FL_CTRL0 & FL_DETECT) == 0) )	/* MMP150603-2 */
    84c2:	8ced      	cmp	AL, #-19
    84c4:	1d06      	jne	0x84d2 <_HandleDfrDiag+0x6a2>
    84c6:	72d8 2026 	lod	A, 0x2026 <__ep__+0x1026>
    84ca:	b401      	and	A, #1
    84cc:	1d02      	jne	0x84d2 <_HandleDfrDiag+0x6a2>
				 *	| NAD | 0x06| 0xEF |   0xED   |          |          |          |          |
				 *	|     |     |      |          |          |          |          |          |
				 *	+-----+-----+------+----------+----------+----------+----------+----------+
				 * No Response
				 */
				NVRAM_StorePatch();
    84ce:	82db 9c66 	callf	0x9c66 <_NVRAM_StorePatch>
    84d2:	541d      	ret	#30

000084d4 <_RfrDiagReset>:
#if ((LINPROT & LINXX) == LIN2X)
	if ( g_u8NAD != (uint8) C_BROADCAST_NAD )
#endif /* ((LINPROT & LINXX) == LIN2X) */
#if ((LINPROT & LINXX) == LIN2J)
	DFR_DIAG *pDiag = &g_LinCmdFrameBuffer.Diag;
	if ( pDiag->byNAD != C_BROADCAST_J2602_NAD )
    84d4:	613c      	lod	AL, dp:0x3c <__data_dp_end>
    84d6:	8c7f      	cmp	AL, #127
    84d8:	1913      	je	0x8500 <_RfrDiagReset+0x2c>
#endif /* ((LINPROT & LINXX) == LIN2J) */
	{
		/* Positive Response */
		g_DiagResponse.byNAD = g_u8NAD;
    84da:	62d8 0034 	lod	AL, 0x34 <_g_u8NAD>
    84de:	4144      	mov	dp:0x44 <_g_DiagResponse>, AL
		g_DiagResponse.byPCI = 0x06;
    84e0:	6006      	lod	AL, #6
    84e2:	4145      	mov	dp:0x45 <_g_DiagResponse+0x1>, AL
		g_DiagResponse.byRSID = (uint8) C_SID_MLX_DEBUG;
    84e4:	60db      	lod	AL, #-37
    84e6:	4146      	mov	dp:0x46 <_g_DiagResponse+0x2>, AL
		g_DiagResponse.byD5 = (uint8) g_NvramUser.Variant;
    84e8:	615d      	lod	AL, dp:0x5d <_g_NvramUser+0x3>
    84ea:	414b      	mov	dp:0x4b <_g_DiagResponse+0x7>, AL
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
	return;
} /* End of StoreD1to2() */

static __inline__ void StoreD1to4( uint16 a, uint16 b)
{
    84ec:	72da 0124 	lod	A, #292
    84f0:	7ada 00b0 	lod	Y, #176
	__asm__ __volatile__
    84f4:	4147      	mov	dp:0x47 <_g_DiagResponse+0x3>, AL
    84f6:	4948      	mov	dp:0x48 <_g_DiagResponse+0x4>, AH
    84f8:	4549      	mov	dp:0x49 <_g_DiagResponse+0x5>, YL
    84fa:	4d4a      	mov	dp:0x4a <_g_DiagResponse+0x6>, YH
		"mov dp:_g_DiagResponse+5, YL\n\t"
		"mov dp:_g_DiagResponse+6, YH"
		:
		: "b" (a), "y" (b)
	);
	g_u8BufferOutID = (uint8) QR_RFR_DIAG;									/* LIN Output buffer is valid (RFR_DIAG) */
    84fc:	6007      	lod	AL, #7
    84fe:	4131      	mov	dp:0x31 <_g_u8BufferOutID>, AL
    8500:	5401      	ret

00008502 <_ADC_StartSoftTrig>:
 *
 * Start ADC measurement using Software trigger.
 * ****************************************************************************	*/
void ADC_StartSoftTrig( void)													/* MMP140709-1 - Begin */
{
	PEND = CLR_ADC_IT;
    8502:	7040      	lod	A, #64
    8504:	52d8 2008 	mov	0x2008 <__ep__+0x1008>, A
	ADC_CTRL = ADC_START;
    8508:	7001      	lod	A, #1
    850a:	5290      	mov	io:0x10 <__dp_noinit_size>, A
	if ( l_u8AdcPowerOff )
    850c:	62d8 012c 	lod	AL, 0x12c <_l_u8AdcPowerOff>
    8510:	1904      	je	0x851a <_ADC_StartSoftTrig+0x18>
    8512:	7eda 008b 	lod	X, #139

static INLINE void NopDelay(uint16 u16DelayCount)
{
	for (; u16DelayCount > 0; u16DelayCount-- )
	{
		NOP();
    8516:	0000      	nop
    8518:	1bfe      	djnz	X, 0x8516 <_ADC_StartSoftTrig+0x14>
	{
		NopDelay( DELAY_50us); /*lint !e522 */
	}
	l_u8AdcPowerOff = FALSE;
    851a:	6000      	lod	AL, #0
    851c:	42d8 012c 	mov	0x12c <_l_u8AdcPowerOff>, AL
    8520:	7c06      	lod	X, #6
    8522:	0000      	nop
    8524:	1bfe      	djnz	X, 0x8522 <_ADC_StartSoftTrig+0x20>
	NopDelay( ADC_SETTING); /*lint !e522 */
	ADC_CTRL = (ADC_START | ADC_SOFT_TRIG);										/* Single shot */
    8526:	72da 0101 	lod	A, #257
    852a:	5290      	mov	io:0x10 <__dp_noinit_size>, A
	while (ADC_CTRL & ADC_START) /* lint -e{722} */ ;							/* Wait for ADC result */
    852c:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    852e:	b401      	and	A, #1
    8530:	1d7d      	jne	0x852c <_ADC_StartSoftTrig+0x2a>
    8532:	5401      	ret

00008534 <_ADC_Stop>:
 *
 * Stop ADC (with waiting for pending ADC conversions to be finished)
 * ****************************************************************************	*/
void ADC_Stop(void)
{	
	if ( ADC_CTRL & ADC_START )													/* In case ADC is active, wait to finish it */
    8534:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    8536:	b401      	and	A, #1
    8538:	190f      	je	0x8558 <_ADC_Stop+0x24>
		while ( (ADC_CTRL & ADC_START) && (u16MaxDelay-- > 0) )
		{
			NopDelay( ADC_DELAY); /*lint !e522 */
		}
#endif
		ADC_CTRL &= ~(ADC_LOOP | ADC_TRIG_SRC | ADC_SYNC_SOC);					/* Stop looping and HW-triggers */
    853a:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    853c:	b6da ff79 	and	A, #65401
    8540:	5290      	mov	io:0x10 <__dp_noinit_size>, A
#define C_TEMP_STABIL_INT_FILTER_COEF		8U									/* Temperature stability integrator filter coefficient: 1/(2^n) */
#define C_TEMP_STABIL_THRESHOLD				20U									/* Temperature threshold (output integrator filter) 30C * (1 - ((2^n-1)/2^n)^(4*60)) = 19 */

static INLINE void NopDelay(uint16 u16DelayCount)
{
	for (; u16DelayCount > 0; u16DelayCount-- )
    8542:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    8544:	b401      	and	A, #1
    8546:	1908      	je	0x8558 <_ADC_Stop+0x24>
		while ( ADC_CTRL & ADC_START )											/* As long as the ADC is active ... */
		{
			ADC_CTRL |= ADC_SOFT_TRIG;											/* ... Set S/W trigger */
    8548:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    854a:	a6da 0100 	or	A, #256
    854e:	5290      	mov	io:0x10 <__dp_noinit_size>, A
    8550:	7c12      	lod	X, #18
	{
		NOP();
    8552:	0000      	nop
    8554:	1bfe      	djnz	X, 0x8552 <_ADC_Stop+0x1e>
    8556:	07f5      	jmp	0x8542 <_ADC_Stop+0xe>
			NopDelay( DELAY_7us); /*lint !e522 */
		}
	}
	ADC_CTRL = 0;																/* Clear the ADC control register */
    8558:	7000      	lod	A, #0
    855a:	5290      	mov	io:0x10 <__dp_noinit_size>, A
	BEGIN_CRITICAL_SECTION();
    855c:	54d0      	psup	#0
	MASK &= ~EN_ADC_IT;															/* Disable ADC Interrupt */
    855e:	72d8 2006 	lod	A, 0x2006 <__ep__+0x1006>
    8562:	b4bf      	and	A, #-65
    8564:	52d8 2006 	mov	0x2006 <__ep__+0x1006>, A
	END_CRITICAL_SECTION();
    8568:	72cb      	pop	M
    856a:	5401      	ret

0000856c <_ADC_Init>:
 *
 * Measure Zero-current offset
 * ADC ISR priority: 3
 * ****************************************************************************	*/
void ADC_Init( void)
{
    856c:	5801      	inc	S, #2
	uint16 volatile u16ZCO;
	ADC_Stop();																	/* clear the ADC control register */
    856e:	17e2      	call	0x8534 <_ADC_Stop>
	ADC_SBASE = (uint16) SBASE_CURROFF;
    8570:	72da a1f4 	lod	A, #41460
    8574:	5292      	mov	io:0x12 <__dp_noinit_size+0x2>, A
	ADC_DBASE = (uint16) &u16ZCO;
    8576:	72ef      	lod	A, S
    8578:	a0fe      	add	A, #-2
    857a:	5294      	mov	io:0x14 <__dp_noinit_size+0x4>, A
	ADC_StartSoftTrig();														/* MMP140709-1 */
    857c:	17c2      	call	0x8502 <_ADC_StartSoftTrig>
	l_u16CurrentZeroOffset = /* lint -e{530} */ u16ZCO;
    857e:	7201      	lod	A, [S-2]
    8580:	52d8 012e 	mov	0x12e <_l_u16CurrentZeroOffset>, A
	ADC_CTRL = (ADC_START | ADC_SOFT_TRIG);										/* Single shot */
    8584:	72da 0101 	lod	A, #257
    8588:	5290      	mov	io:0x10 <__dp_noinit_size>, A
	while (ADC_CTRL & ADC_START) /* lint -e{722} */ ;							/* Wait for ADC result */
    858a:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    858c:	b401      	and	A, #1
    858e:	1d7d      	jne	0x858a <_ADC_Init+0x1e>
	l_u16CurrentZeroOffset = (l_u16CurrentZeroOffset + u16ZCO) >> 1;
    8590:	72d8 012e 	lod	A, 0x12e <_l_u16CurrentZeroOffset>
    8594:	7a01      	lod	Y, [S-2]
    8596:	a2e6      	add	A, Y
    8598:	4432      	lsr	A
    859a:	52d8 012e 	mov	0x12e <_l_u16CurrentZeroOffset>, A
		u16Delta = EE_OMCURR - l_u16CurrentZeroOffset;
	if ( u16Delta > 6 )															/* Need to define this value: 6 LSB's is approx. 5mA */
		l_u16CurrentZeroOffset = EE_OMCURR;										/* Take calibrated current offset, insetad of measured offset */
#endif /* SUPPORT_CALIBRATED_ZERO_CURRENT */

	PRIO = (PRIO & ~(3 << 2)) | ((5 - 3) << 2);									/* ADC IRQ Priority: 5 (3..6) (MMP150106-1) */
    859e:	72d8 2004 	lod	A, 0x2004 <__ep__+0x1004>
    85a2:	b4f3      	and	A, #-13
    85a4:	a408      	or	A, #8
    85a6:	52d8 2004 	mov	0x2004 <__ep__+0x1004>, A
    85aa:	5403      	ret	#4

000085ac <_ADC_Start>:
void ADC_Start( uint16 u16Mode)
#else  /* _SUPPORT_PHASE_SHORT_DET */
void ADC_Start( void)
#endif /* _SUPPORT_PHASE_SHORT_DET */
{
	ADC_Stop();																	/* clear the ADC control register */
    85ac:	17c3      	call	0x8534 <_ADC_Stop>
#if _SUPPORT_PHASE_SHORT_DET
	ADC_SetupShortDetection( u16Mode);
#else  /* _SUPPORT_PHASE_SHORT_DET */
	ADC_SBASE = (uint16) SBASE_INIT_4PH;
    85ae:	72da a1d8 	lod	A, #41432
    85b2:	5292      	mov	io:0x12 <__dp_noinit_size+0x2>, A
#endif /* _SUPPORT_PHASE_SHORT_DET */
	ADC_DBASE = (uint16) &g_AdcMotorRunStepper4;
    85b4:	72da 0258 	lod	A, #600
    85b8:	5294      	mov	io:0x14 <__dp_noinit_size+0x4>, A
	ADC_CTRL  = (ADC_LOOP | ADC_TRIG_SRC | ADC_SYNC_SOC);						/* Loop cycle of conversion is done */
    85ba:	72da 0086 	lod	A, #134
    85be:	5290      	mov	io:0x10 <__dp_noinit_size>, A
	ADC_CTRL |= ADC_START;														/* Start ADC */
    85c0:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    85c2:	a401      	or	A, #1
    85c4:	5290      	mov	io:0x10 <__dp_noinit_size>, A
	if ( l_u8AdcPowerOff )														/* MMP140618-1: Add delay */
    85c6:	62d8 012c 	lod	AL, 0x12c <_l_u8AdcPowerOff>
    85ca:	1904      	je	0x85d4 <_ADC_Start+0x28>
    85cc:	7eda 008b 	lod	X, #139
    85d0:	0000      	nop
    85d2:	1bfe      	djnz	X, 0x85d0 <_ADC_Start+0x24>
	{
		NopDelay( DELAY_mPWM); /*lint !e522 */
	}
	l_u8AdcPowerOff = FALSE;
    85d4:	6000      	lod	AL, #0
    85d6:	42d8 012c 	mov	0x12c <_l_u8AdcPowerOff>, AL
    85da:	5401      	ret

000085dc <_ADC_PowerOff>:
 *
 * Power-off ADC, by disabling reference voltage
 * ****************************************************************************	*/
void ADC_PowerOff( void)
{
	ADC_Stop();																	/* Stop ADC conversion, and disable ADC-IRQ */
    85dc:	17ab      	call	0x8534 <_ADC_Stop>
	ADC_SBASE = (uint16) SBASE_VREF_OFF;
    85de:	72da a1f8 	lod	A, #41464
    85e2:	5292      	mov	io:0x12 <__dp_noinit_size+0x2>, A
	PEND = CLR_ADC_IT;
    85e4:	7040      	lod	A, #64
    85e6:	52d8 2008 	mov	0x2008 <__ep__+0x1008>, A
	ADC_CTRL = ADC_START;
    85ea:	7001      	lod	A, #1
    85ec:	5290      	mov	io:0x10 <__dp_noinit_size>, A
	ADC_Stop();
    85ee:	17a2      	call	0x8534 <_ADC_Stop>
	l_u8AdcPowerOff = TRUE;
    85f0:	6001      	lod	AL, #1
    85f2:	42d8 012c 	mov	0x12c <_l_u8AdcPowerOff>, AL
    85f6:	5401      	ret

000085f8 <_ADC_IT>:
 * ADC Interrupt Service Routine
 * In case no ADC_ISR action required, this ISR has 4us overhead (is approx: 9.5% at 24kHz PWM)
 * (push/pop + check for LIN-AA + Check BEMF ZC)
 * ****************************************************************************	*/
__interrupt__ void ADC_IT(void) 
{
    85f8:	4407      	mov	R, #0
    85fa:	72cb      	pop	M
    85fc:	5401      	ret

000085fe <_GetVsupply>:
 *
 * Get Supply-voltage [10mV]
 * ****************************************************************************	*/
void GetVsupply( void)
{
	uint16 u16FilteredSupplyVoltage = g_AdcMotorRunStepper4.FilteredSupplyVoltage;
    85fe:	7ad8 025a 	lod	Y, 0x25a <_g_AdcMotorRunStepper4+0x2>
 *
 * Example:
 *   int32 result = ((int32) a) * b
 */
static __inline__ int32 mulI32_I16byI16(int16 a, int16 b)
{
    8602:	72d8 11cc 	lod	A, 0x11cc <__ep__+0x1cc>
    8606:	5ce2      	ssex	A
    8608:	eae2      	sub	Y, A
    860a:	72d8 11cc 	lod	A, 0x11cc <__ep__+0x1cc>
    860e:	6000      	lod	AL, #0
    8610:	72e4      	swap	A
    int32 result;

    __asm__ __volatile__ (
    8612:	4811      	muls	D, A, Y
 *
 * Example:
 *   int32 result = ((int32) a) * b
 */
static __inline__ int32 mulI32_I16byI16(int16 a, int16 b)
{
    8614:	4c80      	mov	YA, D
    8616:	4c22 0020 	add	YA, #32
    861a:	0000 
    861c:	4cb2 0000 	cmp	YA, #0
    8620:	0000 
    8622:	1e84      	jsge	0x862c <_GetVsupply+0x2e>
    8624:	4c80      	mov	YA, D
    8626:	4c22 005f 	add	YA, #95
    862a:	0000 
    862c:	48b5      	asr	YA, #6
    862e:	52d8 0116 	mov	0x116 <_g_i16SupplyVoltage>, A
    8632:	5401      	ret

00008634 <_GetRawChipSupply>:
} /* End of GetVsupply() */

#if _SUPPORT_MLX_DEBUG_MODE
uint16 GetRawChipSupply( void)
{
	uint16 u16FilteredSupplyVoltage = g_AdcMotorRunStepper4.FilteredSupplyVoltage;
    8634:	72d8 025a 	lod	A, 0x25a <_g_AdcMotorRunStepper4+0x2>
	return ( u16FilteredSupplyVoltage );
} /* End of GetRawChipSupply() */
    8638:	5401      	ret

0000863a <_GetVsupplyMotor>:
 *
 * Get Supply-voltage [10mV]
 * ****************************************************************************	*/
void GetVsupplyMotor( void)
{
	uint16 u16FilteredDriverVoltage = g_AdcMotorRunStepper4.FilteredDriverVoltage;
    863a:	72d8 025e 	lod	A, 0x25e <_g_AdcMotorRunStepper4+0x6>
#if _SUPPORT_VSMFILTERED
	g_i16MotorVoltage = (int16) ((mulI32_I16byU16( (int16)(u16FilteredDriverVoltage - EE_OVOLTAGE), EE_GVOLTAGE) + (C_GVOLTAGE_DIV/2)) / C_GVOLTAGE_DIV);
    863e:	7ad8 11ce 	lod	Y, 0x11ce <__ep__+0x1ce>
    8642:	5ce6      	ssex	Y
    8644:	aae6      	sub	A, Y
    8646:	7ad8 11ce 	lod	Y, 0x11ce <__ep__+0x1ce>
    864a:	6400      	lod	YL, #0
    864c:	7ae8      	swap	Y
    864e:	5adf      	push	Y
    8650:	82db 6c52 	callf	0x6c52 <_mulI32_I16byU16>
    8654:	4cc0      	mov	D, YA
    8656:	4c22 0020 	add	YA, #32
    865a:	0000 
    865c:	4cb2 0000 	cmp	YA, #0
    8660:	0000 
    8662:	1e84      	jsge	0x866c <_GetVsupplyMotor+0x32>
    8664:	4c80      	mov	YA, D
    8666:	4c22 005f 	add	YA, #95
    866a:	0000 
    866c:	48b5      	asr	YA, #6
    866e:	5120      	mov	dp:0x20 <_g_i16MotorVoltage>, A
    8670:	5c01      	dec	S, #2
    8672:	5401      	ret

00008674 <_ResetChipTemperature>:
 *
 * Reset Chip temperature
 * ****************************************************************************	*/
void ResetChipTemperature( void)
{
	g_AdcMotorRunStepper4.IntTemperatureSensor = 0;
    8674:	7ada 0258 	lod	Y, #600
    8678:	7000      	lod	A, #0
    867a:	52f0      	mov	[Y], A
    867c:	5401      	ret

0000867e <_GetChipTemperature>:
 * GetChipTemperature()
 *
 * Get Chip temperature [C]
 * ****************************************************************************	*/
void GetChipTemperature( uint16 u16Init)										/* MMP131020-1 */
{
    867e:	580b      	inc	S, #12
    8680:	520b      	mov	[S-12], A
	uint16 u16ChipTemperatureSensor = g_AdcMotorRunStepper4.IntTemperatureSensor;
    8682:	7ad8 0258 	lod	Y, 0x258 <_g_AdcMotorRunStepper4>
	int16 i16ChipTemperature, i16ChipTempDelta;

#if _SUPPORT_TWO_LINE_TEMP_INTERPOLATION
	if ( u16ChipTemperatureSensor < EE_OTEMP )
    8686:	72d8 11ba 	lod	A, 0x11ba <__ep__+0x1ba>
    868a:	eee2      	cmp	Y, A
    868c:	1c11      	jnc	0x86b0 <_GetChipTemperature+0x32>
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    868e:	72d8 11ba 	lod	A, 0x11ba <__ep__+0x1ba>
    8692:	aae6      	sub	A, Y
    8694:	5203      	mov	[S-4], A
    8696:	785a      	lod	Y, #90
    8698:	7ed8 11ba 	lod	X, 0x11ba <__ep__+0x1ba>
    869c:	72d8 11bc 	lod	A, 0x11bc <__ep__+0x1bc>
    86a0:	2ae2      	sub	X, A
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    86a2:	7203      	lod	A, [S-4]
    86a4:	4821      	mulu	YA, A, Y
    86a6:	4c63      	divu	YA, X
    86a8:	4c63      	divu	YA, X
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    86aa:	7ae2      	lod	Y, A
    86ac:	e023      	add	Y, #35
    86ae:	0012      	jmp	0x86d4 <_GetChipTemperature+0x56>
    86b0:	72d8 11ba 	lod	A, 0x11ba <__ep__+0x1ba>
    86b4:	eae2      	sub	Y, A
    86b6:	5a01      	mov	[S-2], Y
    86b8:	7ed8 11b8 	lod	X, 0x11b8 <__ep__+0x1b8>
    86bc:	7ad8 11ba 	lod	Y, 0x11ba <__ep__+0x1ba>
    86c0:	2ae6      	sub	X, Y
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    86c2:	704b      	lod	A, #75
    86c4:	7a01      	lod	Y, [S-2]
    86c6:	4821      	mulu	YA, A, Y
    86c8:	4c63      	divu	YA, X
    86ca:	4c63      	divu	YA, X
    86cc:	7ee2      	lod	X, A
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    86ce:	7023      	lod	A, #35
    86d0:	7ae2      	lod	Y, A
    86d2:	eaee      	sub	Y, X
	}
#else  /* _SUPPORT_TWO_LINE_TEMP_INTERPOLATION */
	i16ChipTemperature = (mulI32_I16byI16( (EE_OTEMP - u16ChipTemperatureSensor), EE_GTEMP) / C_GTEMP_DIV) + EE_MIDTEMP;
#endif /* _SUPPORT_TWO_LINE_TEMP_INTERPOLATION */

	if ( u16Init == FALSE )														/* MMP131020-1 */
    86d4:	7e0b      	lod	X, [S-12]
    86d6:	1d13      	jne	0x86fe <_GetChipTemperature+0x80>
	{
		i16ChipTempDelta = i16ChipTemperature - g_i16ChipTemperature;			/* Delta-temp = new-temp - previous-temp */
    86d8:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    86da:	7ee6      	lod	X, Y
    86dc:	2ae2      	sub	X, A
    86de:	72ee      	lod	A, X
		if ( i16ChipTempDelta < 0 )
		{
			i16ChipTempDelta = -i16ChipTempDelta;								/* Absolute temperature change */
    86e0:	ac00      	cmp	A, #0
    86e2:	1e81      	jsge	0x86e6 <_GetChipTemperature+0x68>
    86e4:	5cc2      	neg	A
		}
		if ( (uint16) i16ChipTempDelta > C_TEMPERATURE_JUMP )					/* Temperature change small, then accept new temperature */
    86e6:	ac0a      	cmp	A, #10
    86e8:	1a0a      	jule	0x86fe <_GetChipTemperature+0x80>
		{
			if ( i16ChipTemperature > g_i16ChipTemperature )					/* To great temperature change; Check temperature change "direction" */
    86ea:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    86ec:	eee2      	cmp	Y, A
    86ee:	1b04      	jsle	0x86f8 <_GetChipTemperature+0x7a>
			{
				i16ChipTemperature = g_i16ChipTemperature + 1;					/* Increase by one degree */
    86f0:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    86f2:	7ae2      	lod	Y, A
    86f4:	e001      	add	Y, #1
    86f6:	0003      	jmp	0x86fe <_GetChipTemperature+0x80>
			}
			else
			{
				i16ChipTemperature = g_i16ChipTemperature - 1;					/* Decrease by one degree */
    86f8:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    86fa:	7ae2      	lod	Y, A
    86fc:	e0ff      	add	Y, #-1
			}
		}
	}																			/* MMP131020-1 */
	g_i16ChipTemperature = i16ChipTemperature;
    86fe:	5922      	mov	dp:0x22 <_g_i16ChipTemperature>, Y
    8700:	540d      	ret	#14

00008702 <_GetRawTemperature>:
} /* End of GetChipTemperature() */

#if _SUPPORT_MLX_DEBUG_MODE
uint16 GetRawTemperature( void)
{
	uint16 u16ChipTemperatureSensor = g_AdcMotorRunStepper4.IntTemperatureSensor;
    8702:	7ada 0258 	lod	Y, #600
    8706:	72f0      	lod	A, [Y]
	return ( u16ChipTemperatureSensor );
} /* End of GetRawTemperature() */
    8708:	5401      	ret

0000870a <_GetRawMotorDriverCurrent>:
 * GetRawMotorDriverCurrent()
 *
 * Get (raw) Motor Driver Current [ADC-LSB]
 * ****************************************************************************	*/
uint16 GetRawMotorDriverCurrent( void)
{
    870a:	5801      	inc	S, #2
	uint16 u16Current = 0;
    870c:	7000      	lod	A, #0
    870e:	5201      	mov	[S-2], A
#if ((_SUPPORT_PWM_MODE == BIPOLAR_PWM_SINGLE_INDEPENDED_VSM) || (_SUPPORT_PWM_MODE == BIPOLAR_PWM_SINGLE_INDEPENDED_GND) || (_SUPPORT_PWM_MODE == BIPOLAR_PWM_SINGLE_MIRRORSPECIAL))
	g_u16CurrentMotorCoilA = g_AdcMotorRunStepper4.UnfilteredDriverCurrent;
    8710:	7ad8 0260 	lod	Y, 0x260 <_g_AdcMotorRunStepper4+0x8>
    8714:	5ad8 012a 	mov	0x12a <_g_u16CurrentMotorCoilA>, Y
	if ( g_u16CurrentMotorCoilA > l_u16CurrentZeroOffset )
    8718:	7ed8 012e 	lod	X, 0x12e <_l_u16CurrentZeroOffset>
    871c:	eeee      	cmp	Y, X
    871e:	1a02      	jule	0x8724 <_GetRawMotorDriverCurrent+0x1a>
	{
		u16Current = g_u16CurrentMotorCoilA - (int16) l_u16CurrentZeroOffset;
    8720:	eaee      	sub	Y, X
    8722:	5a01      	mov	[S-2], Y
	}
	g_u16CurrentMotorCoilB = g_AdcMotorRunStepper4.UnfilteredDriverCurrent2;
    8724:	72d8 025c 	lod	A, 0x25c <_g_AdcMotorRunStepper4+0x4>
    8728:	52d8 0128 	mov	0x128 <_g_u16CurrentMotorCoilB>, A
	if ( g_u16CurrentMotorCoilB > l_u16CurrentZeroOffset )
    872c:	aeee      	cmp	A, X
    872e:	1a03      	jule	0x8736 <_GetRawMotorDriverCurrent+0x2c>
	{
		u16Current = u16Current + (g_u16CurrentMotorCoilB - l_u16CurrentZeroOffset);
    8730:	aaee      	sub	A, X
    8732:	a201      	add	A, [S-2]
    8734:	5201      	mov	[S-2], A
	{
		u16Current = u16Current - (int16) l_u16CurrentZeroOffset;
	}
#endif /* ((_SUPPORT_PWM_MODE == BIPOLAR_PWM_SINGLE_INDEPENDED_VSM) || (_SUPPORT_PWM_MODE == BIPOLAR_PWM_SINGLE_INDEPENDED_GND) || (_SUPPORT_PWM_MODE == BIPOLAR_PWM_SINGLE_MIRRORSPECIAL)) */
	return ( u16Current );
} /* End of GetRawMotorDriverCurrent() */
    8736:	7201      	lod	A, [S-2]
    8738:	5403      	ret	#4

0000873a <_GetMotorDriverCurrent>:
 *
 * Get Motor Driver Current [mA]
 * ****************************************************************************	*/
int16 GetMotorDriverCurrent( void)
{
	uint16 u16Current = GetRawMotorDriverCurrent();
    873a:	17e7      	call	0x870a <_GetRawMotorDriverCurrent>
 *
 * Example:
 *   uint32 result = ((uint32) a) * b
 */
static __inline__ uint32 mulU32_U16byU16(uint16 a, uint16 b)
{
    873c:	7ad8 11d0 	lod	Y, 0x11d0 <__ep__+0x1d0>
    8740:	f6da 00ff 	and	Y, #255
    8744:	e2da 0100 	add	Y, #256
    uint32 result;

    __asm__ __volatile__ (
    8748:	4801      	mulu	D, A, Y
    874a:	4c80      	mov	YA, D
 *
 * Example:
 *   uint32 result = ((uint32) a) * b
 */
static __inline__ uint32 mulU32_U16byU16(uint16 a, uint16 b)
{
    874c:	4c22 0040 	add	YA, #64
    8750:	0000 
    8752:	48a6      	lsr	YA, #7
	u16Current = (uint16) ((mulU32_U16byU16( u16Current, EE_GMCURR) + (C_GMCURR_DIV/2)) / C_GMCURR_DIV);	/* MMP131117-1 */
	return ( (int16) u16Current);
} /* End of GetMotorDriverCurrent() */
    8754:	5401      	ret

00008756 <_MeasureVsupplyAndTemperature>:
 *
 * Measure Vbat and Temperature (single-shot, software triggered)
 * ****************************************************************************	*/
void MeasureVsupplyAndTemperature( void)
{	
	ADC_Stop();
    8756:	16ee      	call	0x8534 <_ADC_Stop>
	ADC_SBASE = (uint16) SBASE_MOTORVOLT;										/* switch ADC input source to Voltage */
    8758:	72da a1e8 	lod	A, #41448
    875c:	5292      	mov	io:0x12 <__dp_noinit_size+0x2>, A
	ADC_DBASE = (uint16) &g_AdcMotorRunStepper4.FilteredDriverVoltage;
    875e:	72da 025e 	lod	A, #606
    8762:	5294      	mov	io:0x14 <__dp_noinit_size+0x4>, A
	ADC_StartSoftTrig();														/* MMP140709-1 */
    8764:	16ce      	call	0x8502 <_ADC_StartSoftTrig>

	ADC_SBASE = (uint16) SBASE_SUPPLYVOLT;										/* switch ADC input source to Voltage */
    8766:	72da a1ec 	lod	A, #41452
    876a:	5292      	mov	io:0x12 <__dp_noinit_size+0x2>, A
	ADC_DBASE = (uint16) &g_AdcMotorRunStepper4.FilteredSupplyVoltage;
    876c:	72da 025a 	lod	A, #602
    8770:	5294      	mov	io:0x14 <__dp_noinit_size+0x4>, A
	ADC_StartSoftTrig();														/* MMP140709-1 */
    8772:	16c7      	call	0x8502 <_ADC_StartSoftTrig>

	ADC_SBASE = (uint16) SBASE_TEMP;											/* switch ADC input source to Temperature */
    8774:	72da a1f0 	lod	A, #41456
    8778:	5292      	mov	io:0x12 <__dp_noinit_size+0x2>, A
	ADC_DBASE = (uint16) &g_AdcMotorRunStepper4.IntTemperatureSensor;
    877a:	72da 0258 	lod	A, #600
    877e:	5294      	mov	io:0x14 <__dp_noinit_size+0x4>, A
	ADC_StartSoftTrig();														/* MMP140709-1 */
    8780:	16c0      	call	0x8502 <_ADC_StartSoftTrig>
    8782:	5401      	ret

00008784 <_MeasureMotorCurrent>:
 *
 * Measure Motor-current (filtered) (single-shot, software triggered)
 * ****************************************************************************	*/
void MeasureMotorCurrent( void)
{
	ADC_Stop();
    8784:	16d7      	call	0x8534 <_ADC_Stop>
	ADC_SBASE = (uint16) SBASE_CURRENT;											/* switch ADC input source to Motor-driver current */
    8786:	72da a1e4 	lod	A, #41444
    878a:	5292      	mov	io:0x12 <__dp_noinit_size+0x2>, A
	ADC_DBASE = (uint16) &g_AdcMotorRunStepper4.UnfilteredDriverCurrent;
    878c:	72da 0260 	lod	A, #608
    8790:	5294      	mov	io:0x14 <__dp_noinit_size+0x4>, A
	ADC_StartSoftTrig();														/* MMP140709-1 */
    8792:	16b7      	call	0x8502 <_ADC_StartSoftTrig>
    8794:	5401      	ret

00008796 <_MeasurePhaseVoltage>:
 * MeasurePhaseVoltage()
 *
 * Measure Phase voltage (single-shot, software triggered)
 * ****************************************************************************	*/
void MeasurePhaseVoltage( uint16 u16AdcSbase)									/* MMP130919-1 - Begin */
{
    8796:	5803      	inc	S, #4
    8798:	5201      	mov	[S-2], A
	uint16 u16PhaseVoltage;
	ADC_Stop();
    879a:	16cc      	call	0x8534 <_ADC_Stop>
	ADC_SBASE = (uint16) u16AdcSbase;											/* switch ADC input source to Motor-driver current */
    879c:	7201      	lod	A, [S-2]
    879e:	5292      	mov	io:0x12 <__dp_noinit_size+0x2>, A
	ADC_DBASE = (uint16) &u16PhaseVoltage;
    87a0:	72ef      	lod	A, S
    87a2:	a0fc      	add	A, #-4
    87a4:	5294      	mov	io:0x14 <__dp_noinit_size+0x4>, A
	ADC_StartSoftTrig();														/* MMP140709-1 */
    87a6:	16ad      	call	0x8502 <_ADC_StartSoftTrig>
    return result;
} /* End of divI16_I32byI16() */

static __inline__ int16 mulI16_I16byI16RndDiv64(int16 a, int16 b) __attribute__ ((always_inline));
static __inline__ int16 mulI16_I16byI16RndDiv64(int16 a, int16 b)
{
    87a8:	72d8 11cc 	lod	A, 0x11cc <__ep__+0x1cc>
    87ac:	5ce2      	ssex	A
    87ae:	7a03      	lod	Y, [S-4]
    87b0:	eae2      	sub	Y, A
    87b2:	72d8 11cc 	lod	A, 0x11cc <__ep__+0x1cc>
    87b6:	6000      	lod	AL, #0
    87b8:	72e4      	swap	A
    int16 result;
    int16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    87ba:	4831      	muls	YA, A, Y
    87bc:	48b5      	asr	YA, #6
    87be:	b000      	adc	A, #0
    return result;
} /* End of divI16_I32byI16() */

static __inline__ int16 mulI16_I16byI16RndDiv64(int16 a, int16 b) __attribute__ ((always_inline));
static __inline__ int16 mulI16_I16byI16RndDiv64(int16 a, int16 b)
{
    87c0:	52d8 0114 	mov	0x114 <_g_i16PhaseVoltage>, A
    87c4:	5405      	ret	#6

000087c6 <_HandleDiagnosticEvent>:
 * HandleDiagnosticEvent()
 *
 * Handle Diagnostic Events
 * ****************************************************************************	*/
void HandleDiagnosticEvent( uint16 u16Event)
{
    87c6:	5803      	inc	S, #4
    87c8:	5203      	mov	[S-4], A
	if ( u16Event & (XI4_OC_DRV | XI4_OVT) )
    87ca:	b6da 8100 	and	A, #33024
    87ce:	1d01      	jne	0x87d2 <_HandleDiagnosticEvent+0xc>
    87d0:	0045      	jmp	0x885c <_HandleDiagnosticEvent+0x96>
	{
		/* In case over-current or over-temperature, switch off motor */
#if _SUPPORT_DIAG_OC
		if ( u16Event & XI4_OC_DRV )
    87d2:	7203      	lod	A, [S-4]
    87d4:	b6da 0100 	and	A, #256
    87d8:	191c      	je	0x8812 <_HandleDiagnosticEvent+0x4c>
			/* Chip over-current */
			/* The over-current may occur then chips has entered test-mode. The test-mode freezes the
			 * complete digital part of the chip, including the Motor PWM and driver. This may result
			 * in a phase H and a phase L, having a DC-current flow!!
			 */
			if ( (g_e8MotorStatusMode == (uint8) C_MOTOR_STATUS_RUNNING) || (g_u8MotorHoldingCurrState != FALSE) )
    87da:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    87dc:	8c01      	cmp	AL, #1
    87de:	1903      	je	0x87e6 <_HandleDiagnosticEvent+0x20>
    87e0:	62d8 013e 	lod	AL, 0x13e <_g_u8MotorHoldingCurrState>
    87e4:	190c      	je	0x87fe <_HandleDiagnosticEvent+0x38>
    87e6:	7eda 008b 	lod	X, #139
    87ea:	0000      	nop
    87ec:	1bfe      	djnz	X, 0x87ea <_HandleDiagnosticEvent+0x24>
			{
				/* Average between two driver-current measurements */
				NopDelay( DELAY_mPWM); /*lint !e522 */							/* Wait for ESD pulse to be gone and a new ADC measurement have been take place */
				g_i16Current = GetMotorDriverCurrent();
    87ee:	17a5      	call	0x873a <_GetMotorDriverCurrent>
    87f0:	52d8 0112 	mov	0x112 <_g_i16Current>, A
				if ( g_i16Current > 1400 )
    87f4:	72d8 0112 	lod	A, 0x112 <_g_i16Current>
    87f8:	aeda 0578 	cmp	A, #1400
    87fc:	1b0a      	jsle	0x8812 <_HandleDiagnosticEvent+0x4c>
				}
			}
			else
			{
				//g_e8ErrorElectric = (uint8) C_ERR_ELECTRIC_YES;
				g_e8ErrorElectric = (uint8) C_ERR_ELECTRIC_PERM;// Ban, stop the motor in case of coil short
    87fe:	6002      	lod	AL, #2
    8800:	412d      	mov	dp:0x2d <_g_e8ErrorElectric>, AL
				MotorDriverStop( (uint16) C_STOP_EMERGENCY);					/* Over-current */
    8802:	7002      	lod	A, #2
    8804:	82db 9246 	callf	0x9246 <_MotorDriverStop>
				//g_u16TargetPosition = g_u16ActualPosition;						/* 9.5.3.3 */
				SetLastError( (uint8) C_ERR_DIAG_OVER_CURRENT);
    8808:	72da 00d0 	lod	A, #208
    880c:	10f4      	call	0x89f6 <_SetLastError>
				g_e8ErrorCoil = (uint8) C_ERR_SELFTEST_B;
    880e:	60eb      	lod	AL, #-21
    8810:	412c      	mov	dp:0x2c <_g_e8ErrorCoil>, AL
			}
		}
#endif /* _SUPPORT_DIAG_OC */
		if ( u16Event & XI4_OVT )
    8812:	7203      	lod	A, [S-4]
    8814:	ac00      	cmp	A, #0
    8816:	1ea2      	jsge	0x885c <_HandleDiagnosticEvent+0x96>
		{
			/* Chip over-temperature */
			if ( (g_e8MotorStatusMode == (uint8) C_MOTOR_STATUS_RUNNING) || (g_u8MotorHoldingCurrState != FALSE) )
    8818:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    881a:	8c01      	cmp	AL, #1
    881c:	1903      	je	0x8824 <_HandleDiagnosticEvent+0x5e>
    881e:	62d8 013e 	lod	AL, 0x13e <_g_u8MotorHoldingCurrState>
    8822:	1906      	je	0x8830 <_HandleDiagnosticEvent+0x6a>
			{
				ResetChipTemperature();
    8824:	1727      	call	0x8674 <_ResetChipTemperature>
    8826:	7eda 008b 	lod	X, #139
    882a:	0000      	nop
    882c:	1bfe      	djnz	X, 0x882a <_HandleDiagnosticEvent+0x64>
    882e:	0001      	jmp	0x8832 <_HandleDiagnosticEvent+0x6c>
				NopDelay( DELAY_mPWM); /*lint !e522 */
				GetChipTemperature( FALSE);										/* MMP131020-1 */
			}
			else
			{
				MeasureVsupplyAndTemperature();
    8830:	1792      	call	0x8756 <_MeasureVsupplyAndTemperature>
				GetChipTemperature( FALSE);										/* MMP131020-1 */
    8832:	7000      	lod	A, #0
    8834:	1724      	call	0x867e <_GetChipTemperature>
			}
			if ( (g_i16ChipTemperature > (int16) C_CHIP_OVERTEMP_LEVEL) && (g_e8ErrorOverTemperature != (uint8) C_ERR_OTEMP_YES))
    8836:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    8838:	aeda 0096 	cmp	A, #150
    883c:	1b0f      	jsle	0x885c <_HandleDiagnosticEvent+0x96>
    883e:	6126      	lod	AL, dp:0x26 <_g_e8ErrorOverTemperature>
    8840:	8c01      	cmp	AL, #1
    8842:	190c      	je	0x885c <_HandleDiagnosticEvent+0x96>
			{
				g_u8OverTemperatureCount++;
    8844:	62d8 010d 	lod	AL, 0x10d <_g_u8OverTemperatureCount>
    8848:	8001      	add	AL, #1
    884a:	42d8 010d 	mov	0x10d <_g_u8OverTemperatureCount>, AL
				if ( g_u8OverTemperatureCount >= (uint8) C_OVERTEMP_TO_PERMDEFECT_THRSHLD )
    884e:	8c03      	cmp	AL, #3
    8850:	1a05      	jule	0x885c <_HandleDiagnosticEvent+0x96>
				{
					g_e8ErrorOverTemperature = (uint8) C_ERR_OTEMP_YES;
    8852:	6001      	lod	AL, #1
    8854:	4126      	mov	dp:0x26 <_g_e8ErrorOverTemperature>, AL
					SetLastError( (uint8) C_ERR_DIAG_OVER_TEMP);
    8856:	72da 00d1 	lod	A, #209
    885a:	10cd      	call	0x89f6 <_SetLastError>
					//g_u8OverTemperatureCount = 0;
				}
			}
		}
	}
	if ( u16Event & (XI4_UV | XI4_OV) )
    885c:	7203      	lod	A, [S-4]
    885e:	b6da 6000 	and	A, #24576
    8862:	1d01      	jne	0x8866 <_HandleDiagnosticEvent+0xa0>
    8864:	0043      	jmp	0x88ec <_HandleDiagnosticEvent+0x126>
	{
		/* Chip under- or over-voltage */
		if ( (g_e8MotorStatusMode == (uint8) C_MOTOR_STATUS_RUNNING) || (g_u8MotorHoldingCurrState != FALSE) )
    8866:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    8868:	8c01      	cmp	AL, #1
    886a:	1903      	je	0x8872 <_HandleDiagnosticEvent+0xac>
    886c:	62d8 013e 	lod	AL, 0x13e <_g_u8MotorHoldingCurrState>
    8870:	1905      	je	0x887c <_HandleDiagnosticEvent+0xb6>
    8872:	7eda 008b 	lod	X, #139
    8876:	0000      	nop
    8878:	1bfe      	djnz	X, 0x8876 <_HandleDiagnosticEvent+0xb0>
    887a:	0001      	jmp	0x887e <_HandleDiagnosticEvent+0xb8>
			NopDelay( DELAY_mPWM); /*lint !e522 */								/* Wait for ESD pulse to be gone and a new ADC measurement have been take place */
			GetVsupply();
		}
		else
		{
			MeasureVsupplyAndTemperature();
    887c:	176c      	call	0x8756 <_MeasureVsupplyAndTemperature>
			GetVsupply();
    887e:	16bf      	call	0x85fe <_GetVsupply>
		}
		{
			uint8 e8DiagVoltage = (uint8) C_ERR_VOLTAGE_IN_RANGE;
			if ( g_i16SupplyVoltage < (int16)((6 + NVRAM_BROWNOUT_LEVEL) * 100) )
    8880:	618a      	lod	AL, dp:0x8a <_g_NvramUser+0x30>
    8882:	44b2      	lsr	A, #2
    8884:	44b2      	lsr	A, #2
    8886:	44b2      	lsr	A, #2
    8888:	b403      	and	A, #3
    888a:	4872 0064 	muls	A, A, #100
    888e:	a2da 0258 	add	A, #600
    8892:	7ad8 0116 	lod	Y, 0x116 <_g_i16SupplyVoltage>
    8896:	eee2      	cmp	Y, A
    8898:	1e85      	jsge	0x88a4 <_HandleDiagnosticEvent+0xde>
			{
				/* Chip under-voltage */
				e8DiagVoltage = (uint8) C_ERR_VOLTAGE_UNDER;
    889a:	7001      	lod	A, #1
    889c:	5201      	mov	[S-2], A
				SetLastError( (uint8) C_ERR_DIAG_UNDER_VOLT);
    889e:	72da 00d2 	lod	A, #210
    88a2:	0009      	jmp	0x88b6 <_HandleDiagnosticEvent+0xf0>
			}
			else if ( g_i16SupplyVoltage > 2800 )
    88a4:	72d8 0116 	lod	A, 0x116 <_g_i16SupplyVoltage>
    88a8:	aeda 0af0 	cmp	A, #2800
    88ac:	1b1f      	jsle	0x88ec <_HandleDiagnosticEvent+0x126>
			{
				/* Chip over-voltage */
				e8DiagVoltage = (uint8) C_ERR_VOLTAGE_OVER;
    88ae:	7002      	lod	A, #2
    88b0:	5201      	mov	[S-2], A
				SetLastError( (uint8) C_ERR_DIAG_OVER_VOLT);
    88b2:	72da 00d3 	lod	A, #211
    88b6:	109f      	call	0x89f6 <_SetLastError>
			}
			if ( e8DiagVoltage != (uint8) C_ERR_VOLTAGE_IN_RANGE)
			{
				g_e8ErrorVoltage = e8DiagVoltage;								/* 9.5.3.4 */
    88b8:	6201      	lod	AL, [S-2]
    88ba:	412b      	mov	dp:0x2b <_g_e8ErrorVoltage>, AL
				g_e8ErrorVoltageComm = g_e8ErrorVoltage;
    88bc:	612b      	lod	AL, dp:0x2b <_g_e8ErrorVoltage>
    88be:	42d8 010b 	mov	0x10b <_g_e8ErrorVoltageComm>, AL
				if ( g_e8MotorRequest != C_MOTOR_REQUEST_NONE )					/* MMP150313-3 - Begin */
    88c2:	612e      	lod	AL, dp:0x2e <_g_e8MotorRequest>
    88c4:	1904      	je	0x88ce <_HandleDiagnosticEvent+0x108>
				{
					g_e8DegradedMotorRequest = g_e8MotorRequest;
    88c6:	4125      	mov	dp:0x25 <_g_e8DegradedMotorRequest>, AL
					g_e8MotorRequest = C_MOTOR_REQUEST_NONE;
    88c8:	6000      	lod	AL, #0
    88ca:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
    88cc:	0009      	jmp	0x88e0 <_HandleDiagnosticEvent+0x11a>
					MotorDriverStop( (uint16) C_STOP_EMERGENCY);				/* Under/Over-voltage */
				}
				else if ( g_e8MotorStatusMode == (uint8) C_MOTOR_STATUS_RUNNING )	/* MMP150313-3 - End */
    88ce:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    88d0:	8c01      	cmp	AL, #1
    88d2:	1d02      	jne	0x88d8 <_HandleDiagnosticEvent+0x112>
				{
					/* Enter degraded-mode; Stop motor and resume when voltage decreases below upper-application threshold or raise above lower-application threshold */
					g_e8DegradedMotorRequest = (uint8) C_MOTOR_REQUEST_START;
    88d4:	6003      	lod	AL, #3
    88d6:	0003      	jmp	0x88de <_HandleDiagnosticEvent+0x118>
					MotorDriverStop( (uint16) C_STOP_EMERGENCY);				/* Under/Over-voltage */
				}
				else if ( g_e8DegradedMotorRequest == (uint8) C_MOTOR_REQUEST_NONE )
    88d8:	6125      	lod	AL, dp:0x25 <_g_e8DegradedMotorRequest>
    88da:	1d05      	jne	0x88e6 <_HandleDiagnosticEvent+0x120>
				{
					g_e8DegradedMotorRequest = (uint8) C_MOTOR_REQUEST_STOP;
    88dc:	6001      	lod	AL, #1
    88de:	4125      	mov	dp:0x25 <_g_e8DegradedMotorRequest>, AL
					MotorDriverStop( (uint16) C_STOP_EMERGENCY);				/* Degraded-mode */
    88e0:	7002      	lod	A, #2
    88e2:	82db 9246 	callf	0x9246 <_MotorDriverStop>
				}
				g_e8MotorStatusMode |= (uint8) C_MOTOR_STATUS_DEGRADED;
    88e6:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    88e8:	8480      	or	AL, #-128
    88ea:	41ed      	mov	dp:0xed <_g_e8MotorStatusMode>, AL
    88ec:	5405      	ret	#6

000088ee <_DiagnosticsInit>:
 * Don't automatically shut-off motor-driver on over- or under-voltage, or over-temperature.
 * Diagnostic ISR priority: 3 
 * ****************************************************************************	*/
void DiagnosticsInit( void)
{
	DRVCFG = (DRVCFG | (DIS_OC | DIS_OT | DIS_OV | DIS_UV));					/* Disable over-current, over-temperature, over-voltage, under-voltage */
    88ee:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    88f2:	a6da f000 	or	A, #61440
    88f6:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A
	ANA_OUTI &= ~SEL_UV_VS;														/* Enable UV & OV debounce circuitry */
    88fa:	72d8 28d0 	lod	A, 0x28d0 <__io__+0xd0>
    88fe:	b6da efff 	and	A, #61439
    8902:	52d8 28d0 	mov	0x28d0 <__io__+0xd0>, A
	ANA_OUTG = (ANA_OUTG & 0xFCFF) | (NVRAM_BROWNOUT_LEVEL << 8);				/* Brown-out UV-level = 6V + n * 1V; */
    8906:	7ad8 28cc 	lod	Y, 0x28cc <__io__+0xcc>
    890a:	f6da fcff 	and	Y, #64767
    890e:	618a      	lod	AL, dp:0x8a <_g_NvramUser+0x30>
    8910:	44a2      	asl	A, #2
    8912:	b6da 0300 	and	A, #768
    8916:	e6e2      	or	Y, A
    8918:	5ad8 28cc 	mov	0x28cc <__io__+0xcc>, Y
	{
		/* IO[0] is low; Set IRQ-event on rising-edge */
		IO_CFG &= ~FRB_IO5;
	}
#else  /* (_SUPPORT_HALL_SENSOR) */
	XI4_PEND = C_DIAG_MASK;
    891c:	72da e100 	lod	A, #57600
    8920:	52d8 203c 	mov	0x203c <__ep__+0x103c>, A
	XI4_MASK |= C_DIAG_MASK;
    8924:	72d8 2032 	lod	A, 0x2032 <__ep__+0x1032>
    8928:	a6da e100 	or	A, #57600
    892c:	52d8 2032 	mov	0x2032 <__ep__+0x1032>, A
#endif /* (_SUPPORT_HALL_SENSOR) */
	/* PRIO = (PRIO & ~(3U << 14)) | ((3U - 3U) << 14); */						/* EXT4_IT Priority: 3 (3..6) */
	PRIO = (PRIO & ~(3U << 14));												/* EXT4_IT Priority: 3 (3..6) */
    8930:	72d8 2004 	lod	A, 0x2004 <__ep__+0x1004>
    8934:	b6da 3fff 	and	A, #16383
    8938:	52d8 2004 	mov	0x2004 <__ep__+0x1004>, A
	PEND = CLR_EXT4_IT;
    893c:	72da 1000 	lod	A, #4096
    8940:	52d8 2008 	mov	0x2008 <__ep__+0x1008>, A
	MASK |= EN_EXT4_IT;															/* Enable Diagnostic Interrupt */
    8944:	72d8 2006 	lod	A, 0x2006 <__ep__+0x1006>
    8948:	a6da 1000 	or	A, #4096
    894c:	52d8 2006 	mov	0x2006 <__ep__+0x1006>, A
	/* MMP141212-1: Check for OVT and OV. Perform Diagnostics handling if required */
	{
#if (_SUPPORT_DIAG_OVT == FALSE)
		uint16 u16DiagnosticEvent = (ANA_INA & XI4_OV);
#else  /* (_SUPPORT_DIAG_OVT == FALSE) */
		uint16 u16DiagnosticEvent = (ANA_INA & (XI4_OVT | XI4_OV));
    8950:	729c      	lod	A, io:0x1c <_g_e8EXVMoveEnableRequestFlag>
    8952:	b6da a000 	and	A, #40960
#endif /* (_SUPPORT_DIAG_OVT == FALSE) */
		if ( u16DiagnosticEvent != 0 )
    8956:	1901      	je	0x895a <_DiagnosticsInit+0x6c>
		{
			HandleDiagnosticEvent( u16DiagnosticEvent);
    8958:	1736      	call	0x87c6 <_HandleDiagnosticEvent>
    895a:	5401      	ret

0000895c <_EXT4_IT>:
 * EXT4_IT()
 *
 * Diagnostic & IO Interrupt Service Routine.
 * ****************************************************************************	*/
__interrupt__ void EXT4_IT(void)
{
    895c:	52df      	push	A
    895e:	5edf      	push	X
    8960:	5adf      	push	Y
    8962:	4c83      	push	D
    8964:	5801      	inc	S, #2
	uint16 u16Pending = (XI4_PEND & XI4_MASK);									/* Copy interrupt requests which are not masked   */
    8966:	7ad8 203c 	lod	Y, 0x203c <__ep__+0x103c>
    896a:	72d8 2032 	lod	A, 0x2032 <__ep__+0x1032>
    896e:	f6e2      	and	Y, A
    8970:	5a01      	mov	[S-2], Y
	do
	{
		XI4_PEND = u16Pending;													/* Clear requests which are going to be processed */
    8972:	7201      	lod	A, [S-2]
    8974:	52d8 203c 	mov	0x203c <__ep__+0x103c>, A
	} while (XI4_PEND & u16Pending);
    8978:	72d8 203c 	lod	A, 0x203c <__ep__+0x103c>
    897c:	b601      	and	A, [S-2]
    897e:	1d79      	jne	0x8972 <_EXT4_IT+0x16>

	/* Multiple diagnostics events is most likely caused by Rinnen/ESD-pulse */
	if ( ((u16Pending & XI4_UV) != 0) && ((u16Pending & (XI4_OC_DRV | XI4_OVT | XI4_OV)) != 0) )
    8980:	7201      	lod	A, [S-2]
    8982:	b6da 4000 	and	A, #16384
    8986:	1904      	je	0x8990 <_EXT4_IT+0x34>
    8988:	7201      	lod	A, [S-2]
    898a:	b6da a100 	and	A, #41216
    898e:	1d17      	jne	0x89be <_EXT4_IT+0x62>
	{
		/* Under-voltage together with any other diagnostic event is strange */
	}
	else
	{
		HandleDiagnosticEvent( u16Pending);
    8990:	7201      	lod	A, [S-2]
    8992:	1719      	call	0x87c6 <_HandleDiagnosticEvent>

		if ( (u16Pending & XI4_IO5) != 0 )
    8994:	7201      	lod	A, [S-2]
    8996:	b420      	and	A, #32
    8998:	1912      	je	0x89be <_EXT4_IT+0x62>
		{
			g_u8HallSwitchState = IO_IN & XI4_IO5;
    899a:	72d8 28ca 	lod	A, 0x28ca <__io__+0xca>
    899e:	9420      	and	AL, #32
    89a0:	42d8 0132 	mov	0x132 <_g_u8HallSwitchState>, AL
			if ( g_u8HallSwitchState )
    89a4:	1904      	je	0x89ae <_EXT4_IT+0x52>
			{
				/* IO[0] is high; Set IRQ-event on falling-edge */
				IO_CFG |= FRB_IO5;
    89a6:	72d8 28be 	lod	A, 0x28be <__io__+0xbe>
    89aa:	a420      	or	A, #32
    89ac:	0003      	jmp	0x89b4 <_EXT4_IT+0x58>
			}
			else
			{
				/* IO[0] is low; Set IRQ-event on rising-edge */
				IO_CFG &= ~FRB_IO5;
    89ae:	72d8 28be 	lod	A, 0x28be <__io__+0xbe>
    89b2:	b4df      	and	A, #-33
    89b4:	52d8 28be 	mov	0x28be <__io__+0xbe>, A
			}
			//g_u16HallMicroStepIdx = g_u16MicroStepIdx;
			g_u16HallMicroStepIdx = g_u16ActuatorActPos;//Ban
    89b8:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    89ba:	52d8 0130 	mov	0x130 <_g_u16HallMicroStepIdx>, A
    89be:	5c01      	dec	S, #2
    89c0:	4cc3      	pop	D
    89c2:	7acf      	pop	Y
    89c4:	7ecf      	pop	X
    89c6:	72cf      	pop	A
    89c8:	4407      	mov	R, #0
    89ca:	72cb      	pop	M
    89cc:	5401      	ret

000089ce <_ErrorLogInit>:
 *
 *	Comments:	Clear Error-FiFo-buffer, in case watchdog reset occurred, 
 *				otherwise leave untouched.
 * ****************************************************************************	*/
void ErrorLogInit( void)
{
    89ce:	5803      	inc	S, #4
	if ( (AWD_CTRL & AWD_RST) != 0 )
    89d0:	729a      	lod	A, io:0x1a <_g_e8WarningOverTemperature>
    89d2:	ac00      	cmp	A, #0
    89d4:	1e8f      	jsge	0x89f4 <_ErrorLogInit+0x26>
	{
		uint16 i;
		for ( i = 0; i < C_ERR_LOG_SZ; i++ )
    89d6:	7000      	lod	A, #0
    89d8:	780a      	lod	Y, #10
    89da:	5a01      	mov	[S-2], Y
		{
			l_au8FiFoErrorLog[i] = C_ERR_NONE;
    89dc:	7ee2      	lod	X, A
    89de:	22da 0262 	add	X, #610
    89e2:	6400      	lod	YL, #0
    89e4:	46f8      	mov	[X], YL
void ErrorLogInit( void)
{
	if ( (AWD_CTRL & AWD_RST) != 0 )
	{
		uint16 i;
		for ( i = 0; i < C_ERR_LOG_SZ; i++ )
    89e6:	a001      	add	A, #1
    89e8:	7e01      	lod	X, [S-2]
    89ea:	20ff      	add	X, #-1
    89ec:	5e01      	mov	[S-2], X
    89ee:	1d76      	jne	0x89dc <_ErrorLogInit+0xe>
		{
			l_au8FiFoErrorLog[i] = C_ERR_NONE;
		}
		l_u8ErrorLogIdx = 0;
    89f0:	46d8 0133 	mov	0x133 <_l_u8ErrorLogIdx>, YL
    89f4:	5405      	ret	#6

000089f6 <_SetLastError>:
 *
 *	Comments:	Save error-code in Error-FiFo-buffer, unless last error is the 
 *				same as error posted.
 * ****************************************************************************	*/
void SetLastError( uint8 u8ErrorCode)
{
    89f6:	5801      	inc	S, #2
    89f8:	7ee2      	lod	X, A
	if ( (l_u8ErrorLogIdx == 0) || (l_au8FiFoErrorLog[l_u8ErrorLogIdx - 1] != u8ErrorCode) )
    89fa:	62d8 0133 	lod	AL, 0x133 <_l_u8ErrorLogIdx>
    89fe:	4201      	mov	[S-2], AL
    8a00:	1908      	je	0x8a12 <_SetLastError+0x1c>
    8a02:	5cf2      	usex	A
    8a04:	7ae2      	lod	Y, A
    8a06:	e2da 0261 	add	Y, #609
    8a0a:	62f0      	lod	AL, [Y]
    8a0c:	7aee      	lod	Y, X
    8a0e:	8ee8      	cmp	AL, YL
    8a10:	1920      	je	0x8a52 <_SetLastError+0x5c>
	{
		/* Don't log the same error over and over again */
		l_au8FiFoErrorLog[l_u8ErrorLogIdx] = u8ErrorCode;
    8a12:	6201      	lod	AL, [S-2]
    8a14:	5cf2      	usex	A
    8a16:	7ae2      	lod	Y, A
    8a18:	e2da 0262 	add	Y, #610
    8a1c:	72ee      	lod	A, X
    8a1e:	42f0      	mov	[Y], AL
		if ( l_u8ErrorLogIdx < (C_ERR_LOG_SZ - 1) )
    8a20:	6201      	lod	AL, [S-2]
    8a22:	8c08      	cmp	AL, #8
    8a24:	1e03      	jug	0x8a2c <_SetLastError+0x36>
		{
			l_u8ErrorLogIdx++;
    8a26:	8001      	add	AL, #1
    8a28:	42d8 0133 	mov	0x133 <_l_u8ErrorLogIdx>, AL
		}

		/* Log serious error-codes also in NVRAM */
		/* Serious errors are:
		  	  Unsupported IRQ's   or C_ERR_INV_MLXPAGE_CRC1..4, CAL_GN or Over-temperature                   or 'Fatal'-errors */
		if ( (u8ErrorCode < 0x20) || ((u8ErrorCode & 0xC8) == 0xC8) || (u8ErrorCode == (uint8) C_ERR_DIAG_OVER_TEMP) || ((u8ErrorCode & 0xF0) == 0xF0) ) /*lint !e845 */
    8a2c:	72ee      	lod	A, X
    8a2e:	8c1f      	cmp	AL, #31
    8a30:	1a0d      	jule	0x8a4c <_SetLastError+0x56>
    8a32:	b6da 00c8 	and	A, #200
    8a36:	aeda 00c8 	cmp	A, #200
    8a3a:	1908      	je	0x8a4c <_SetLastError+0x56>
    8a3c:	72ee      	lod	A, X
    8a3e:	8cd1      	cmp	AL, #-47
    8a40:	1905      	je	0x8a4c <_SetLastError+0x56>
    8a42:	b6da 00f0 	and	A, #240
    8a46:	aeda 00f0 	cmp	A, #240
    8a4a:	1d03      	jne	0x8a52 <_SetLastError+0x5c>
		{
			(void) NVRAM_LogError( u8ErrorCode);
    8a4c:	72ee      	lod	A, X
    8a4e:	82db 9a4a 	callf	0x9a4a <_NVRAM_LogError>
    8a52:	5403      	ret	#4

00008a54 <_GetLastError>:
		}
	}
} /* End of SetLastError() */

uint8 GetLastError( void)
{
    8a54:	5809      	inc	S, #10
	uint8 u8Reply = l_au8FiFoErrorLog[0];
    8a56:	62d8 0262 	lod	AL, 0x262 <_l_au8FiFoErrorLog>
    8a5a:	5cf2      	usex	A
    8a5c:	5209      	mov	[S-10], A
	if ( l_u8ErrorLogIdx != 0 )
    8a5e:	62d8 0133 	lod	AL, 0x133 <_l_u8ErrorLogIdx>
    8a62:	4207      	mov	[S-8], AL
    8a64:	1924      	je	0x8aae <_GetLastError+0x5a>
 */
static INLINE uint16 SYS_getCpuStatus (void)
{
    uint16 status;

    __asm__ __volatile__ (
    8a66:	72e3      	lod	A, M
    8a68:	5203      	mov	[S-4], A
	{
		uint16 i;
		ATOMIC_CODE
    8a6a:	4407      	mov	R, #0
    8a6c:	500c      	call	fp0:0x60
    8a6e:	54f0      	mov	UPr, #0
    8a70:	7001      	lod	A, #1
    8a72:	5205      	mov	[S-6], A
    8a74:	6207      	lod	AL, [S-8]
    8a76:	5cf2      	usex	A
    8a78:	5201      	mov	[S-2], A
    8a7a:	7001      	lod	A, #1
    8a7c:	ae01      	cmp	A, [S-2]
    8a7e:	1c0b      	jnc	0x8a96 <_GetLastError+0x42>
    8a80:	7a05      	lod	Y, [S-6]
    8a82:	e2da 0262 	add	Y, #610
    8a86:	7ee6      	lod	X, Y
    8a88:	20ff      	add	X, #-1
    8a8a:	62f0      	lod	AL, [Y]
    8a8c:	42f8      	mov	[X], AL
    8a8e:	7205      	lod	A, [S-6]
    8a90:	a001      	add	A, #1
    8a92:	5205      	mov	[S-6], A
    8a94:	07f3      	jmp	0x8a7c <_GetLastError+0x28>
    8a96:	6207      	lod	AL, [S-8]
    8a98:	80ff      	add	AL, #-1
    8a9a:	42d8 0133 	mov	0x133 <_l_u8ErrorLogIdx>, AL
    8a9e:	5cf2      	usex	A
    8aa0:	7ae2      	lod	Y, A
    8aa2:	e2da 0262 	add	Y, #610
    8aa6:	6000      	lod	AL, #0
    8aa8:	42f0      	mov	[Y], AL
/*
 * Set M register value
 */
static INLINE void SYS_setCpuStatus (uint16 status)
{
    __asm__ __volatile__ (
    8aaa:	7203      	lod	A, [S-4]
    8aac:	52e3      	mov	M, A
			l_u8ErrorLogIdx--;
			l_au8FiFoErrorLog[l_u8ErrorLogIdx] = C_ERR_NONE;
		);
	}
	return ( u8Reply );
} /* End of GetLastError() */
    8aae:	7209      	lod	A, [S-10]
    8ab0:	540b      	ret	#12

00008ab2 <_MotorDriverInit>:
 * MotorDriverInit()
 *
 * Initialise Motor Driver
 * ****************************************************************************	*/
void MotorDriverInit( void)
{
    8ab2:	5835      	inc	S, #54
#if _SUPPORT_DOUBLE_USTEP
	uint16 u16MotorMicroStepsPerFullStep = (1 << (NVRAM_MICRO_STEPS + 1));		/* Number of micro-steps per full-step (2, 4, 8 or 16) */
    8ab4:	618e      	lod	AL, dp:0x8e <_g_NvramUser+0x34>
    8ab6:	4233      	mov	[S-52], AL
    8ab8:	44b0      	lsr	AL, #2
    8aba:	44b0      	lsr	AL, #2
    8abc:	4430      	lsr	AL
    8abe:	b403      	and	A, #3
    8ac0:	a001      	add	A, #1
    8ac2:	44e2      	sfb	A
    8ac4:	5235      	mov	[S-54], A
    8ac6:	6233      	lod	AL, [S-52]
    8ac8:	4440      	rl	AL
    8aca:	9401      	and	AL, #1
    8acc:	5cf2      	usex	A
    8ace:	7ae2      	lod	Y, A
    8ad0:	e002      	add	Y, #2
    8ad2:	4426      	asl	Y
    uint32 result;

    __asm__ __volatile__ (
    8ad4:	7235      	lod	A, [S-54]
    8ad6:	4801      	mulu	D, A, Y
    8ad8:	72ef      	lod	A, S
    8ada:	a0ce      	add	A, #-50
    8adc:	4cf3      	swap	YA
    8ade:	4c85      	mov	[Y], D
 *
 * Example:
 *   uint32 result = ((uint32) a) * b
 */
static __inline__ uint32 mulU32_U16byU16(uint16 a, uint16 b)
{
    8ae0:	7a31      	lod	Y, [S-50]
    8ae2:	5ad8 026e 	mov	0x26e <_g_u16MotorMicroStepsPerElecRotation>, Y
    8ae6:	618d      	lod	AL, dp:0x8d <_g_NvramUser+0x33>
    8ae8:	44b2      	lsr	A, #2
    8aea:	44b2      	lsr	A, #2
    8aec:	b40f      	and	A, #15
    8aee:	a001      	add	A, #1
    uint32 result;

    __asm__ __volatile__ (
    8af0:	4801      	mulu	D, A, Y
    8af2:	7aef      	lod	Y, S
    8af4:	e0d2      	add	Y, #-46
    8af6:	4c85      	mov	[Y], D
 *
 * Example:
 *   uint32 result = ((uint32) a) * b
 */
static __inline__ uint32 mulU32_U16byU16(uint16 a, uint16 b)
{
    8af8:	7e2d      	lod	X, [S-46]
    8afa:	5ed8 0270 	mov	0x270 <_g_u16MotorMicroStepsPerMechRotation>, X
	uint16 u16MotorMicroStepsPerFullStep = (1 << NVRAM_MICRO_STEPS);			/* Number of micro-steps per full-step (1, 2, 4 or 8) */
#endif /* _SUPPORT_DOUBLE_USTEP */
	g_u16MotorMicroStepsPerElecRotation = (uint16) mulU32_U16byU16( u16MotorMicroStepsPerFullStep, (NVRAM_MOTOR_PHASES + 2) << 1);
	g_u16MotorMicroStepsPerMechRotation = (uint16) mulU32_U16byU16( NVRAM_POLE_PAIRS, g_u16MotorMicroStepsPerElecRotation);
	{
		uint16 u16ConstAccelaration = NVRAM_ACCELERATION_CONST;
    8afe:	71a2      	lod	A, dp:0xa2 <_g_NvramUser+0x48>
		if ( u16ConstAccelaration != 0 )
    8b00:	1d01      	jne	0x8b04 <_MotorDriverInit+0x52>
    8b02:	0085      	jmp	0x8c0e <_MotorDriverInit+0x15c>
		{
			l_u32Temp = divU32_U32byU16( (TIMER_CLOCK * 60), g_u16MotorMicroStepsPerMechRotation);
    8b04:	722d      	lod	A, [S-46]
    8b06:	52df      	push	A
    8b08:	4ce2 2c40 	mov	YA, #105000000
    8b0c:	0642 
    8b0e:	82db 6c3a 	callf	0x6c3a <_divU32_U32byU16>
    8b12:	4cc0      	mov	D, YA
    8b14:	52d8 0318 	mov	0x318 <_l_u32Temp>, A
    8b18:	5ad8 031a 	mov	0x31a <_l_u32Temp+0x2>, Y
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    8b1c:	5c01      	dec	S, #2
    8b1e:	79a0      	lod	Y, dp:0xa0 <_g_NvramUser+0x46>
    8b20:	5a29      	mov	[S-42], Y
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    8b22:	4c80      	mov	YA, D
    8b24:	7e29      	lod	X, [S-42]
    8b26:	4c63      	divu	YA, X
    8b28:	4c63      	divu	YA, X
    8b2a:	5207      	mov	[S-8], A
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    8b2c:	a0ff      	add	A, #-1
    8b2e:	52d8 0282 	mov	0x282 <_g_au16MotorSpeedCommutTimerPeriod+0xe>, A
    8b32:	52d8 0274 	mov	0x274 <_g_au16MotorSpeedCommutTimerPeriod>, A
    8b36:	79c4      	lod	Y, dp:0xc4 <__bss_dp_size+0x14>
    8b38:	5a25      	mov	[S-38], Y
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    8b3a:	4c80      	mov	YA, D
    8b3c:	7e25      	lod	X, [S-38]
    8b3e:	4c63      	divu	YA, X
    8b40:	4c63      	divu	YA, X
    8b42:	5223      	mov	[S-36], A
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    8b44:	a0ff      	add	A, #-1
    8b46:	52d8 0280 	mov	0x280 <_g_au16MotorSpeedCommutTimerPeriod+0xc>, A
    8b4a:	52d8 0276 	mov	0x276 <_g_au16MotorSpeedCommutTimerPeriod+0x2>, A
    8b4e:	7990      	lod	Y, dp:0x90 <_g_NvramUser+0x36>
    8b50:	5a1f      	mov	[S-32], Y
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    8b52:	4c80      	mov	YA, D
    8b54:	7e1f      	lod	X, [S-32]
    8b56:	4c63      	divu	YA, X
    8b58:	4c63      	divu	YA, X
    8b5a:	521d      	mov	[S-30], A
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    8b5c:	a0ff      	add	A, #-1
    8b5e:	5152      	mov	dp:0x52 <_g_u16CommutTimerPeriod>, A
    8b60:	52d8 0278 	mov	0x278 <_g_au16MotorSpeedCommutTimerPeriod+0x4>, A
    8b64:	7992      	lod	Y, dp:0x92 <_g_NvramUser+0x38>
    8b66:	5a19      	mov	[S-26], Y
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    8b68:	4c80      	mov	YA, D
    8b6a:	7e19      	lod	X, [S-26]
    8b6c:	4c63      	divu	YA, X
    8b6e:	4c63      	divu	YA, X
    8b70:	5217      	mov	[S-24], A
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    8b72:	a0ff      	add	A, #-1
    8b74:	52d8 027a 	mov	0x27a <_g_au16MotorSpeedCommutTimerPeriod+0x6>, A
    8b78:	7994      	lod	Y, dp:0x94 <_g_NvramUser+0x3a>
    8b7a:	5a13      	mov	[S-20], Y
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    8b7c:	4c80      	mov	YA, D
    8b7e:	7e13      	lod	X, [S-20]
    8b80:	4c63      	divu	YA, X
    8b82:	4c63      	divu	YA, X
    8b84:	5211      	mov	[S-18], A
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    8b86:	a0ff      	add	A, #-1
    8b88:	52d8 027c 	mov	0x27c <_g_au16MotorSpeedCommutTimerPeriod+0x8>, A
    8b8c:	7996      	lod	Y, dp:0x96 <_g_NvramUser+0x3c>
    8b8e:	5a0d      	mov	[S-14], Y
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    8b90:	4c80      	mov	YA, D
    8b92:	7e0d      	lod	X, [S-14]
    8b94:	4c63      	divu	YA, X
    8b96:	4c63      	divu	YA, X
    8b98:	5205      	mov	[S-6], A
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    8b9a:	a0ff      	add	A, #-1
    8b9c:	52d8 027e 	mov	0x27e <_g_au16MotorSpeedCommutTimerPeriod+0xa>, A
			g_au16MotorSpeedCommutTimerPeriod[3] = divU16_U32byU16( l_u32Temp, NVRAM_SPEED1) - 1;
			g_au16MotorSpeedCommutTimerPeriod[4] = divU16_U32byU16( l_u32Temp, NVRAM_SPEED2) - 1;
			g_au16MotorSpeedCommutTimerPeriod[5] = divU16_U32byU16( l_u32Temp, NVRAM_SPEED3) - 1;
			g_au16MotorSpeedCommutTimerPeriod[6] = g_au16MotorSpeedCommutTimerPeriod[1];
			g_au16MotorSpeedCommutTimerPeriod[7] = g_au16MotorSpeedCommutTimerPeriod[0];
			g_u16TargetCommutTimerPeriod = g_au16MotorSpeedCommutTimerPeriod[2];	/* Target commutation timer period (target speed) */
    8ba0:	7952      	lod	Y, dp:0x52 <_g_u16CommutTimerPeriod>
    8ba2:	5954      	mov	dp:0x54 <_g_u16TargetCommutTimerPeriod>, Y
    8ba4:	7229      	lod	A, [S-42]
    8ba6:	a01e      	add	A, #30
    8ba8:	4cc8      	movu	D, A
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    8baa:	4c80      	mov	YA, D
    8bac:	7c3c      	lod	X, #60
    8bae:	4c63      	divu	YA, X
    8bb0:	4c63      	divu	YA, X
    8bb2:	520b      	mov	[S-12], A
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    8bb4:	52d8 0284 	mov	0x284 <_g_au16MotorSpeedRPS>, A
    8bb8:	7225      	lod	A, [S-38]
    8bba:	a01e      	add	A, #30
    8bbc:	4cc8      	movu	D, A
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    8bbe:	4c80      	mov	YA, D
    8bc0:	4c63      	divu	YA, X
    8bc2:	4c63      	divu	YA, X
    8bc4:	5209      	mov	[S-10], A
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    8bc6:	52d8 0286 	mov	0x286 <_g_au16MotorSpeedRPS+0x2>, A
    8bca:	721f      	lod	A, [S-32]
    8bcc:	a01e      	add	A, #30
    8bce:	4cf2      	usex	YA
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    8bd0:	4c63      	divu	YA, X
    8bd2:	4c63      	divu	YA, X
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    8bd4:	52d8 0288 	mov	0x288 <_g_au16MotorSpeedRPS+0x4>, A
    8bd8:	7219      	lod	A, [S-26]
    8bda:	a01e      	add	A, #30
    8bdc:	4cf2      	usex	YA
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    8bde:	4c63      	divu	YA, X
    8be0:	4c63      	divu	YA, X
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    8be2:	52d8 028a 	mov	0x28a <_g_au16MotorSpeedRPS+0x6>, A
    8be6:	7213      	lod	A, [S-20]
    8be8:	a01e      	add	A, #30
    8bea:	4cf2      	usex	YA
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    8bec:	4c63      	divu	YA, X
    8bee:	4c63      	divu	YA, X
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    8bf0:	52d8 028c 	mov	0x28c <_g_au16MotorSpeedRPS+0x8>, A
    8bf4:	720d      	lod	A, [S-14]
    8bf6:	a01e      	add	A, #30
    8bf8:	4cf2      	usex	YA
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    8bfa:	4c63      	divu	YA, X
    8bfc:	4c63      	divu	YA, X
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    8bfe:	52d8 028e 	mov	0x28e <_g_au16MotorSpeedRPS+0xa>, A
			g_au16MotorSpeedRPS[1] = divU16_U32byU16( (uint32)(uint16)(NVRAM_SPEED_TORQUE_BOOST + 30U), 60);
			g_au16MotorSpeedRPS[2] = divU16_U32byU16( (uint32)(uint16)(NVRAM_SPEED0 + 30U), 60);
			g_au16MotorSpeedRPS[3] = divU16_U32byU16( (uint32)(uint16)(NVRAM_SPEED1 + 30U), 60);
			g_au16MotorSpeedRPS[4] = divU16_U32byU16( (uint32)(uint16)(NVRAM_SPEED2 + 30U), 60);
			g_au16MotorSpeedRPS[5] = divU16_U32byU16( (uint32)(uint16)(NVRAM_SPEED3 + 30U), 60);
			g_au16MotorSpeedRPS[6] = g_au16MotorSpeedRPS[1];
    8c02:	7a09      	lod	Y, [S-10]
    8c04:	5ad8 0290 	mov	0x290 <_g_au16MotorSpeedRPS+0xc>, Y
			g_au16MotorSpeedRPS[7] = g_au16MotorSpeedRPS[0];
    8c08:	7e0b      	lod	X, [S-12]
    8c0a:	5ed8 0292 	mov	0x292 <_g_au16MotorSpeedRPS+0xe>, X
		}
	}

	g_u16CorrectionRatio = NVRAM_MIN_CORR_RATIO;
    8c0e:	61be      	lod	AL, dp:0xbe <__bss_dp_size+0xe>
    8c10:	5cf2      	usex	A
    8c12:	4832 0576 	muls	YA, A, #1398
    8c16:	48a3      	lsr	YA, #4
    8c18:	514e      	mov	dp:0x4e <_g_u16CorrectionRatio>, A
	/* BLDC motor Commutation/Stepper timer */
	g_u16MicroStepIdx = 0;
    8c1a:	7000      	lod	A, #0
    8c1c:	5150      	mov	dp:0x50 <_g_u16MicroStepIdx>, A
	TMR1_CTRL = C_TMRx_CTRL_MODE0;												/* Timer mode 0 */
    8c1e:	7ada 4001 	lod	Y, #16385
    8c22:	5aaa      	mov	io:0x2a <_g_e8MotorDirectionCCW>, Y
	TMR1_REGB = g_u16CommutTimerPeriod;											/* Will be overwritten by MotorDriverStart() */
    8c24:	7152      	lod	A, dp:0x52 <_g_u16CommutTimerPeriod>
    8c26:	52ac      	mov	io:0x2c <_g_e8ErrorCoil>, A
	XI0_PEND = CLR_T1_INT4;														/* Clear (potentially) Timer1 second level interrupts (T1_INT4) */
    8c28:	7c40      	lod	X, #64
    8c2a:	5ed8 2034 	mov	0x2034 <__ep__+0x1034>, X
	XI0_MASK |= EN_T1_INT4;														/* Enable Timer1, CompareB (T1_INT4) */
    8c2e:	72d8 202a 	lod	A, 0x202a <__ep__+0x102a>
    8c32:	a440      	or	A, #64
    8c34:	52d8 202a 	mov	0x202a <__ep__+0x102a>, A
	PRIO = (PRIO & ~(3 << 6)) | ((4 - 3) << 6);									/* Set Timer1 priority to 4 (3..6) */
    8c38:	72d8 2004 	lod	A, 0x2004 <__ep__+0x1004>
    8c3c:	b6da ff3f 	and	A, #65343
    8c40:	a440      	or	A, #64
    8c42:	52d8 2004 	mov	0x2004 <__ep__+0x1004>, A
	PEND = CLR_EXT0_IT;
    8c46:	72da 0100 	lod	A, #256
    8c4a:	52d8 2008 	mov	0x2008 <__ep__+0x1008>, A
	MASK |= EN_EXT0_IT;
    8c4e:	72d8 2006 	lod	A, 0x2006 <__ep__+0x1006>
    8c52:	a6da 0100 	or	A, #256
    8c56:	52d8 2006 	mov	0x2006 <__ep__+0x1006>, A
 *
 * Example:
 *   uint32 result = ((uint32) a) * b
 */
static __inline__ uint32 mulU32_U16byU16(uint16 a, uint16 b)
{
    8c5a:	61c2      	lod	AL, dp:0xc2 <__bss_dp_size+0x12>
    8c5c:	5cf2      	usex	A
    uint32 result;

    __asm__ __volatile__ (
    8c5e:	7a35      	lod	Y, [S-54]
    8c60:	4801      	mulu	D, A, Y
    8c62:	7aef      	lod	Y, S
    8c64:	e0fa      	add	Y, #-6
    8c66:	4c85      	mov	[Y], D
 *
 * Example:
 *   uint32 result = ((uint32) a) * b
 */
static __inline__ uint32 mulU32_U16byU16(uint16 a, uint16 b)
{
    8c68:	7e05      	lod	X, [S-6]
    8c6a:	5ed8 0272 	mov	0x272 <_g_u16MotorRewindSteps>, X

	g_u16MotorRewindSteps = (uint16) mulU32_U16byU16( NVRAM_REWIND_STEPS, u16MotorMicroStepsPerFullStep);

	/* Setup Motor PWM */	
	PWM1_CTRL = 0;																/* Disable master */
    8c6e:	6000      	lod	AL, #0
    8c70:	42d8 284a 	mov	0x284a <__io__+0x4a>, AL
	PWM2_CTRL = 0;																/* Disable Slave 1 */
    8c74:	42d8 2854 	mov	0x2854 <__io__+0x54>, AL
	PWM3_CTRL = 0;																/* Disable Slave 2 */
    8c78:	42d8 285e 	mov	0x285e <__io__+0x5e>, AL
	PWM4_CTRL = 0;																/* Disable Slave 3 */
    8c7c:	42d8 2868 	mov	0x2868 <__io__+0x68>, AL
	PWM5_CTRL = 0;																/* Disable Slave 4 */
    8c80:	42d8 2872 	mov	0x2872 <__io__+0x72>, AL
	PWM1_PSCL = PWM_PRESCALER;													/* Initialise the master pre-scaler ratio (Fck/8) */
    8c84:	42d8 284b 	mov	0x284b <__io__+0x4b>, AL
	PWM1_PER = PWM_REG_PERIOD;
    8c88:	7ada 0576 	lod	Y, #1398
    8c8c:	5ad8 284c 	mov	0x284c <__io__+0x4c>, Y
	PWM2_PER = PWM_REG_PERIOD;													/* -=#=- Probably not needed to set slave period too */
    8c90:	5ad8 2856 	mov	0x2856 <__io__+0x56>, Y
	PWM3_PER = PWM_REG_PERIOD;													/* -=#=- Probably not needed to set slave period too */
    8c94:	5ad8 2860 	mov	0x2860 <__io__+0x60>, Y
	PWM4_PER = PWM_REG_PERIOD;													/* -=#=- Probably not needed to set slave period too */
    8c98:	5ad8 286a 	mov	0x286a <__io__+0x6a>, Y
	PWM5_PER = PWM_REG_PERIOD;													/* -=#=- Probably not needed to set slave period too */
    8c9c:	5ad8 2874 	mov	0x2874 <__io__+0x74>, Y
	PWM5_CMP = (((83L * PWM_REG_PERIOD) + 50)/100);		/*  7.0us */			/* 83% of period */
#else  /* _SUPPORT_PHASE_SHORT_DET */
	/* (Single PWM)	17%			33%			50%			75%			100%		(7.0us/ADC-conversion)
	 * MF_STEPPER:	Temperature	Vs-filt		Imotor1		Vsm-unfilt	Imotor2
	 */
	PWM1_CMP = (((17L * PWM_REG_PERIOD) + 50)/100);		/*  7.0us */			/* 17% of period */
    8ca0:	7eda 00ee 	lod	X, #238
    8ca4:	5ed8 2852 	mov	0x2852 <__io__+0x52>, X
	PWM2_CMP = (((33L * PWM_REG_PERIOD) + 50)/100);		/*  7.0us */			/* 33% of period */
    8ca8:	72da 01cd 	lod	A, #461
    8cac:	52d8 285c 	mov	0x285c <__io__+0x5c>, A
	PWM3_CMP = (((50L * PWM_REG_PERIOD) + 50)/100);		/*  10.5us */			/* 50% of period */
    8cb0:	7ada 02bb 	lod	Y, #699
    8cb4:	5ad8 2866 	mov	0x2866 <__io__+0x66>, Y
	PWM4_CMP = (((75L * PWM_REG_PERIOD) + 50)/100);		/*  10.5us */			/* 75% of period */
    8cb8:	7eda 0419 	lod	X, #1049
    8cbc:	5ed8 2870 	mov	0x2870 <__io__+0x70>, X
	PWM3_CTRL = (MODE | ECI | EXT | EBLK);										/* initialise the slave 2 control register - CMPI enabled */
	PWM4_CTRL = (MODE | ECI | EXT | EBLK);										/* initialise the slave 3 control register - CMPI enabled */
	PWM5_CTRL = (MODE | EXT | EBLK);											/* Initialise the slave 4 control register - CMPI disabled */
#else  /* (_SUPPORT_PWM_MODE != BIPOLAR_PWM_SINGLE_INDEPENDED_VSM) && (_SUPPORT_PWM_MODE != BIPOLAR_PWM_SINGLE_INDEPENDED_GND) */
	/* In-depended mode */
	PWM1_CTRL = (EBLK | ECI | EPI);												/* Initialise the master control register - CMPI and PWMI enabled */
    8cc0:	6019      	lod	AL, #25
    8cc2:	42d8 284a 	mov	0x284a <__io__+0x4a>, AL
	PWM2_CTRL = (ECI | EXT | EBLK);												/* Initialise the slave 1 control register - CMPI enabled */
    8cc6:	6013      	lod	AL, #19
    8cc8:	42d8 2854 	mov	0x2854 <__io__+0x54>, AL
	PWM3_CTRL = (ECI | EXT | EBLK);												/* Initialise the slave 2 control register - CMPI enabled */
    8ccc:	42d8 285e 	mov	0x285e <__io__+0x5e>, AL
	PWM4_CTRL = (ECI | EXT | EBLK);												/* Initialise the slave 3 control register - CMPI enabled */
    8cd0:	42d8 2868 	mov	0x2868 <__io__+0x68>, AL
	PWM5_CTRL = (ECI | EXT | EBLK);												/* Initialise the slave 4 control register - CMPI enabled */
    8cd4:	42d8 2872 	mov	0x2872 <__io__+0x72>, AL
#endif /* (_SUPPORT_PWM_MODE != BIPOLAR_PWM_SINGLE_INDEPENDED_VSM) && (_SUPPORT_PWM_MODE != BIPOLAR_PWM_SINGLE_INDEPENDED_GND) */
	PWM1_CTRL |= EBLK;															/* Start PWM in application mode */
    8cd8:	62d8 284a 	lod	AL, 0x284a <__io__+0x4a>
    8cdc:	8401      	or	AL, #1
    8cde:	42d8 284a 	mov	0x284a <__io__+0x4a>, AL
    8ce2:	5437      	ret	#56

00008ce4 <_MotorDriverSelfTest>:
 * 3. Test Open connection with motor-phase
 * 4. Test BEMF Voltage levels
 * ****************************************************************************	*/
#define FET_SETTING (((10*PLL_freq)/(1000000*CYCLES_PER_INSTR*2)) + 1)			/* 10us: 10us*PLL-freq/(10000000us/s * #cycles/instruction) * instructions */
void MotorDriverSelfTest( void)
{
    8ce4:	5823      	inc	S, #36
	uint16 u16SelfTestIdx;
	uint16 u16VdsThreshold;														/* MMP130919-1/MMP140403-1 */
	T_ADC_SELFTEST_4PH adcMotorSelfTest4Ph;
	uint16 u16Pwm2Storage = PWM2_CMP;											/* MMP150219-2: Save PWM2 ADC trigger CMP time */
    8ce6:	72d8 285c 	lod	A, 0x285c <__io__+0x5c>
    8cea:	5209      	mov	[S-10], A
	PWM2_CMP = (((50L * PWM_REG_PERIOD) + 50)/100);								/* MMP150219-2: Set PWM2 ADC trigger CMP time at 50% or period */
    8cec:	7eda 02bb 	lod	X, #699
    8cf0:	5ed8 285c 	mov	0x285c <__io__+0x5c>, X

	g_e8ErrorCoil = 0;//init
    8cf4:	6000      	lod	AL, #0
    8cf6:	412c      	mov	dp:0x2c <_g_e8ErrorCoil>, AL

	MeasureVsupplyAndTemperature();												/* MMP130919-1 - Begin */
    8cf8:	152e      	call	0x8756 <_MeasureVsupplyAndTemperature>
	GetVsupplyMotor();
    8cfa:	149f      	call	0x863a <_GetVsupplyMotor>
	if ( NVRAM_VDS_THRESHOLD != 0 )
    8cfc:	61c9      	lod	AL, dp:0xc9 <__bss_dp_size+0x19>
    8cfe:	b43f      	and	A, #63
    8d00:	4872 0019 	muls	A, A, #25
    8d04:	4432      	lsr	A
    8d06:	1910      	je	0x8d28 <_MotorDriverSelfTest+0x44>
    8d08:	0011      	jmp	0x8d2c <_MotorDriverSelfTest+0x48>
		DRVCFG_GND_UVWT();

		if ( g_e8ErrorElectric != (uint8) C_ERR_ELECTRIC_NO )					/* Over-current ? */
		{
			/* Over-current trigger; Phase makes short with other phase */
			g_e8ErrorElectric = (uint8) C_ERR_ELECTRIC_PERM;
    8d0a:	6002      	lod	AL, #2
    8d0c:	412d      	mov	dp:0x2d <_g_e8ErrorElectric>, AL
			SetLastError( C_ERR_SELFTEST_B);
    8d0e:	72da 00eb 	lod	A, #235
    8d12:	1671      	call	0x89f6 <_SetLastError>
			g_e8ErrorCoil = (uint8) C_ERR_SELFTEST_B;//Ban, phase shot with other phase
    8d14:	60eb      	lod	AL, #-21
    8d16:	0006      	jmp	0x8d24 <_MotorDriverSelfTest+0x40>
#endif // _SUPPORT_COIL_RESISTANCE_CHECK
		extern uint16 l_u16CurrentZeroOffset;
		if ( (int16) (u16MotorCoilCurrent - l_u16CurrentZeroOffset) < C_MIN_COIL_CURRENT )
		{
			/* No current (less than 10 LSB's); Coil Open */
			g_e8ErrorElectric = (uint8) C_ERR_ELECTRIC_PERM;
    8d18:	6002      	lod	AL, #2
    8d1a:	412d      	mov	dp:0x2d <_g_e8ErrorElectric>, AL
			SetLastError( C_ERR_SELFTEST_C);
    8d1c:	72da 00ec 	lod	A, #236
    8d20:	166a      	call	0x89f6 <_SetLastError>
			g_e8ErrorCoil = (uint8) C_ERR_SELFTEST_C;
    8d22:	60ec      	lod	AL, #-20
    8d24:	412c      	mov	dp:0x2c <_g_e8ErrorCoil>, AL
			break;
    8d26:	00b7      	jmp	0x8e96 <_MotorDriverSelfTest+0x1b2>
	{
		u16VdsThreshold = NVRAM_VDS_THRESHOLD;
	}
	else
	{
		u16VdsThreshold = 200U;
    8d28:	72da 00c8 	lod	A, #200
    8d2c:	520b      	mov	[S-12], A
	}																			/* MMP130919-1 - End */

	/* Test for FET shortages; Note: Diagnostics configuration will switch off driver at over-current */
	for ( u16SelfTestIdx = 0; (g_e8ErrorElectric == (uint8) C_ERR_ELECTRIC_NO) && (u16SelfTestIdx < (sizeof(c_au8DrvCfgSelfTestA)/sizeof(c_au8DrvCfgSelfTestA[0]))); u16SelfTestIdx++ )
    8d2e:	7000      	lod	A, #0
    8d30:	520d      	mov	[S-14], A
    8d32:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    8d34:	1901      	je	0x8d38 <_MotorDriverSelfTest+0x54>
    8d36:	003e      	jmp	0x8db4 <_MotorDriverSelfTest+0xd0>
	{
		int16 i16DriverCurrent = 0;												/* MMP140403-1 */
    8d38:	7000      	lod	A, #0
    8d3a:	5207      	mov	[S-8], A

		DRVCFG_CNFG_UVWT( (uint16) c_au8DrvCfgSelfTestA[u16SelfTestIdx]);		/* MMP130904-1 */
    8d3c:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    8d40:	b6da fe00 	and	A, #65024
    8d44:	7a0d      	lod	Y, [S-14]
    8d46:	e2da a2b6 	add	Y, #41654
    8d4a:	66f0      	lod	YL, [Y]
    8d4c:	5cf6      	usex	Y
    8d4e:	a6e6      	or	A, Y
    8d50:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A

		MeasurePhaseVoltage( (uint16)c_au16DrvAdcSelfTestA[u16SelfTestIdx>>1]);	/* MMP140403-1/MMP130919-1 - Begin */
    8d54:	720d      	lod	A, [S-14]
    8d56:	4432      	lsr	A
    8d58:	44a2      	asl	A, #2
    8d5a:	a2da a2a6 	add	A, #41638
    8d5e:	151b      	call	0x8796 <_MeasurePhaseVoltage>
		if ( (u16SelfTestIdx & 1) == 0 )
    8d60:	720d      	lod	A, [S-14]
    8d62:	b401      	and	A, #1
    8d64:	5205      	mov	[S-6], A
    8d66:	1d03      	jne	0x8d6e <_MotorDriverSelfTest+0x8a>
		{
			/* Even-index (0,2,4,6) are phase to ground: Check current too (< 20 mA) */
			MeasureMotorCurrent();
    8d68:	150d      	call	0x8784 <_MeasureMotorCurrent>
			i16DriverCurrent = GetMotorDriverCurrent();
    8d6a:	14e7      	call	0x873a <_GetMotorDriverCurrent>
    8d6c:	5207      	mov	[S-8], A
		}
		/* Even-index (0,2,4,6) are phase to ground: Vphase < Vds; Odd-index (1,3,5,7) are phase to supply: Vphase > (Vsup - Vds) */
		if ( (g_e8ErrorElectric != (uint8) C_ERR_ELECTRIC_NO) ||
    8d6e:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    8d70:	1d10      	jne	0x8d92 <_MotorDriverSelfTest+0xae>
    8d72:	7205      	lod	A, [S-6]
    8d74:	1d08      	jne	0x8d86 <_MotorDriverSelfTest+0xa2>
    8d76:	72d8 0114 	lod	A, 0x114 <_g_i16PhaseVoltage>
    8d7a:	ae0b      	cmp	A, [S-12]
    8d7c:	1f0a      	jsg	0x8d92 <_MotorDriverSelfTest+0xae>
    8d7e:	7e07      	lod	X, [S-8]
    8d80:	2c14      	cmp	X, #20
    8d82:	1f07      	jsg	0x8d92 <_MotorDriverSelfTest+0xae>
    8d84:	000e      	jmp	0x8da2 <_MotorDriverSelfTest+0xbe>
    8d86:	7120      	lod	A, dp:0x20 <_g_i16MotorVoltage>
    8d88:	aa0b      	sub	A, [S-12]
    8d8a:	7ad8 0114 	lod	Y, 0x114 <_g_i16PhaseVoltage>
    8d8e:	eee2      	cmp	Y, A
    8d90:	1e88      	jsge	0x8da2 <_MotorDriverSelfTest+0xbe>
			(((u16SelfTestIdx & 1) == 0) && ((g_i16PhaseVoltage > (int16)u16VdsThreshold) || (i16DriverCurrent > 20))) ||
			(((u16SelfTestIdx & 1) != 0) && (g_i16PhaseVoltage < (int16)(g_i16MotorVoltage - u16VdsThreshold))) )
		{																		/* MMP130919-1 - End */
			/* Over-current trigger; Phase makes short with supply or Ground */
			g_e8ErrorElectric = (uint8) C_ERR_ELECTRIC_PERM;
    8d92:	6002      	lod	AL, #2
    8d94:	412d      	mov	dp:0x2d <_g_e8ErrorElectric>, AL
			SetLastError( (uint8) C_ERR_SELFTEST_A);
    8d96:	72da 00ea 	lod	A, #234
    8d9a:	162d      	call	0x89f6 <_SetLastError>
			g_e8ErrorCoil = (uint8) C_ERR_SELFTEST_A;//Ban, FET short with ground or supply
    8d9c:	60ea      	lod	AL, #-22
    8d9e:	412c      	mov	dp:0x2c <_g_e8ErrorCoil>, AL
			break;
    8da0:	0009      	jmp	0x8db4 <_MotorDriverSelfTest+0xd0>
	{
		u16VdsThreshold = 200U;
	}																			/* MMP130919-1 - End */

	/* Test for FET shortages; Note: Diagnostics configuration will switch off driver at over-current */
	for ( u16SelfTestIdx = 0; (g_e8ErrorElectric == (uint8) C_ERR_ELECTRIC_NO) && (u16SelfTestIdx < (sizeof(c_au8DrvCfgSelfTestA)/sizeof(c_au8DrvCfgSelfTestA[0]))); u16SelfTestIdx++ )
    8da2:	720d      	lod	A, [S-14]
    8da4:	a001      	add	A, #1
    8da6:	520d      	mov	[S-14], A
    8da8:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    8daa:	1d04      	jne	0x8db4 <_MotorDriverSelfTest+0xd0>
    8dac:	720d      	lod	A, [S-14]
    8dae:	ac07      	cmp	A, #7
    8db0:	1e01      	jug	0x8db4 <_MotorDriverSelfTest+0xd0>
    8db2:	07c2      	jmp	0x8d38 <_MotorDriverSelfTest+0x54>
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    8db4:	7840      	lod	Y, #64
    8db6:	72d8 11cc 	lod	A, 0x11cc <__ep__+0x1cc>
    8dba:	6000      	lod	AL, #0
    8dbc:	72e4      	swap	A
    8dbe:	5201      	mov	[S-2], A
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    8dc0:	720b      	lod	A, [S-12]
    8dc2:	7e01      	lod	X, [S-2]
    8dc4:	4821      	mulu	YA, A, Y
    8dc6:	4c63      	divu	YA, X
    8dc8:	4c63      	divu	YA, X
	}

	/* Convert Vds-voltage (10mV units) to ADC-LSB */
	u16VdsThreshold = muldivU16_U16byU16byU16( u16VdsThreshold, C_GVOLTAGE_DIV, EE_GADC);

	for ( u16SelfTestIdx = 0; (g_e8ErrorElectric == (uint8) C_ERR_ELECTRIC_NO) && (u16SelfTestIdx < (sizeof(c_au8DrvCfgSelfTestB4)/sizeof(c_au8DrvCfgSelfTestB4[0]))); u16SelfTestIdx++ )
    8dca:	7000      	lod	A, #0
    8dcc:	520d      	mov	[S-14], A
    8dce:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    8dd0:	1901      	je	0x8dd4 <_MotorDriverSelfTest+0xf0>
    8dd2:	0061      	jmp	0x8e96 <_MotorDriverSelfTest+0x1b2>
		uint16 u16VphH;
		uint16 u16VphL;
		uint16 u16Vds;
		uint16 u16MotorCoilCurrent;
		register uint16 u16DC;
		if ( u16SelfTestIdx & 0x02 )
    8dd4:	720d      	lod	A, [S-14]
    8dd6:	b402      	and	A, #2
    8dd8:	5203      	mov	[S-4], A
    8dda:	1903      	je	0x8de2 <_MotorDriverSelfTest+0xfe>
		{
			/* Phase LOW + phase -PWM */
			u16DC = (PWM_REG_PERIOD >> 3);
    8ddc:	7ada 00ae 	lod	Y, #174
    8de0:	0002      	jmp	0x8de6 <_MotorDriverSelfTest+0x102>
		}
		else
		{
			/* Phase HIGH + phase PWM */
			u16DC = PWM_REG_PERIOD - (PWM_REG_PERIOD >> 3);						/* Approx. 12.5% */
    8de2:	7ada 04c8 	lod	Y, #1224
		PWM3_LT = u16DC;														/* Copy the results into the PWM register for phase V */
		PWM4_LT = u16DC;														/* Copy the results into the PWM register for phase W */
		PWM5_LT = u16DC;														/* Copy the results into the PWM register for phase T */
		PWM1_LT = u16DC;														/* Master must be modified at last (value is not important) */
#else  /* (_SUPPORT_PWM_MODE != BIPOLAR_PWM_SINGLE_INDEPENDED_VSM) && (_SUPPORT_PWM_MODE != BIPOLAR_PWM_SINGLE_INDEPENDED_GND) */
		u16DC = u16DC/2;
    8de6:	4436      	lsr	Y
		PWM2_LT = u16DC;														/* Copy the results into the PWM register for phase U */
    8de8:	5ad8 2858 	mov	0x2858 <__io__+0x58>, Y
		PWM2_HT = PWM_REG_PERIOD - u16DC;
    8dec:	72da 0576 	lod	A, #1398
    8df0:	aae6      	sub	A, Y
    8df2:	52d8 285a 	mov	0x285a <__io__+0x5a>, A
		PWM3_LT = u16DC;														/* Copy the results into the PWM register for phase V */
    8df6:	5ad8 2862 	mov	0x2862 <__io__+0x62>, Y
		PWM3_HT = PWM_REG_PERIOD - u16DC;
    8dfa:	52d8 2864 	mov	0x2864 <__io__+0x64>, A
		PWM4_LT = u16DC;														/* Copy the results into the PWM register for phase W */
    8dfe:	5ad8 286c 	mov	0x286c <__io__+0x6c>, Y
		PWM4_HT = PWM_REG_PERIOD - u16DC;
    8e02:	52d8 286e 	mov	0x286e <__io__+0x6e>, A
		PWM5_LT = u16DC;														/* Copy the results into the PWM register for phase T */
    8e06:	5ad8 2876 	mov	0x2876 <__io__+0x76>, Y
		PWM5_HT = PWM_REG_PERIOD - u16DC;
    8e0a:	52d8 2878 	mov	0x2878 <__io__+0x78>, A
		PWM1_LT = u16DC;														/* Master must be modified at last (value is not important) */
    8e0e:	5ad8 284e 	mov	0x284e <__io__+0x4e>, Y
#endif /* (_SUPPORT_PWM_MODE != BIPOLAR_PWM_SINGLE_INDEPENDED_VSM) && (_SUPPORT_PWM_MODE != BIPOLAR_PWM_SINGLE_INDEPENDED_GND) */

		DRVCFG_CNFG_UVWT( (uint16) c_au8DrvCfgSelfTestB4[u16SelfTestIdx]);
    8e12:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    8e16:	b6da fe00 	and	A, #65024
    8e1a:	7a0d      	lod	Y, [S-14]
    8e1c:	e2da a29c 	add	Y, #41628
    8e20:	66f0      	lod	YL, [Y]
    8e22:	5cf6      	usex	Y
    8e24:	a6e6      	or	A, Y
    8e26:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A

		ADC_Stop();																/* clear the ADC control register */
    8e2a:	82db 8534 	callf	0x8534 <_ADC_Stop>
		if ( u16SelfTestIdx & 2 )
    8e2e:	7203      	lod	A, [S-4]
    8e30:	1904      	je	0x8e3a <_MotorDriverSelfTest+0x156>
		{
			ADC_SBASE = (uint16) tAdcSelfTest4B;								/* Phase = Low */
    8e32:	7eda a1a8 	lod	X, #41384
    8e36:	5e92      	mov	io:0x12 <__dp_noinit_size+0x2>, X
    8e38:	0003      	jmp	0x8e40 <_MotorDriverSelfTest+0x15c>
		}
		else
		{
			ADC_SBASE = (uint16) tAdcSelfTest4A;								/* Phase = High */
    8e3a:	72da a1c0 	lod	A, #41408
    8e3e:	5292      	mov	io:0x12 <__dp_noinit_size+0x2>, A
		}
		ADC_DBASE = (uint16) &adcMotorSelfTest4Ph;
    8e40:	7eef      	lod	X, S
    8e42:	20dc      	add	X, #-36
    8e44:	5e94      	mov	io:0x14 <__dp_noinit_size+0x4>, X
		ADC_CTRL |= (ADC_TRIG_SRC | ADC_SYNC_SOC);								/* Single cycle of conversion is done */
    8e46:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    8e48:	a6da 0082 	or	A, #130
    8e4c:	5290      	mov	io:0x10 <__dp_noinit_size>, A
		ADC_CTRL |= ADC_START;													/* Start ADC */
    8e4e:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    8e50:	a401      	or	A, #1
    8e52:	5290      	mov	io:0x10 <__dp_noinit_size>, A

		/* This takes about 4 Motor PWM-periods per self-test */
		while (ADC_CTRL & ADC_START) /* lint -e{722} */ ;						/* Wait for ADC result (Time-out?) */
    8e54:	7290      	lod	A, io:0x10 <__dp_noinit_size>
    8e56:	b401      	and	A, #1
    8e58:	1d7d      	jne	0x8e54 <_MotorDriverSelfTest+0x170>

		DRVCFG_GND_UVWT();
    8e5a:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    8e5e:	b6da fe00 	and	A, #65024
    8e62:	a6da 00aa 	or	A, #170
    8e66:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A

		if ( g_e8ErrorElectric != (uint8) C_ERR_ELECTRIC_NO )					/* Over-current ? */
    8e6a:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    8e6c:	1901      	je	0x8e70 <_MotorDriverSelfTest+0x18c>
    8e6e:	074d      	jmp	0x8d0a <_MotorDriverSelfTest+0x26>
			SetLastError( C_ERR_SELFTEST_B);
			g_e8ErrorCoil = (uint8) C_ERR_SELFTEST_B;//Ban, phase shot with other phase
			break;
		}

		if ( u16SelfTestIdx & 2 )
    8e70:	7203      	lod	A, [S-4]
    8e72:	1902      	je	0x8e78 <_MotorDriverSelfTest+0x194>
		{
			/* Use tAdcSelfTest4B */
			u16Vsm = adcMotorSelfTest4Ph.UnfilteredDriverCurrent;				/* Current becomes voltage */
			u16MotorCoilCurrent = adcMotorSelfTest4Ph.FilteredSupplyVoltage;
    8e74:	7211      	lod	A, [S-18]
    8e76:	0001      	jmp	0x8e7a <_MotorDriverSelfTest+0x196>
		}
		else
		{
			/* Use tAdcSelfTest4A */
			u16Vsm = adcMotorSelfTest4Ph.FilteredSupplyVoltage;
			u16MotorCoilCurrent = adcMotorSelfTest4Ph.UnfilteredDriverCurrent;
    8e78:	720f      	lod	A, [S-16]
			g_e8ErrorCoil = (uint8) C_ERR_SELFTEST_E;//Ban, phase resistance is too small
			break;
		}
#endif // _SUPPORT_COIL_RESISTANCE_CHECK
		extern uint16 l_u16CurrentZeroOffset;
		if ( (int16) (u16MotorCoilCurrent - l_u16CurrentZeroOffset) < C_MIN_COIL_CURRENT )
    8e7a:	aad8 012e 	sub	A, 0x12e <_l_u16CurrentZeroOffset>
    8e7e:	ac09      	cmp	A, #9
    8e80:	1f01      	jsg	0x8e84 <_MotorDriverSelfTest+0x1a0>
    8e82:	074a      	jmp	0x8d18 <_MotorDriverSelfTest+0x34>
	}

	/* Convert Vds-voltage (10mV units) to ADC-LSB */
	u16VdsThreshold = muldivU16_U16byU16byU16( u16VdsThreshold, C_GVOLTAGE_DIV, EE_GADC);

	for ( u16SelfTestIdx = 0; (g_e8ErrorElectric == (uint8) C_ERR_ELECTRIC_NO) && (u16SelfTestIdx < (sizeof(c_au8DrvCfgSelfTestB4)/sizeof(c_au8DrvCfgSelfTestB4[0]))); u16SelfTestIdx++ )
    8e84:	720d      	lod	A, [S-14]
    8e86:	a001      	add	A, #1
    8e88:	520d      	mov	[S-14], A
    8e8a:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    8e8c:	1d04      	jne	0x8e96 <_MotorDriverSelfTest+0x1b2>
    8e8e:	720d      	lod	A, [S-14]
    8e90:	ac09      	cmp	A, #9
    8e92:	1e01      	jug	0x8e96 <_MotorDriverSelfTest+0x1b2>
    8e94:	079f      	jmp	0x8dd4 <_MotorDriverSelfTest+0xf0>
			g_e8ErrorCoil = (uint8) C_ERR_SELFTEST_C;
			break;
		}
	}	

	DRVCFG_DIS_UVWT();
    8e96:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    8e9a:	b6da fe00 	and	A, #65024
    8e9e:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A
	PWM2_LT = PWM_SCALE_OFFSET;													/* 50% PWM duty cycle for phase U */
    8ea2:	7eda 02bb 	lod	X, #699
    8ea6:	5ed8 2858 	mov	0x2858 <__io__+0x58>, X
	PWM3_LT = PWM_SCALE_OFFSET;													/* 50% PWM duty cycle for phase V */
    8eaa:	5ed8 2862 	mov	0x2862 <__io__+0x62>, X
	PWM4_LT = PWM_SCALE_OFFSET;													/* 50% PWM duty cycle for phase W */
    8eae:	5ed8 286c 	mov	0x286c <__io__+0x6c>, X
	PWM5_LT = PWM_SCALE_OFFSET;													/* 50% PWM duty cycle for phase T */
    8eb2:	5ed8 2876 	mov	0x2876 <__io__+0x76>, X
	PWM1_LT = PWM_SCALE_OFFSET;													/* Master must be modified at last (value is not important) */
    8eb6:	5ed8 284e 	mov	0x284e <__io__+0x4e>, X
	DRVCFG_DIS();																/* MMP140903-1 */
    8eba:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    8ebe:	a6da 0100 	or	A, #256
    8ec2:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A
	PWM2_CMP = u16Pwm2Storage;													/* MMP150219-2: Restore PWM2 ADC trigger CMP time */
    8ec6:	7209      	lod	A, [S-10]
    8ec8:	52d8 285c 	mov	0x285c <__io__+0x5c>, A
    8ecc:	5425      	ret	#38

00008ece <_MotorDriverCurrentMeasureInit>:
 * Performance: <10us
 * ****************************************************************************	*/
void MotorDriverCurrentMeasureInit( void)
{
	uint16 u16Count;															/* MMP140331-2 - Begin */
	l_u16StartupDelayInit = 64 * NVRAM_ACCELERATION_POINTS;						/* Calculate the startup-delay, based on acceleration steps */
    8ece:	61a4      	lod	AL, dp:0xa4 <_g_NvramUser+0x4a>
    8ed0:	b43f      	and	A, #63
    8ed2:	487a 0040 	muls	Y, A, #64
    8ed6:	5ad8 013a 	mov	0x13a <_l_u16StartupDelayInit>, Y
	if ( l_u16StartupDelayInit < (2*C_MOVAVG_SZ) )
    8eda:	ec7f      	cmp	Y, #127
    8edc:	1e03      	jug	0x8ee4 <_MotorDriverCurrentMeasureInit+0x16>
	{
		l_u16StartupDelayInit = (2*C_MOVAVG_SZ);								/* Minimum of twice the moving-average filter size */
    8ede:	72da 0080 	lod	A, #128
    8ee2:	0007      	jmp	0x8ef2 <_MotorDriverCurrentMeasureInit+0x24>
	}
	else if ( l_u16StartupDelayInit > NVRAM_STALL_DETECTOR_DELAY )
    8ee4:	61c6      	lod	AL, dp:0xc6 <__bss_dp_size+0x16>
    8ee6:	44a2      	asl	A, #2
    8ee8:	4422      	asl	A
    8eea:	b6da 07f8 	and	A, #2040
    8eee:	eee2      	cmp	Y, A
    8ef0:	1a02      	jule	0x8ef6 <_MotorDriverCurrentMeasureInit+0x28>
	{
		l_u16StartupDelayInit = NVRAM_STALL_DETECTOR_DELAY;						/* Maximum of NVRAM specified */
    8ef2:	52d8 013a 	mov	0x13a <_l_u16StartupDelayInit>, A
 */
static INLINE uint16 SYS_getCpuStatus (void)
{
    uint16 status;

    __asm__ __volatile__ (
    8ef6:	72e3      	lod	A, M
	}																			/* MMP140331-2 - End */

	ATOMIC_CODE
    8ef8:	4407      	mov	R, #0
    8efa:	500c      	call	fp0:0x60
    8efc:	54f0      	mov	UPr, #0
    8efe:	7ad8 013a 	lod	Y, 0x13a <_l_u16StartupDelayInit>
    8f02:	5938      	mov	dp:0x38 <_g_u16StartupDelay>, Y
    8f04:	7800      	lod	Y, #0
    8f06:	5958      	mov	dp:0x58 <_g_u16MotorCurrentLPFx64>, Y
    8f08:	5ad8 0294 	mov	0x294 <_l_u16MotorCurrentRawIdx>, Y
    8f0c:	5956      	mov	dp:0x56 <__data_size>, Y
    8f0e:	5ad8 0296 	mov	0x296 <_l_au16MotorCurrentRaw>, Y
/*
 * Set M register value
 */
static INLINE void SYS_setCpuStatus (uint16 status)
{
    __asm__ __volatile__ (
    8f12:	52e3      	mov	M, A
		l_u16MotorCurrentRawIdx = 0;											/* Raw current moving average index */
		g_u16MotorCurrentMovAvgxN = 0;											/* Moving average motor-current (x 4..16) */
		l_au16MotorCurrentRaw[0] = 0;
	);
	{
		uint16 *pStallCurrentRaw = &l_au16MotorCurrentRaw[1];
    8f14:	7ada 0298 	lod	Y, #664
    8f18:	7c3f      	lod	X, #63
		for ( u16Count = 1; u16Count < C_MOVAVG_SZ; u16Count++ )
		{
			*pStallCurrentRaw = 0;
    8f1a:	7000      	lod	A, #0
    8f1c:	52d6      	mov	[Y++], A
    8f1e:	1bfd      	djnz	X, 0x8f1a <_MotorDriverCurrentMeasureInit+0x4c>
		g_u16MotorCurrentMovAvgxN = 0;											/* Moving average motor-current (x 4..16) */
		l_au16MotorCurrentRaw[0] = 0;
	);
	{
		uint16 *pStallCurrentRaw = &l_au16MotorCurrentRaw[1];
		for ( u16Count = 1; u16Count < C_MOVAVG_SZ; u16Count++ )
    8f20:	5401      	ret

00008f22 <_MotorDriverCurrentMeasure>:
 *
 * Measure a average motor current, based on ADC current's
 * Performance: Approximate: 10us @ 20MHz
 * ****************************************************************************	*/
void MotorDriverCurrentMeasure( void)
{
    8f22:	5803      	inc	S, #4
#if (C_MOVAVG_SSZ < 6)
	uint16 u16MotorCurrentAcc;
#endif /* (C_MOVAVG_SSZ < 6 ) */
	uint16 u16MicroStepMotorCurrent = GetRawMotorDriverCurrent();
    8f24:	82db 870a 	callf	0x870a <_GetRawMotorDriverCurrent>
    8f28:	7ee2      	lod	X, A
	//SpiDebugWriteFirst(g_u16HallMicroStepIdx);
	//SpiDebugWriteNext(u16MicroStepMotorCurrent);
#endif /* _DEBUG_SPI */

	/* Moving average (sum) of motor-driver current */
	uint16 *pu16MotorCurrentElement = &l_au16MotorCurrentRaw[l_u16MotorCurrentRawIdx];
    8f2a:	72d8 0294 	lod	A, 0x294 <_l_u16MotorCurrentRawIdx>
    8f2e:	487a 0002 	muls	Y, A, #2
    8f32:	e2da 0296 	add	Y, #662
    8f36:	5a03      	mov	[S-4], Y
	uint16 u16PrevMotorCurrent = *pu16MotorCurrentElement;
    8f38:	7af0      	lod	Y, [Y]
    8f3a:	5a01      	mov	[S-2], Y
	l_u16MotorCurrentRawIdx = (l_u16MotorCurrentRawIdx + 1) & (C_MOVAVG_SZ - 1);
    8f3c:	a001      	add	A, #1
    8f3e:	b43f      	and	A, #63
    8f40:	52d8 0294 	mov	0x294 <_l_u16MotorCurrentRawIdx>, A
	if ( (g_u16StartupDelay != 0) || (u16MicroStepMotorCurrent < (u16PrevMotorCurrent << 1)) )	/* Check for valid motor-driver current (at least smaller than 2x previous current)  */
    8f44:	7138      	lod	A, dp:0x38 <_g_u16StartupDelay>
    8f46:	1d04      	jne	0x8f50 <_MotorDriverCurrentMeasure+0x2e>
    8f48:	72e6      	lod	A, Y
    8f4a:	4422      	asl	A
    8f4c:	2ee2      	cmp	X, A
    8f4e:	1c06      	jnc	0x8f5c <_MotorDriverCurrentMeasure+0x3a>
	{
		g_u16MotorCurrentMovAvgxN -= u16PrevMotorCurrent;						/* Subtract oldest raw motor-driver current */
    8f50:	7156      	lod	A, dp:0x56 <__data_size>
    8f52:	aa01      	sub	A, [S-2]
		g_u16MotorCurrentMovAvgxN += u16MicroStepMotorCurrent;					/* Add newest raw motor-driver current */
    8f54:	a2ee      	add	A, X
    8f56:	5156      	mov	dp:0x56 <__data_size>, A
		*pu16MotorCurrentElement = u16MicroStepMotorCurrent;					/* Overwrite oldest with newest motor-driver current */
    8f58:	7a03      	lod	Y, [S-4]
    8f5a:	5ef0      	mov	[Y], X
	if ( (g_u16StartupDelay > (l_u16StartupDelayInit - (2*C_MOVAVG_SZ))) || (g_u8MotorStartupMode == (uint8) MSM_STEPPER_D) || ((g_u8MotorStartupMode == (uint8) MSM_STEPPER_A) && (u16MotorCurrentAcc < g_u16MotorCurrentLPFx64)) )
	{
		g_u16MotorCurrentLPFx64 = u16MotorCurrentAcc;
#endif /* (C_MOVAVG_SSZ < 6 ) */
#if (C_MOVAVG_SSZ == 6 )
	if ( (g_u16StartupDelay > (l_u16StartupDelayInit - (2*C_MOVAVG_SZ))) || (g_u8MotorStartupMode == (uint8) MSM_STEPPER_D) || ((g_u8MotorStartupMode == (uint8) MSM_STEPPER_A) && (g_u16MotorCurrentMovAvgxN < g_u16MotorCurrentLPFx64)) )
    8f5c:	72d8 013a 	lod	A, 0x13a <_l_u16StartupDelayInit>
    8f60:	a080      	add	A, #-128
    8f62:	ad38      	cmp	A, dp:0x38 <_g_u16StartupDelay>
    8f64:	1809      	jc	0x8f78 <_MotorDriverCurrentMeasure+0x56>
    8f66:	62d8 013f 	lod	AL, 0x13f <_g_u8MotorStartupMode>
    8f6a:	8c02      	cmp	AL, #2
    8f6c:	1905      	je	0x8f78 <_MotorDriverCurrentMeasure+0x56>
    8f6e:	8c01      	cmp	AL, #1
    8f70:	1d05      	jne	0x8f7c <_MotorDriverCurrentMeasure+0x5a>
    8f72:	7156      	lod	A, dp:0x56 <__data_size>
    8f74:	ad58      	cmp	A, dp:0x58 <_g_u16MotorCurrentLPFx64>
    8f76:	1c02      	jnc	0x8f7c <_MotorDriverCurrentMeasure+0x5a>
	{
		g_u16MotorCurrentLPFx64 = g_u16MotorCurrentMovAvgxN;
    8f78:	7156      	lod	A, dp:0x56 <__data_size>
    8f7a:	000c      	jmp	0x8f94 <_MotorDriverCurrentMeasure+0x72>
#if (MOTOR_MICROSTEPS < 3)
		/* LPF_B: IIR of 0.9921875 (127/128) & 0.0078125 (1/128) */
		g_u16MotorCurrentLPFx64 = (g_u16MotorCurrentLPFx64 - ((g_u16MotorCurrentLPFx64 + 63) >> 7)) + ((g_u16MotorCurrentMovAvgxN + (1 << C_MOVAVG_SSZ)) >> (1 + C_MOVAVG_SSZ));
#else  /* (MOTOR_MICROSTEPS < 3) */
		/* LPF_B: IIR of 0.99609375 (255/256) & 0.00390625 (1/256) */
		g_u16MotorCurrentLPFx64 = (g_u16MotorCurrentLPFx64 - ((g_u16MotorCurrentLPFx64 + 63) >> 8)) + ((g_u16MotorCurrentMovAvgxN + (1 << (1 + C_MOVAVG_SSZ))) >> (2 + C_MOVAVG_SSZ));
    8f7c:	7158      	lod	A, dp:0x58 <_g_u16MotorCurrentLPFx64>
    8f7e:	7ae2      	lod	Y, A
    8f80:	e03f      	add	Y, #63
    8f82:	6400      	lod	YL, #0
    8f84:	7ae8      	swap	Y
    8f86:	aae6      	sub	A, Y
    8f88:	7956      	lod	Y, dp:0x56 <__data_size>
    8f8a:	e2da 0080 	add	Y, #128
    8f8e:	6400      	lod	YL, #0
    8f90:	7ae8      	swap	Y
    8f92:	a2e6      	add	A, Y
    8f94:	5158      	mov	dp:0x58 <_g_u16MotorCurrentLPFx64>, A
#endif /* (MOTOR_MICROSTEPS < 3) */
	}

	if ( g_u16StartupDelay > 0 )
    8f96:	7138      	lod	A, dp:0x38 <_g_u16StartupDelay>
    8f98:	1902      	je	0x8f9e <_MotorDriverCurrentMeasure+0x7c>
	{
		g_u16StartupDelay--;
    8f9a:	a0ff      	add	A, #-1
    8f9c:	5138      	mov	dp:0x38 <_g_u16StartupDelay>, A
    8f9e:	5405      	ret	#6

00008fa0 <_MotorDriver_InitialPwmDutyCycle>:
 * MotorDriver_InitialPwmDutyCycle()
 *
 * Calculate Motor PWM (initial) Duty-cycle, based on current threshold level and speed
 * ****************************************************************************	*/
void MotorDriver_InitialPwmDutyCycle( uint16 u16CurrentLevel, uint16 u16MotorSpeed)
{
    8fa0:	5807      	inc	S, #8
    8fa2:	7ae2      	lod	Y, A
    8fa4:	7e0b      	lod	X, [S-12]
    8fa6:	61a7      	lod	AL, dp:0xa7 <_g_NvramUser+0x4d>
    8fa8:	4205      	mov	[S-6], AL
    8faa:	618b      	lod	AL, dp:0x8b <_g_NvramUser+0x31>
    8fac:	4207      	mov	[S-8], AL
	if ( u16MotorSpeed == 0 )														/* MMP140228-1 - Begin */
    8fae:	2c00      	cmp	X, #0
    8fb0:	1d08      	jne	0x8fc2 <_MotorDriver_InitialPwmDutyCycle+0x22>
	{
		g_u16CorrectionRatio  = ((NVRAM_MOTOR_COIL_RTOT + 2 * C_FETS_RTOT) * u16CurrentLevel);
    8fb2:	6205      	lod	AL, [S-6]
    8fb4:	5cf2      	usex	A
    8fb6:	a002      	add	A, #2
    8fb8:	4871      	muls	A, A, Y
    8fba:	514e      	mov	dp:0x4e <_g_u16CorrectionRatio>, A
		g_u16CorrectionRatio /= 4;
    8fbc:	714e      	lod	A, dp:0x4e <_g_u16CorrectionRatio>
    8fbe:	44b2      	lsr	A, #2
    8fc0:	0013      	jmp	0x8fe8 <_MotorDriver_InitialPwmDutyCycle+0x48>
	}																				/* MMP140228-1 - End */
	else
	{
		/* Ohmic losses: Ur-losses = (0.5 * R[ohm] * I[mA])/10 [10mV] = (R[ohm] * I[mA])/20 [10mV]
		 * FET losses: Ufet-losses = (Rfet * I[mA])/10 [10mV] = (2 * Rfet * I[mA])/20 [10mV]*/
		g_u16CorrectionRatio  = ((NVRAM_MOTOR_COIL_RTOT + (2 * C_FETS_RTOT)) * u16CurrentLevel);
    8fc2:	6205      	lod	AL, [S-6]
    8fc4:	5cf2      	usex	A
    8fc6:	a002      	add	A, #2
    8fc8:	4871      	muls	A, A, Y
    8fca:	514e      	mov	dp:0x4e <_g_u16CorrectionRatio>, A
		g_u16CorrectionRatio /= 20;													/* Divided by 20 */
    8fcc:	714e      	lod	A, dp:0x4e <_g_u16CorrectionRatio>
    8fce:	4822 cccd 	mulu	YA, A, #52429
    8fd2:	72e6      	lod	A, Y
    8fd4:	44b2      	lsr	A, #2
    8fd6:	44b2      	lsr	A, #2
    8fd8:	514e      	mov	dp:0x4e <_g_u16CorrectionRatio>, A
		g_u16CorrectionRatio += (NVRAM_MOTOR_CONSTANT * u16MotorSpeed);				/* BEMF = Kmotor[10mV/RPS] * Speed[RPS] */
    8fda:	61a6      	lod	AL, dp:0xa6 <_g_NvramUser+0x4c>
    8fdc:	66e0      	lod	YL, AL
    8fde:	5cf6      	usex	Y
    8fe0:	72e6      	lod	A, Y
    8fe2:	487b      	muls	Y, A, X
    8fe4:	714e      	lod	A, dp:0x4e <_g_u16CorrectionRatio>
    8fe6:	a2e6      	add	A, Y
    8fe8:	514e      	mov	dp:0x4e <_g_u16CorrectionRatio>, A
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    8fea:	794e      	lod	Y, dp:0x4e <_g_u16CorrectionRatio>
    8fec:	44a6      	asl	Y, #2
    8fee:	4426      	asl	Y
    8ff0:	6207      	lod	AL, [S-8]
    8ff2:	5cf2      	usex	A
    8ff4:	4872 0019 	muls	A, A, #25
    8ff8:	4432      	lsr	A
    8ffa:	5205      	mov	[S-6], A
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    8ffc:	72da 0aec 	lod	A, #2796
    9000:	7e05      	lod	X, [S-6]
    9002:	4821      	mulu	YA, A, Y
    9004:	4c63      	divu	YA, X
    9006:	4c63      	divu	YA, X
    9008:	5203      	mov	[S-4], A
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    900a:	52d8 0320 	mov	0x320 <_g_u16PidCtrlRatio>, A
	}
	g_u16PidCtrlRatio =  muldivU16_U16byU16byU16( g_u16CorrectionRatio << 3, PWM_REG_PERIOD << (1 + PWM_PRESCALER_N), NVRAM_VSUP_REF);
	g_u16PID_I = g_u16PidCtrlRatio;
    900e:	51ca      	mov	dp:0xca <_g_u16PID_I>, A
	if ( g_i16MotorVoltage > 0 )
    9010:	7120      	lod	A, dp:0x20 <_g_i16MotorVoltage>
    9012:	ac00      	cmp	A, #0
    9014:	1b0b      	jsle	0x902c <_MotorDriver_InitialPwmDutyCycle+0x8c>
    9016:	714e      	lod	A, dp:0x4e <_g_u16CorrectionRatio>
    9018:	44a2      	asl	A, #2
    901a:	4422      	asl	A
    901c:	7d20      	lod	X, dp:0x20 <_g_i16MotorVoltage>
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    901e:	7ada 0aec 	lod	Y, #2796
    9022:	4821      	mulu	YA, A, Y
    9024:	4c63      	divu	YA, X
    9026:	4c63      	divu	YA, X
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    9028:	514e      	mov	dp:0x4e <_g_u16CorrectionRatio>, A
    902a:	0002      	jmp	0x9030 <_MotorDriver_InitialPwmDutyCycle+0x90>
	{
		g_u16CorrectionRatio = muldivU16_U16byU16byU16( g_u16CorrectionRatio << 3, PWM_REG_PERIOD << (1 + PWM_PRESCALER_N), (uint16) g_i16MotorVoltage);
	}
	else
	{
		g_u16CorrectionRatio = g_u16PidCtrlRatio;
    902c:	7e03      	lod	X, [S-4]
    902e:	5d4e      	mov	dp:0x4e <_g_u16CorrectionRatio>, X
	}
	g_i16PID_D = 0;
    9030:	7000      	lod	A, #0
    9032:	52d8 014a 	mov	0x14a <_g_i16PID_D>, A
	g_i16PID_E = 0;
    9036:	52d8 0148 	mov	0x148 <_g_i16PID_E>, A
	g_u16PID_CtrlCounter = 0;													/* Re-start Current-control PID */
    903a:	52d8 0146 	mov	0x146 <_g_u16PID_CtrlCounter>, A
    903e:	5409      	ret	#10

00009040 <_MotorDriver_4PhaseStepper>:
 * Performance: 13.5us @ 28MHz (BIPOLAR_PWM_SINGLE_INDEPENDED_GND)
 *
 * Based on a 32-step c_ai16MicroStepVector4PH-table!!
 * ****************************************************************************	*/
void MotorDriver_4PhaseStepper( void)
{
    9040:	5805      	inc	S, #6
#endif /* (_SUPPORT_PWM_MODE == BIPOLAR_PWM_SINGLE_INDEPENDED_VSM) */

#if (_SUPPORT_PWM_MODE == BIPOLAR_PWM_SINGLE_INDEPENDED_GND)					/* MMP150515-1 */
	/* EMC CE/RE reduction */
	int16 iPwm1, iPwm2;
	int16 *pi16Vector = (int16 *) &c_ai16MicroStepVector4PH[g_u16MicroStepIdx];
    9042:	7150      	lod	A, dp:0x50 <_g_u16MicroStepIdx>
    9044:	5203      	mov	[S-4], A
    9046:	487a 0002 	muls	Y, A, #2
    904a:	7ee6      	lod	X, Y
    904c:	22da a1fc 	add	X, #41468
    return result;
} /* End of muldivU16_U16byU16byU16() */

static __inline__ int16 mulI16_I16byI16Shft4(int16 a, int16 b) __attribute__ ((always_inline));
static __inline__ int16 mulI16_I16byI16Shft4(int16 a, int16 b)
{
    9050:	714e      	lod	A, dp:0x4e <_g_u16CorrectionRatio>
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    9052:	7af8      	lod	Y, [X]
    9054:	4831      	muls	YA, A, Y
    9056:	48b3      	asr	YA, #4
    9058:	5a01      	mov	[S-2], Y
    return result;
} /* End of muldivU16_U16byU16byU16() */

static __inline__ int16 mulI16_I16byI16Shft4(int16 a, int16 b) __attribute__ ((always_inline));
static __inline__ int16 mulI16_I16byI16Shft4(int16 a, int16 b)
{
    905a:	5a05      	mov	[S-6], Y
	iPwm1 = (int16) (mulI32_I16byU16( *pi16Vector, g_u16CorrectionRatio) >> (20 + PWM_PRESCALER_N));
	pi16Vector += C_MICROSTEP_PER_FULLSTEP;
	iPwm2 = (int16) (mulI32_I16byU16( *pi16Vector, g_u16CorrectionRatio) >> (20 + PWM_PRESCALER_N));
#elif (PWM_PRESCALER_N == 0)
	iPwm1 = mulI16_I16byI16Shft4( *pi16Vector, (int16) g_u16CorrectionRatio);	/* U */
	pi16Vector += C_MICROSTEP_PER_FULLSTEP;
    905c:	2020      	add	X, #32
    905e:	7af8      	lod	Y, [X]
    9060:	714e      	lod	A, dp:0x4e <_g_u16CorrectionRatio>
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    9062:	4831      	muls	YA, A, Y
    9064:	48b3      	asr	YA, #4
#else
	i16PwmU = (int16) (mulI16_I16byI16( *pi16Vector, (int16) g_u16CorrectionRatio) >> (4 + PWM_PRESCALER_N));	/* U */
	pi16Vector += C_MICROSTEP_PER_FULLSTEP;
	i16PwmV = (int16) (mulI16_I16byI16( *pi16Vector, (int16) g_u16CorrectionRatio) >> (4 + PWM_PRESCALER_N));	/* V */
#endif
	if ( g_u16MicroStepIdx & (2*C_MICROSTEP_PER_FULLSTEP) )
    9066:	7203      	lod	A, [S-4]
    9068:	b420      	and	A, #32
    906a:	1913      	je	0x9092 <_MotorDriver_4PhaseStepper+0x52>
	{
		/* 3rd and 4th Quadrant (Pwm1) */
		iPwm1 = (PWM_SCALE_OFFSET + iPwm1);
    906c:	7205      	lod	A, [S-6]
    906e:	a2da 02bb 	add	A, #699
    9072:	5205      	mov	[S-6], A
#if (_SUPPORT_BIPOLAR_MODE == BIPOLAR_MODE_UW_VT)
		/* U = PWM */
		PWM4_LT = (uint16) iPwm1;
    9074:	52d8 286c 	mov	0x286c <__io__+0x6c>, A
		PWM4_HT = (uint16) (PWM_REG_PERIOD - iPwm1);
    9078:	72da 0576 	lod	A, #1398
    907c:	aa05      	sub	A, [S-6]
    907e:	52d8 286e 	mov	0x286e <__io__+0x6e>, A
		PWM3_LT = (uint16) iPwm1;
		PWM3_HT = (uint16) (PWM_REG_PERIOD - iPwm1);
#endif /* (_SUPPORT_BIPOLAR_MODE == BIPOLAR_MODE_UT_VW) */

		/* W = LOW */
		PWM2_HT = 0;
    9082:	7000      	lod	A, #0
    9084:	52d8 285a 	mov	0x285a <__io__+0x5a>, A
		PWM2_LT = PWM_REG_PERIOD + 1;											/* MMP150603-1 */;
    9088:	72da 0577 	lod	A, #1399
    908c:	52d8 2858 	mov	0x2858 <__io__+0x58>, A
    9090:	0012      	jmp	0x90b6 <_MotorDriver_4PhaseStepper+0x76>
	}
	else
	{
		/* 1st and 2nd Quadrant (Pwm1)*/
		/* W = PWM */
		iPwm1 = ((int16) PWM_SCALE_OFFSET - iPwm1);
    9092:	72da 02bb 	lod	A, #699
    9096:	aa01      	sub	A, [S-2]
    9098:	5205      	mov	[S-6], A
		PWM2_LT = (uint16) iPwm1;
    909a:	52d8 2858 	mov	0x2858 <__io__+0x58>, A
		PWM2_HT = (uint16) (PWM_REG_PERIOD - iPwm1);
    909e:	72da 0576 	lod	A, #1398
    90a2:	aa05      	sub	A, [S-6]
    90a4:	52d8 285a 	mov	0x285a <__io__+0x5a>, A

#if (_SUPPORT_BIPOLAR_MODE == BIPOLAR_MODE_UW_VT)
		/* U = LOW */
		PWM4_HT = 0;
    90a8:	7000      	lod	A, #0
    90aa:	52d8 286e 	mov	0x286e <__io__+0x6e>, A
		PWM4_LT = PWM_REG_PERIOD + 1;											/* MMP150603-1 */
    90ae:	72da 0577 	lod	A, #1399
    90b2:	52d8 286c 	mov	0x286c <__io__+0x6c>, A
		PWM3_LT = PWM_REG_PERIOD + 1;											/* MMP150603-1 */
#endif /* (_SUPPORT_BIPOLAR_MODE == BIPOLAR_MODE_UT_VW) */
	}

	{
		uint16 u16Quad = g_u16MicroStepIdx & (3*C_MICROSTEP_PER_FULLSTEP);
    90b6:	7150      	lod	A, dp:0x50 <_g_u16MicroStepIdx>
    90b8:	b430      	and	A, #48
		if ( (u16Quad == 0) || (u16Quad == (3*C_MICROSTEP_PER_FULLSTEP)) )
    90ba:	1902      	je	0x90c0 <_MotorDriver_4PhaseStepper+0x80>
    90bc:	ac30      	cmp	A, #48
    90be:	1d0f      	jne	0x90de <_MotorDriver_4PhaseStepper+0x9e>
		{
			/* 1st and 4th Quadrant (Pwm2) */
#if (_SUPPORT_BIPOLAR_MODE == BIPOLAR_MODE_UW_VT)
			/* T = PWM */
			PWM5_HT = (uint16) iPwm2;
    90c0:	5ad8 2878 	mov	0x2878 <__io__+0x78>, Y
			PWM5_LT = (uint16) (PWM_REG_PERIOD - iPwm2);
    90c4:	72da 0576 	lod	A, #1398
    90c8:	aae6      	sub	A, Y
    90ca:	52d8 2876 	mov	0x2876 <__io__+0x76>, A

			/* V = LOW */
			PWM3_HT = 0;
    90ce:	7800      	lod	Y, #0
    90d0:	5ad8 2864 	mov	0x2864 <__io__+0x64>, Y
			PWM3_LT = PWM_REG_PERIOD + 1;										/* MMP150603-1 */
    90d4:	72da 0577 	lod	A, #1399
    90d8:	52d8 2862 	mov	0x2862 <__io__+0x62>, A
    90dc:	000f      	jmp	0x90fc <_MotorDriver_4PhaseStepper+0xbc>
#endif /* (_SUPPORT_BIPOLAR_MODE == BIPOLAR_MODE_UT_VW) */
		}
		else
		{
			/* 3rd Quadrant (Pwm2) */
			iPwm2 = (0 - iPwm2);
    90de:	5cc6      	neg	Y
#if (_SUPPORT_BIPOLAR_MODE == BIPOLAR_MODE_UW_VT)
			/* V = PWM */
			PWM3_HT = (uint16) iPwm2;
    90e0:	5ad8 2864 	mov	0x2864 <__io__+0x64>, Y
			PWM3_LT = (uint16) (PWM_REG_PERIOD - iPwm2);
    90e4:	72da 0576 	lod	A, #1398
    90e8:	aae6      	sub	A, Y
    90ea:	52d8 2862 	mov	0x2862 <__io__+0x62>, A

			/* T = LOW */
			PWM5_HT = 0;
    90ee:	7800      	lod	Y, #0
    90f0:	5ad8 2878 	mov	0x2878 <__io__+0x78>, Y
			PWM5_LT = PWM_REG_PERIOD + 1;										/* MMP150603-1 */
    90f4:	72da 0577 	lod	A, #1399
    90f8:	52d8 2876 	mov	0x2876 <__io__+0x76>, A
		PWM4_LT = (uint16) (0 - iPwm);						/* U = PWM */
#endif /* (_SUPPORT_BIPOLAR_MODE == BIPOLAR_MODE_UT_VW) */
	}
#endif /* (_SUPPORT_PWM_MODE == BIPOLAR_PWM_SINGLE_MIRRORSPECIAL) */

	PWM1_LT = PWM_SCALE_OFFSET;													/* Master must be modified at last (value is not important) */
    90fc:	7ada 02bb 	lod	Y, #699
    9100:	5ad8 284e 	mov	0x284e <__io__+0x4e>, Y
    9104:	5407      	ret	#8

00009106 <_MotorDriverStart>:
 * MotorDriverStart()
 *
 * Start Motor Driver
 * ****************************************************************************	*/
void MotorDriverStart( void)
{
    9106:	5801      	inc	S, #2
	if ( g_e8ErrorElectric == (uint8) C_ERR_ELECTRIC_PERM )						/* Don't start motor in case of permanent electric failure */
    9108:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    910a:	8c02      	cmp	AL, #2
    910c:	1d01      	jne	0x9110 <_MotorDriverStart+0xa>
    910e:	009a      	jmp	0x9244 <_MotorDriverStart+0x13e>
	}

#if USE_MULTI_PURPOSE_BUFFER
	/* Fill multi-purpose buffer with acceleration-data */
	{
		l_u16SpeedRPM = NVRAM_MIN_SPEED;
    9110:	71a0      	lod	A, dp:0xa0 <_g_NvramUser+0x46>
    9112:	52d8 0316 	mov	0x316 <_l_u16SpeedRPM>, A
		l_u32Temp = divU32_U32byU16( (TIMER_CLOCK * 60U), g_u16MotorMicroStepsPerMechRotation);
    9116:	72d8 0270 	lod	A, 0x270 <_g_u16MotorMicroStepsPerMechRotation>
    911a:	52df      	push	A
    911c:	4ce2 2c40 	mov	YA, #105000000
    9120:	0642 
    9122:	82db 6c3a 	callf	0x6c3a <_divU32_U32byU16>
    9126:	52d8 0318 	mov	0x318 <_l_u32Temp>, A
    912a:	5ad8 031a 	mov	0x31a <_l_u32Temp+0x2>, Y
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    912e:	5c01      	dec	S, #2
    9130:	7ed8 0316 	lod	X, 0x316 <_l_u16SpeedRPM>
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    9134:	4c63      	divu	YA, X
    9136:	4c63      	divu	YA, X
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    9138:	a0ff      	add	A, #-1
    913a:	52d8 031c 	mov	0x31c <_l_u16LowSpeedPeriod>, A
		l_u16LowSpeedPeriod = divU16_U32byU16( l_u32Temp, l_u16SpeedRPM) - 1;
	}
#endif /* USE_MULTI_PURPOSE_BUFFER */

	if ( g_u8RewindFlags & (uint8) C_REWIND_STALL_DETECT )
    913e:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    9140:	b402      	and	A, #2
    9142:	1d01      	jne	0x9146 <_MotorDriverStart+0x40>
    9144:	0031      	jmp	0x91a8 <_MotorDriverStart+0xa2>
	{
		if ( (g_u16MotorRewindSteps != 0) &&									/* MMP140331-1 */
    9146:	7ed8 0272 	lod	X, 0x272 <_g_u16MotorRewindSteps>
    914a:	1925      	je	0x9196 <_MotorDriverStart+0x90>
    914c:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    914e:	7ae2      	lod	Y, A
    9150:	f401      	and	Y, #1
    9152:	612a      	lod	AL, dp:0x2a <_g_e8MotorDirectionCCW>
    9154:	4201      	mov	[S-2], AL
    9156:	5cf2      	usex	A
    9158:	eee2      	cmp	Y, A
    915a:	1903      	je	0x9162 <_MotorDriverStart+0x5c>
    915c:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    915e:	b404      	and	A, #4
    9160:	191a      	je	0x9196 <_MotorDriverStart+0x90>
			(((g_u8RewindFlags & (uint8) C_REWIND_DIRECTION_CCW) == g_e8MotorDirectionCCW) || (g_u8RewindFlags & C_REWIND_DIRECTION_AUTO)) )
		{
			/* Start rewind-function, with "rewinding" */
			g_u8RewindFlags = (uint8) (C_REWIND_ACTIVE | C_REWIND_REWIND);		/* Start rewind-process (MMP140331-1) */
    9162:	6028      	lod	AL, #40
    9164:	4124      	mov	dp:0x24 <__data_dp_size>, AL
			g_u16TargetPositionRewind = g_u16TargetPosition;
    9166:	71f2      	lod	A, dp:0xf2 <_g_u16TargetPosition>
    9168:	52d8 0152 	mov	0x152 <__data_end>, A
    916c:	79f0      	lod	Y, dp:0xf0 <_g_u16ActualPosition>
			if ( g_e8MotorDirectionCCW )
    916e:	6201      	lod	AL, [S-2]
    9170:	190a      	je	0x9186 <_MotorDriverStart+0x80>
			{
				if ( g_u16ActualPosition <= (uint16) (C_MAX_POS - g_u16MotorRewindSteps) )
    9172:	72da 00ff 	lod	A, #255
    9176:	aaee      	sub	A, X
    9178:	eee2      	cmp	Y, A
    917a:	1e14      	jug	0x91a4 <_MotorDriverStart+0x9e>
				{
					g_u16TargetPosition = g_u16ActualPosition + g_u16MotorRewindSteps;
    917c:	72e6      	lod	A, Y
    917e:	a2ee      	add	A, X
    9180:	51f2      	mov	dp:0xf2 <_g_u16TargetPosition>, A
					g_e8MotorDirectionCCW = FALSE;								/* MMP140331-3 */
    9182:	6000      	lod	AL, #0
    9184:	0006      	jmp	0x9192 <_MotorDriverStart+0x8c>
					g_u8RewindFlags = 0;										/* No rewind possible */
				}
			}
			else
			{
				if ( g_u16ActualPosition >= g_u16MotorRewindSteps )
    9186:	eeee      	cmp	Y, X
    9188:	180d      	jc	0x91a4 <_MotorDriverStart+0x9e>
				{
					g_u16TargetPosition = g_u16ActualPosition - g_u16MotorRewindSteps;
    918a:	72e6      	lod	A, Y
    918c:	aaee      	sub	A, X
    918e:	51f2      	mov	dp:0xf2 <_g_u16TargetPosition>, A
					g_e8MotorDirectionCCW = TRUE;								/* MMP140331-3 */
    9190:	6001      	lod	AL, #1
    9192:	412a      	mov	dp:0x2a <_g_e8MotorDirectionCCW>, AL
    9194:	0009      	jmp	0x91a8 <_MotorDriverStart+0xa2>
				{
					g_u8RewindFlags = 0;										/* No rewind possible */
				}
			}
		}
		else if ( (g_u8RewindFlags & (uint8) C_REWIND_DIRECTION_CCW) != g_e8MotorDirectionCCW ) /* MMP140331-1 - Begin */
    9196:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    9198:	7ae2      	lod	Y, A
    919a:	f401      	and	Y, #1
    919c:	612a      	lod	AL, dp:0x2a <_g_e8MotorDirectionCCW>
    919e:	5cf2      	usex	A
    91a0:	eee2      	cmp	Y, A
    91a2:	1902      	je	0x91a8 <_MotorDriverStart+0xa2>
		{
			g_u8RewindFlags = 0;												/* Clear previous detected stall flags */
    91a4:	6000      	lod	AL, #0
    91a6:	4124      	mov	dp:0x24 <__data_dp_size>, AL
		}																		/* MMP140331-1 - End */
	}

	g_u16ActuatorActPos = g_u16ActualPosition;
    91a8:	71f0      	lod	A, dp:0xf0 <_g_u16ActualPosition>
    91aa:	51f8      	mov	dp:0xf8 <_g_u16ActuatorActPos>, A
	g_u16ActuatorTgtPos = g_u16TargetPosition;
    91ac:	71f2      	lod	A, dp:0xf2 <_g_u16TargetPosition>
    91ae:	51fa      	mov	dp:0xfa <_g_u16ActuatorTgtPos>, A
	//g_u8StallOcc = FALSE; TODO,Ban
	//g_u8MechError = FALSE;

	/* Clear motor-driver current measurement */
	MotorDriverCurrentMeasureInit();
    91b0:	168e      	call	0x8ece <_MotorDriverCurrentMeasureInit>
#if _DEBUG_MOTOR_CURRENT_FLT
	l_u16MotorCurrIdx = 0;
#endif /* _DEBUG_MOTOR_CURRENT_FLT */

	g_u8MotorStartupMode = (uint8) MSM_STEPPER_A;								/* Start-up in Acceleration stepper mode */
    91b2:	6001      	lod	AL, #1
    91b4:	42d8 013f 	mov	0x13f <_g_u8MotorStartupMode>, AL
	/* (MMP140331-2) g_u16StartupDelay = NVRAM_STALL_DETECTOR_DELAY; */
	MotorStallInitA();
    91b8:	1288      	call	0x96ca <_MotorStallInitA>
#endif /* _SUPPORT_STALLDET_H */

#if _DEBUG_VOLTAGE_COMPENSATION
	u16MotorVoltIdx = 0;
#endif /* _DEBUG_VOLTAGE_COMPENSATION */
	l_u16CoilZeroCurrCountA = 0;
    91ba:	7000      	lod	A, #0
    91bc:	52d8 0138 	mov	0x138 <_l_u16CoilZeroCurrCountA>, A
	l_u16CoilZeroCurrCountB = 0;
    91c0:	52d8 0136 	mov	0x136 <_l_u16CoilZeroCurrCountB>, A
	l_u16CoilCurrentStartDelay = C_COIL_CURRENT_START_DELAY;
    91c4:	72da 0080 	lod	A, #128
    91c8:	52d8 0134 	mov	0x134 <_l_u16CoilCurrentStartDelay>, A

	/* Connect drivers */
	/* Stepper 4-phase/32-steps */

	{
		MotorDriver_InitialPwmDutyCycle( g_u16PidRunningThreshold, g_au16MotorSpeedRPS[1]);	/* MMP140822-1 - Begin */
    91cc:	72d8 0286 	lod	A, 0x286 <_g_au16MotorSpeedRPS+0x2>
    91d0:	52df      	push	A
    91d2:	72d8 0322 	lod	A, 0x322 <_g_u16PidRunningThreshold>
    91d6:	16e4      	call	0x8fa0 <_MotorDriver_InitialPwmDutyCycle>
	}
	MotorDriver_4PhaseStepper();
    91d8:	1733      	call	0x9040 <_MotorDriver_4PhaseStepper>
#if (_SUPPORT_PWM_DC_RAMPUP == FALSE)											/* MMP140903-2 - Begin */
	if ( g_u16MotorSpeedRPS > g_au16MotorSpeedRPS[1] )
    91da:	72d8 026c 	lod	A, 0x26c <_g_u16MotorSpeedRPS>
    91de:	5c01      	dec	S, #2
    91e0:	aed8 0286 	cmp	A, 0x286 <_g_au16MotorSpeedRPS+0x2>
    91e4:	1a05      	jule	0x91f0 <_MotorDriverStart+0xea>
	{
		MotorDriver_InitialPwmDutyCycle( g_u16PidRunningThreshold, g_u16MotorSpeedRPS);
    91e6:	52df      	push	A
    91e8:	72d8 0322 	lod	A, 0x322 <_g_u16PidRunningThreshold>
    91ec:	16d9      	call	0x8fa0 <_MotorDriver_InitialPwmDutyCycle>
    91ee:	5c01      	dec	S, #2
	}																			/* MMP140822-1 - End */
#endif /* (_SUPPORT_PWM_DC_RAMPUP == FALSE) */									/* MMP140903-2 - End */
	DRVCFG_PWM_UVWT();															/* Enable the driver and the PWM phase W, V, U and T */
    91f0:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    91f4:	b6da fe00 	and	A, #65024
    91f8:	a455      	or	A, #85
    91fa:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A
	g_u8MotorHoldingCurrState = FALSE;
    91fe:	6000      	lod	AL, #0
    9200:	42d8 013e 	mov	0x13e <_g_u8MotorHoldingCurrState>, AL

	/* Setup ADC for Motor Current/Voltage measurements */
#if _SUPPORT_PHASE_SHORT_DET
	ADC_Start( 0);
#else  /* _SUPPORT_PHASE_SHORT_DET */
	ADC_Start();
    9204:	82db 85ac 	callf	0x85ac <_ADC_Start>
#endif /* _SUPPORT_PHASE_SHORT_DET */

	l_u8VTIdx = 0;
    9208:	6000      	lod	AL, #0
    920a:	4136      	mov	dp:0x36 <_l_u8VTIdx>, AL
	if ( g_u8MotorStartupMode == (uint8) MSM_STEPPER_A )
    920c:	62d8 013f 	lod	AL, 0x13f <_g_u8MotorStartupMode>
    9210:	8c01      	cmp	AL, #1
    9212:	1d08      	jne	0x9224 <_MotorDriverStart+0x11e>
	{
		if ( g_u16TargetCommutTimerPeriod < l_u16LowSpeedPeriod )
    9214:	7954      	lod	Y, dp:0x54 <_g_u16TargetCommutTimerPeriod>
    9216:	72d8 031c 	lod	A, 0x31c <_l_u16LowSpeedPeriod>
    921a:	eee2      	cmp	Y, A
    921c:	1c02      	jnc	0x9222 <_MotorDriverStart+0x11c>
		{
			/* Target speed too fast for motor to start-up with */
			g_u16CommutTimerPeriod = l_u16LowSpeedPeriod;						/* Initial start-up speed */
    921e:	5152      	mov	dp:0x52 <_g_u16CommutTimerPeriod>, A
    9220:	0001      	jmp	0x9224 <_MotorDriverStart+0x11e>
		}
		else
		{
			/* Target speed is slower than maximum motor start-up speed */
			g_u16CommutTimerPeriod = g_u16TargetCommutTimerPeriod;
    9222:	5952      	mov	dp:0x52 <_g_u16CommutTimerPeriod>, Y
		}
	}
	TMR1_REGB = g_u16CommutTimerPeriod;
    9224:	7152      	lod	A, dp:0x52 <_g_u16CommutTimerPeriod>
    9226:	52ac      	mov	io:0x2c <_g_e8ErrorCoil>, A
	TMR1_CTRL = C_TMRx_CTRL_MODE0 | TMRx_START;									/* Start Timer mode 0 */
    9228:	72da 4003 	lod	A, #16387
    922c:	52aa      	mov	io:0x2a <_g_e8MotorDirectionCCW>, A
	g_e8MotorStatusMode = (uint8) C_MOTOR_STATUS_RUNNING;
    922e:	6001      	lod	AL, #1
    9230:	41ed      	mov	dp:0xed <_g_e8MotorStatusMode>, AL
	g_u8MotorStopDelay = 0;
    9232:	6000      	lod	AL, #0
    9234:	4137      	mov	dp:0x37 <_g_u8MotorStopDelay>, AL

	if ( (g_u8RewindFlags & (uint8) (C_REWIND_ACTIVE | C_REWIND_REWIND)) == (uint8) C_REWIND_ACTIVE )
    9236:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    9238:	b428      	and	A, #40
    923a:	ac08      	cmp	A, #8
    923c:	1d03      	jne	0x9244 <_MotorDriverStart+0x13e>
	{
		g_u8RewindFlags &= (uint8) ~C_REWIND_ACTIVE;							/* Rewind-function is finished */
    923e:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    9240:	94f7      	and	AL, #-9
    9242:	4124      	mov	dp:0x24 <__data_dp_size>, AL
    9244:	5403      	ret	#4

00009246 <_MotorDriverStop>:
 *						C_STOP_EMERGENCY : Immediate stop (without ramp-down) + delay
 *
 * Stop Motor Driver
 * ****************************************************************************	*/
void MotorDriverStop( uint16 u16Immediate)
{
    9246:	5803      	inc	S, #4
    9248:	5203      	mov	[S-4], A
	if ( (g_e8MotorStatusMode & (uint8) ~C_MOTOR_STATUS_DEGRADED) != (uint8) C_MOTOR_STATUS_STOP )
    924a:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    924c:	b47f      	and	A, #127
    924e:	1d01      	jne	0x9252 <_MotorDriverStop+0xc>
    9250:	0045      	jmp	0x92dc <_MotorDriverStop+0x96>
	{
		/* Not STOP status */
		if ( (u16Immediate == (uint16) C_STOP_RAMPDOWN) && (l_u8VTIdx > 1) ) /*lint !e845 */	/* MMP150922-1 */
    9252:	7203      	lod	A, [S-4]
    9254:	1901      	je	0x9258 <_MotorDriverStop+0x12>
    9256:	0034      	jmp	0x92c0 <_MotorDriverStop+0x7a>
    9258:	6136      	lod	AL, dp:0x36 <_l_u8VTIdx>
    925a:	4201      	mov	[S-2], AL
    925c:	8c01      	cmp	AL, #1
    925e:	1e01      	jug	0x9262 <_MotorDriverStop+0x1c>
    9260:	003a      	jmp	0x92d6 <_MotorDriverStop+0x90>
		{
			TMR1_CTRL = C_TMRx_CTRL_MODE0 | TMRx_START;							/* Start timer mode 0 */
    9262:	72da 4003 	lod	A, #16387
    9266:	52aa      	mov	io:0x2a <_g_e8MotorDirectionCCW>, A

			/* Request to ramp-down */
			if ( (g_e8MotorStatusMode & (uint8) ~C_MOTOR_STATUS_DEGRADED) == (uint8) C_MOTOR_STATUS_STOPPING )
    9268:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    926a:	b47f      	and	A, #127
    926c:	ac09      	cmp	A, #9
    926e:	1d02      	jne	0x9274 <_MotorDriverStop+0x2e>
			{
				/* Already stopping */
				g_u8MotorStartDelay = (uint8) C_PI_TICKS_10MS;					/* Motor status change to STOP soon */
    9270:	6014      	lod	AL, #20
    9272:	0023      	jmp	0x92ba <_MotorDriverStop+0x74>
				return;
			}

			/* Set TargetPos near CurrentPos, including ramp-down */
			{
				if ( g_u16ActuatorActPos > g_u16ActuatorTgtPos )
    9274:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    9276:	79fa      	lod	Y, dp:0xfa <_g_u16ActuatorTgtPos>
    9278:	aee6      	cmp	A, Y
    927a:	1a0d      	jule	0x9296 <_MotorDriverStop+0x50>
				{
					uint32 u32DeltaPos = g_u16ActuatorActPos - g_u16ActuatorTgtPos;
    927c:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    927e:	aae6      	sub	A, Y
    9280:	4cc8      	movu	D, A
					if ( u32DeltaPos > l_u8VTIdx )
    9282:	6201      	lod	AL, [S-2]
    9284:	5cf2      	usex	A
    9286:	4cf2      	usex	YA
    9288:	4c90      	cmp	D, YA
    928a:	1a12      	jule	0x92b0 <_MotorDriverStop+0x6a>
					{
						g_u16ActuatorTgtPos = g_u16ActuatorActPos - l_u8VTIdx;
    928c:	6601      	lod	YL, [S-2]
    928e:	5cf6      	usex	Y
    9290:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    9292:	aae6      	sub	A, Y
    9294:	000c      	jmp	0x92ae <_MotorDriverStop+0x68>
					}
				}
				else
				{
					uint32 u32DeltaPos = g_u16ActuatorTgtPos - g_u16ActuatorActPos;
    9296:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    9298:	eae2      	sub	Y, A
    929a:	4cc9      	movu	D, Y
					if ( u32DeltaPos > l_u8VTIdx )
    929c:	6201      	lod	AL, [S-2]
    929e:	5cf2      	usex	A
    92a0:	4cf2      	usex	YA
    92a2:	4c90      	cmp	D, YA
    92a4:	1a05      	jule	0x92b0 <_MotorDriverStop+0x6a>
					{
						g_u16ActuatorTgtPos = g_u16ActuatorActPos + l_u8VTIdx;
    92a6:	6601      	lod	YL, [S-2]
    92a8:	5cf6      	usex	Y
    92aa:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    92ac:	a2e6      	add	A, Y
    92ae:	51fa      	mov	dp:0xfa <_g_u16ActuatorTgtPos>, A
					}
				}
			}

			g_e8MotorStatusMode = ((g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_DEGRADED) | (uint8) C_MOTOR_STATUS_STOPPING);
    92b0:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    92b2:	9480      	and	AL, #-128
    92b4:	8409      	or	AL, #9
    92b6:	41ed      	mov	dp:0xed <_g_e8MotorStatusMode>, AL
			g_u8MotorStartDelay = (uint8) C_PI_TICKS_20MS;						/* Motor status change to STOP when ramp-down is finished */
    92b8:	6028      	lod	AL, #40
    92ba:	42d8 010c 	mov	0x10c <_g_u8MotorStartDelay>, AL
			return;
    92be:	5405      	ret	#6
		}
		else if ( u16Immediate == (uint16) C_STOP_EMERGENCY )
    92c0:	7203      	lod	A, [S-4]
    92c2:	ac02      	cmp	A, #2
    92c4:	1d08      	jne	0x92d6 <_MotorDriverStop+0x90>
		{
			g_u8MotorStartDelay = (uint8) C_PI_TICKS_10MS;						/* Wait 10 (up to 20 ms) before continue */
    92c6:	6014      	lod	AL, #20
    92c8:	42d8 010c 	mov	0x10c <_g_u8MotorStartDelay>, AL
			if ( g_u8MotorStatusSpeed > (uint8) C_MOTOR_SPEED_MID )
    92cc:	611e      	lod	AL, dp:0x1e <__ramfunc_size>
    92ce:	8c03      	cmp	AL, #3
    92d0:	1a05      	jule	0x92dc <_MotorDriverStop+0x96>
			{
				g_u8MotorStartDelay = (uint8) C_PI_TICKS_20MS;
    92d2:	6028      	lod	AL, #40
    92d4:	0001      	jmp	0x92d8 <_MotorDriverStop+0x92>
			}
		}
		else
		{
			g_u8MotorStartDelay = 0;
    92d6:	6000      	lod	AL, #0
    92d8:	42d8 010c 	mov	0x10c <_g_u8MotorStartDelay>, AL
		}
	}

	/* Re-stall code */
	if ( (g_u8StallOcc != FALSE) && ((g_u8RewindFlags & (uint8) C_REWIND_ACTIVE) == 0) )
    92dc:	6128      	lod	AL, dp:0x28 <_g_u8StallOcc>
    92de:	1d01      	jne	0x92e2 <_MotorDriverStop+0x9c>
    92e0:	002d      	jmp	0x933c <_MotorDriverStop+0xf6>
    92e2:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    92e4:	b408      	and	A, #8
    92e6:	1d2a      	jne	0x933c <_MotorDriverStop+0xf6>
	{
		/* 'Restore' actual-position in case of re-stall without rewind; MMP140331-4 - Begin */
		if ( (NVRAM_REWIND_STEPS == 0) && ((g_u8RewindFlags & (uint8) C_REWIND_STALL_DETECT) != 0) )
    92e8:	61c2      	lod	AL, dp:0xc2 <__bss_dp_size+0x12>
    92ea:	1d1d      	jne	0x9326 <_MotorDriverStop+0xe0>
    92ec:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    92ee:	b402      	and	A, #2
    92f0:	191a      	je	0x9326 <_MotorDriverStop+0xe0>
		{
			/* Stall detected before (no rewind support) */
			if ( g_e8MotorDirectionCCW )
    92f2:	612a      	lod	AL, dp:0x2a <_g_e8MotorDirectionCCW>
    92f4:	1908      	je	0x9306 <_MotorDriverStop+0xc0>
			{
				if ( (g_u8RewindFlags & (uint8) C_REWIND_DIRECTION_CCW) != 0 )
    92f6:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    92f8:	b401      	and	A, #1
    92fa:	1915      	je	0x9326 <_MotorDriverStop+0xe0>
				{
					/* Stall in same direction; 'Restore' actual-position */
					g_u16ActuatorActPos += (l_u16StartupDelayInit + (C_MICROSTEP_PER_FULLSTEP << NVRAM_STALL_O_OFFSET));		/* MMP140428-1 */
    92fc:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    92fe:	a2d8 013a 	add	A, 0x13a <_l_u16StartupDelayInit>
    9302:	a020      	add	A, #32
    9304:	000f      	jmp	0x9324 <_MotorDriverStop+0xde>
				}
			}
			else
			{
				if ( (g_u8RewindFlags & (uint8) C_REWIND_DIRECTION_CCW) == 0 )
    9306:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    9308:	b401      	and	A, #1
    930a:	1d0d      	jne	0x9326 <_MotorDriverStop+0xe0>
				{
					/* Stall in same direction; 'Restore' actual-position */
					if ( g_u16ActuatorActPos > (l_u16StartupDelayInit + (C_MICROSTEP_PER_FULLSTEP << NVRAM_STALL_O_OFFSET)) )	/* MMP140428-1 */
    930c:	7ed8 013a 	lod	X, 0x13a <_l_u16StartupDelayInit>
    9310:	7aee      	lod	Y, X
    9312:	e020      	add	Y, #32
    9314:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    9316:	aee6      	cmp	A, Y
    9318:	1a04      	jule	0x9322 <_MotorDriverStop+0xdc>
					{
						g_u16ActuatorActPos -= (l_u16StartupDelayInit + (C_MICROSTEP_PER_FULLSTEP << NVRAM_STALL_O_OFFSET));	/* MMP140428-1 */
    931a:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    931c:	aaee      	sub	A, X
    931e:	a0e0      	add	A, #-32
    9320:	0001      	jmp	0x9324 <_MotorDriverStop+0xde>
					}
					else
					{
						g_u16ActuatorActPos = 0;
    9322:	7000      	lod	A, #0
    9324:	51f8      	mov	dp:0xf8 <_g_u16ActuatorActPos>, A
				}
			}
		}																		/* MMP140331-4 - End */

		/* Set re-wind active */
		g_u8RewindFlags |= (uint8) C_REWIND_STALL_DETECT;
    9326:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    9328:	8402      	or	AL, #2
    932a:	4124      	mov	dp:0x24 <__data_dp_size>, AL
		if ( g_e8MotorDirectionCCW )
    932c:	612a      	lod	AL, dp:0x2a <_g_e8MotorDirectionCCW>
    932e:	1903      	je	0x9336 <_MotorDriverStop+0xf0>
		{
			g_u8RewindFlags |= (uint8) C_REWIND_DIRECTION_CCW;
    9330:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    9332:	8401      	or	AL, #1
    9334:	0002      	jmp	0x933a <_MotorDriverStop+0xf4>
		}
		else
		{
			g_u8RewindFlags &= (uint8) ~C_REWIND_DIRECTION_CCW;
    9336:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    9338:	94fe      	and	AL, #-2
    933a:	4124      	mov	dp:0x24 <__data_dp_size>, AL
		}
	}

	/* First stop ADC, before stopping motor (trigger-event) */
	ADC_Stop();
    933c:	82db 8534 	callf	0x8534 <_ADC_Stop>
	g_u8MotorStartupMode = (uint8) MSM_STOP;									/* Stop mode */
    9340:	6000      	lod	AL, #0
    9342:	42d8 013f 	mov	0x13f <_g_u8MotorStartupMode>, AL
	g_e8MotorStatusMode = ((g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_DEGRADED) | (uint8) C_MOTOR_STATUS_STOP);
    9346:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    9348:	9480      	and	AL, #-128
    934a:	41ed      	mov	dp:0xed <_g_e8MotorStatusMode>, AL
	if ( bistResetInfo != C_CHIP_STATE_WATCHDOG_RESET )
    934c:	72d8 0338 	lod	A, 0x338 <_bistResetInfo>
    9350:	aeda 5c92 	cmp	A, #23698
    9354:	1902      	je	0x935a <_MotorDriverStop+0x114>
	{
		/* make target-position same as actual position, except in case of WD-reset */
		g_u16ActuatorTgtPos = g_u16ActuatorActPos;							/* Stop: Target = Actual */
    9356:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    9358:	51fa      	mov	dp:0xfa <_g_u16ActuatorTgtPos>, A
	}
	g_u16ActualPosition = g_u16ActuatorActPos;
    935a:	79f8      	lod	Y, dp:0xf8 <_g_u16ActuatorActPos>
    935c:	59f0      	mov	dp:0xf0 <_g_u16ActualPosition>, Y
	g_u8MotorStatusSpeed = (uint8) C_MOTOR_SPEED_STOP;							/* Stop */
    935e:	6000      	lod	AL, #0
    9360:	411e      	mov	dp:0x1e <__ramfunc_size>, AL

#if (LINPROT == LIN2J_VALVE_GM)
	if ( g_e8CalibrationStep == (uint8) C_CALIB_DONE )
    9362:	611d      	lod	AL, dp:0x1d <_g_e8CalibrationStep>
    9364:	8c0a      	cmp	AL, #10
    9366:	1d16      	jne	0x9394 <_MotorDriverStop+0x14e>
	{
		/* Check for mechanical defect (1 = calculation rounding) */
		if ( (g_u16ActualPosition <= 1) || (g_u16ActualPosition >= ((g_u16CalibTravel + (2*C_PERC_OFFSET)) - 1)) )
    9368:	ec01      	cmp	Y, #1
    936a:	1a04      	jule	0x9374 <_MotorDriverStop+0x12e>
    936c:	71f6      	lod	A, dp:0xf6 <_g_u16CalibTravel>
    936e:	a01f      	add	A, #31
    9370:	eee2      	cmp	Y, A
    9372:	1803      	jc	0x937a <_MotorDriverStop+0x134>
		{
			g_u8MechError = TRUE;
    9374:	6001      	lod	AL, #1
    9376:	42d8 0107 	mov	0x107 <_g_u8MechError>, AL
		}

		/* Round actual position */
		if ( g_u16ActualPosition < (C_PERC_OFFSET + C_HALFPERC_OFFSET) )
    937a:	7df0      	lod	X, dp:0xf0 <_g_u16ActualPosition>
    937c:	2c10      	cmp	X, #16
    937e:	1e02      	jug	0x9384 <_MotorDriverStop+0x13e>
		{
			g_u16ActualPosition = C_PERC_OFFSET;
    9380:	7010      	lod	A, #16
    9382:	0007      	jmp	0x9392 <_MotorDriverStop+0x14c>
		}
		else if ( g_u16ActualPosition > ((g_u16CalibTravel + C_PERC_OFFSET) - C_HALFPERC_OFFSET) )
    9384:	79f6      	lod	Y, dp:0xf6 <_g_u16CalibTravel>
    9386:	72e6      	lod	A, Y
    9388:	a00f      	add	A, #15
    938a:	2ee2      	cmp	X, A
    938c:	1a03      	jule	0x9394 <_MotorDriverStop+0x14e>
		{
			g_u16ActualPosition = (g_u16CalibTravel + C_PERC_OFFSET);
    938e:	72e6      	lod	A, Y
    9390:	a010      	add	A, #16
    9392:	51f0      	mov	dp:0xf0 <_g_u16ActualPosition>, A
		}
	}
#endif /* (LINPROT == LIN2J_VALVE_GM) */


	if ( (g_u8MotorHoldingCurrEna != FALSE) &&									/* Holding mode enabled */
    9394:	61ef      	lod	AL, dp:0xef <_g_u8MotorHoldingCurrEna>
    9396:	1922      	je	0x93dc <_MotorDriverStop+0x196>
    9398:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    939a:	8c02      	cmp	AL, #2
    939c:	191f      	je	0x93dc <_MotorDriverStop+0x196>
    939e:	612b      	lod	AL, dp:0x2b <_g_e8ErrorVoltage>
    93a0:	1d1d      	jne	0x93dc <_MotorDriverStop+0x196>
    93a2:	7203      	lod	A, [S-4]
    93a4:	ac03      	cmp	A, #3
    93a6:	191a      	je	0x93dc <_MotorDriverStop+0x196>
		(g_e8ErrorElectric != (uint8) C_ERR_ELECTRIC_PERM) && (g_e8ErrorVoltage == (uint8) C_ERR_VOLTAGE_IN_RANGE) && (u16Immediate != (uint16) C_STOP_SLEEP) ) /*lint !e845 */
	{
		/* Keep Motor driver active with a specified amount of current (unless permanent electric error) */
		MotorDriver_InitialPwmDutyCycle( g_u16PidHoldingThreshold, 0);
    93a8:	54ca 0000 	pushw	#0
    93ac:	72d8 0326 	lod	A, 0x326 <_g_u16PidHoldingThreshold>
    93b0:	15f7      	call	0x8fa0 <_MotorDriver_InitialPwmDutyCycle>
	
		MotorDriver_4PhaseStepper();
    93b2:	1646      	call	0x9040 <_MotorDriver_4PhaseStepper>
		DRVCFG_PWM_UVWT();														/* Enable the driver and the PWM phase W, V and U */
    93b4:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    93b8:	b6da fe00 	and	A, #65024
    93bc:	a455      	or	A, #85
    93be:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A
		g_u8MotorHoldingCurrState = TRUE;
    93c2:	6001      	lod	AL, #1
    93c4:	42d8 013e 	mov	0x13e <_g_u8MotorHoldingCurrState>, AL

		g_u16MotorCurrentLPFx64 = (g_u16PidHoldingThreshold << 6);				/* Low-pass Filtered motor-current (x 64) */
    93c8:	72d8 0326 	lod	A, 0x326 <_g_u16PidHoldingThreshold>
    93cc:	44a2      	asl	A, #2
    93ce:	44a2      	asl	A, #2
    93d0:	44a2      	asl	A, #2
    93d2:	5158      	mov	dp:0x58 <_g_u16MotorCurrentLPFx64>, A
#if _SUPPORT_PHASE_SHORT_DET
		ADC_Start( 0);															/* Start measuring motor current */
#else  /* _SUPPORT_PHASE_SHORT_DET */
		ADC_Start();
    93d4:	82db 85ac 	callf	0x85ac <_ADC_Start>
    93d8:	5c01      	dec	S, #2
    93da:	0025      	jmp	0x9426 <_MotorDriverStop+0x1e0>
#endif /* _SUPPORT_PHASE_SHORT_DET */
	}
	else
	{
		/* Disconnect drivers */
		if ( g_e8ErrorElectric != (uint8) C_ERR_ELECTRIC_PERM )					/* MMP130919-1 - Begin */
    93dc:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    93de:	8c02      	cmp	AL, #2
    93e0:	1911      	je	0x9404 <_MotorDriverStop+0x1be>
		{
			if ( g_e8ErrorElectric != (uint8) C_ERR_ELECTRIC_YES )				/* MMP150217-1 - Begin */
    93e2:	612d      	lod	AL, dp:0x2d <_g_e8ErrorElectric>
    93e4:	8c01      	cmp	AL, #1
    93e6:	1907      	je	0x93f6 <_MotorDriverStop+0x1b0>
			{
				DRVCFG_GND_UVWT();												/* Make Low-side active, for a short time (recycle current) */
    93e8:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    93ec:	b6da fe00 	and	A, #65024
    93f0:	a6da 00aa 	or	A, #170
    93f4:	0011      	jmp	0x9418 <_MotorDriverStop+0x1d2>
			}
			else
			{
				DRVCFG_VSUP_UVWT();												/* Make High-side active, for a short time (recycle current) */
    93f6:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    93fa:	b6da fe00 	and	A, #65024
    93fe:	a6da 00ff 	or	A, #255
    9402:	000a      	jmp	0x9418 <_MotorDriverStop+0x1d2>
			}																	/* MMP150217-1 - End */
		}
		else
		{
			/* In case of a permanent error, don't connect drivers anymore */
			DRVCFG_DIS_UVWT();
    9404:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    9408:	b6da fe00 	and	A, #65024
    940c:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A
			DRVCFG_DIS();														/* MMP140903-1 */
    9410:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    9414:	a6da 0100 	or	A, #256
    9418:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A
		}																		/* MMP130919-1 - End */
		g_u8MotorHoldingCurrState = FALSE;
    941c:	6000      	lod	AL, #0
    941e:	42d8 013e 	mov	0x13e <_g_u8MotorHoldingCurrState>, AL

		g_u8MotorStopDelay = 200;												/* 200x 0.5ms = 100ms delay before driver is disconnected */
    9422:	60c8      	lod	AL, #-56
    9424:	4137      	mov	dp:0x37 <_g_u8MotorStopDelay>, AL
	}

	TMR1_CTRL &= ~TMRx_START;													/* Stop "commutation timer" */
    9426:	72aa      	lod	A, io:0x2a <_g_e8MotorDirectionCCW>
    9428:	b4fd      	and	A, #-3
    942a:	52aa      	mov	io:0x2a <_g_e8MotorDirectionCCW>, A
	XI0_PEND = CLR_T1_INT4;														/* Clear (potentially pending) Timer1 second level interrupts (T1_INT4) */
    942c:	7040      	lod	A, #64
    942e:	52d8 2034 	mov	0x2034 <__ep__+0x1034>, A
	PEND = CLR_EXT0_IT;															/* ... and first level interrupt */
    9432:	72da 0100 	lod	A, #256
    9436:	52d8 2008 	mov	0x2008 <__ep__+0x1008>, A
#if USE_MULTI_PURPOSE_BUFFER
	g_MPBuf.u8Usage = (uint8) C_MP_BUF_FREE;									/* Motor-stopped: Multi-purpose buffer is free for others */
    943a:	6000      	lod	AL, #0
    943c:	42d8 0155 	mov	0x155 <_g_MPBuf+0x1>, AL
#endif /* USE_MULTI_PURPOSE_BUFFER */

	/* Re-stall code */
	if ( (g_u8RewindFlags & (uint8) (C_REWIND_ACTIVE | C_REWIND_REWIND)) == (uint8) (C_REWIND_ACTIVE | C_REWIND_REWIND) )
    9440:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    9442:	b428      	and	A, #40
    9444:	ac28      	cmp	A, #40
    9446:	1d19      	jne	0x947a <_MotorDriverStop+0x234>
	{
		g_u8RewindFlags &= (uint8) ~C_REWIND_REWIND;							/* Rewinding of the Rewind-function is finished */
    9448:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    944a:	94df      	and	AL, #-33
    944c:	4124      	mov	dp:0x24 <__data_dp_size>, AL
		g_u16TargetPosition = g_u16TargetPositionRewind;
    944e:	72d8 0152 	lod	A, 0x152 <__data_end>
    9452:	51f2      	mov	dp:0xf2 <_g_u16TargetPosition>, A
		g_u8MotorStopDelay = 0;													/* Cancel stop delay */
    9454:	6000      	lod	AL, #0
    9456:	4137      	mov	dp:0x37 <_g_u8MotorStopDelay>, AL
		if ( g_e8MotorRequest == (uint8) C_MOTOR_REQUEST_CALIBRATION )
    9458:	652e      	lod	YL, dp:0x2e <_g_e8MotorRequest>
    945a:	62e8      	lod	AL, YL
    945c:	8c05      	cmp	AL, #5
    945e:	1d0a      	jne	0x9474 <_MotorDriverStop+0x22e>
		{
			if ( g_e8CalibrationStep == (uint8) C_CALIB_CHECK_HI_ENDPOS )
    9460:	611d      	lod	AL, dp:0x1d <_g_e8CalibrationStep>
    9462:	8c03      	cmp	AL, #3
    9464:	1d03      	jne	0x946c <_MotorDriverStop+0x226>
				g_e8CalibrationStep = C_CALIB_SETUP_HI_ENDPOS;
    9466:	6002      	lod	AL, #2
    9468:	411d      	mov	dp:0x1d <_g_e8CalibrationStep>, AL
    946a:	5405      	ret	#6
			else if ( g_e8CalibrationStep == (uint8) C_CALIB_CHECK_LO_ENDPOS )
    946c:	8c06      	cmp	AL, #6
    946e:	1d09      	jne	0x9482 <_MotorDriverStop+0x23c>
				g_e8CalibrationStep = C_CALIB_SETUP_LO_ENDPOS;
    9470:	451d      	mov	dp:0x1d <_g_e8CalibrationStep>, YL
    9472:	5405      	ret	#6
		}
		else
			g_e8MotorRequest = (uint8) C_MOTOR_REQUEST_START;
    9474:	6003      	lod	AL, #3
    9476:	412e      	mov	dp:0x2e <_g_e8MotorRequest>, AL
    9478:	5405      	ret	#6
	}
	else if ( (g_u8RewindFlags & (uint8) C_REWIND_STALL_DETECT) == 0 )
    947a:	6124      	lod	AL, dp:0x24 <__data_dp_size>
    947c:	b402      	and	A, #2
    947e:	1d01      	jne	0x9482 <_MotorDriverStop+0x23c>
	{
		g_u8RewindFlags = 0;													/* Clear all other flags in case no STALL have been detected */
    9480:	4124      	mov	dp:0x24 <__data_dp_size>, AL
    9482:	5405      	ret	#6

00009484 <_EXT0_IT>:
 * The g_u8StallOcc flags can be set in this Commutation_ISR(), but cleared in the MotorDriverStop(),
 * before it is communicated back to the ECU/Master.
 * ****************************************************************************	*/
#define Commutation_ISR	EXT0_IT
__interrupt__ void Commutation_ISR(void)
{
    9484:	52df      	push	A
    9486:	5edf      	push	X
    9488:	5adf      	push	Y
    948a:	4c83      	push	D
    948c:	5811      	inc	S, #18
#if (_DEBUG_COMMUT_ISR != FALSE)
	DEBUG_SET_IO_B();
#endif /* (_DEBUG_COMMUT_ISR != FALSE) && (_DEBUG_HALLLATCH_ISR == FALSE) */

	uint16 pending = XI0_PEND & XI0_MASK;										/* Copy interrupt requests which are not masked   */
    948e:	7ad8 2034 	lod	Y, 0x2034 <__ep__+0x1034>
    9492:	72d8 202a 	lod	A, 0x202a <__ep__+0x102a>
    9496:	f6e2      	and	Y, A
	do
	{
		XI0_PEND = pending;														/* Clear requests which are going to be processed */
    9498:	5ad8 2034 	mov	0x2034 <__ep__+0x1034>, Y
	} while (XI0_PEND & pending);
    949c:	72d8 2034 	lod	A, 0x2034 <__ep__+0x1034>
    94a0:	b6e6      	and	A, Y
    94a2:	1d7a      	jne	0x9498 <_EXT0_IT+0x14>

	if ( (g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING) == 0 )
    94a4:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    94a6:	b401      	and	A, #1
    94a8:	1d01      	jne	0x94ac <_EXT0_IT+0x28>
    94aa:	0107      	jmp	0x96ba <_EXT0_IT+0x236>
	{
		return;		/* Used for CPU wake-up */
	}

	if ( g_e8MotorDirectionCCW )
    94ac:	612a      	lod	AL, dp:0x2a <_g_e8MotorDirectionCCW>
    94ae:	1903      	je	0x94b6 <_EXT0_IT+0x32>
	{
		g_u16ActuatorActPos--;													/* Closing */
    94b0:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    94b2:	a0ff      	add	A, #-1
    94b4:	0002      	jmp	0x94ba <_EXT0_IT+0x36>
	}
	else
	{
		g_u16ActuatorActPos++;													/* Opening */
    94b6:	71f8      	lod	A, dp:0xf8 <_g_u16ActuatorActPos>
    94b8:	a001      	add	A, #1
    94ba:	51f8      	mov	dp:0xf8 <_g_u16ActuatorActPos>, A
	}

	{
		int32 i32DeltaPosition = (int32)g_u16ActuatorActPos - (int32)g_u16ActuatorTgtPos;
    94bc:	7df8      	lod	X, dp:0xf8 <_g_u16ActuatorActPos>
    94be:	4ceb      	movu	YA, X
    94c0:	a9fa      	sub	A, dp:0xfa <_g_u16ActuatorTgtPos>
    94c2:	f800      	subc	Y, #0
    94c4:	5211      	mov	[S-18], A
    94c6:	5a0f      	mov	[S-16], Y
		if ( i32DeltaPosition == 0 )
    94c8:	4cb2 0000 	cmp	YA, #0
    94cc:	0000 
    94ce:	1d0a      	jne	0x94e4 <_EXT0_IT+0x60>
		{
			MotorDriverStop( (uint16) C_STOP_IMMEDIATE);
    94d0:	7001      	lod	A, #1
    94d2:	16b9      	call	0x9246 <_MotorDriverStop>
			return;
    94d4:	5c11      	dec	S, #18
    94d6:	4cc3      	pop	D
    94d8:	7acf      	pop	Y
    94da:	7ecf      	pop	X
    94dc:	72cf      	pop	A
    94de:	4407      	mov	R, #0
    94e0:	72cb      	pop	M
    94e2:	5401      	ret
		}
		if ( i32DeltaPosition < 0 )
    94e4:	7211      	lod	A, [S-18]
    94e6:	7a0f      	lod	Y, [S-16]
    94e8:	4cb2 0000 	cmp	YA, #0
    94ec:	0000 
    94ee:	1e83      	jsge	0x94f6 <_EXT0_IT+0x72>
		{
			i32DeltaPosition = -i32DeltaPosition;
    94f0:	4cf0      	neg	YA
    94f2:	5211      	mov	[S-18], A
    94f4:	5a0f      	mov	[S-16], Y
		}
		if ( i32DeltaPosition <= (int16) l_u8VTIdx )
    94f6:	6536      	lod	YL, dp:0x36 <_l_u8VTIdx>
    94f8:	5cf6      	usex	Y
    94fa:	5a07      	mov	[S-8], Y
    94fc:	7207      	lod	A, [S-8]
    94fe:	7800      	lod	Y, #0
    9500:	5207      	mov	[S-8], A
    9502:	5a05      	mov	[S-6], Y
    9504:	72ef      	lod	A, S
    9506:	a0ee      	add	A, #-18
    9508:	4cf3      	swap	YA
    950a:	4cc5      	mov	D, [Y]
    950c:	7207      	lod	A, [S-8]
    950e:	7a05      	lod	Y, [S-6]
    9510:	4c90      	cmp	D, YA
    9512:	1f08      	jsg	0x9524 <_EXT0_IT+0xa0>
		{
			/* Decelerate motor speed (almost at target-position) */
			g_u16StartupDelay = (uint16) i32DeltaPosition;
    9514:	7a11      	lod	Y, [S-18]
    9516:	5938      	mov	dp:0x38 <_g_u16StartupDelay>, Y
			g_u16TargetCommutTimerPeriod = l_u16LowSpeedPeriod;
    9518:	7ed8 031c 	lod	X, 0x31c <_l_u16LowSpeedPeriod>
    951c:	5d54      	mov	dp:0x54 <_g_u16TargetCommutTimerPeriod>, X
			g_e8MotorStatusMode |= (uint8) C_MOTOR_STATUS_STOPPING;
    951e:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    9520:	8409      	or	AL, #9
    9522:	41ed      	mov	dp:0xed <_g_e8MotorStatusMode>, AL
		}
	}

	/* Current measurement used for Stall-detector "A" and current control (PID) */
	MotorDriverCurrentMeasure();
    9524:	14fe      	call	0x8f22 <_MotorDriverCurrentMeasure>
	/* Coil current check */
	if(l_u16CoilCurrentStartDelay == 0)
    9526:	72d8 0134 	lod	A, 0x134 <_l_u16CoilCurrentStartDelay>
    952a:	1901      	je	0x952e <_EXT0_IT+0xaa>
    952c:	0041      	jmp	0x95b0 <_EXT0_IT+0x12c>
	{
		if(g_u16CurrentMotorCoilA < (l_u16CurrentZeroOffset + C_MIN_COIL_CURRENT))
    952e:	7ad8 012e 	lod	Y, 0x12e <_l_u16CurrentZeroOffset>
    9532:	72e6      	lod	A, Y
    9534:	a00a      	add	A, #10
    9536:	5207      	mov	[S-8], A
    9538:	7ed8 0138 	lod	X, 0x138 <_l_u16CoilZeroCurrCountA>
    953c:	72d8 0128 	lod	A, 0x128 <_g_u16CurrentMotorCoilB>
    9540:	5209      	mov	[S-10], A
    9542:	7207      	lod	A, [S-8]
    9544:	aed8 012a 	cmp	A, 0x12a <_g_u16CurrentMotorCoilA>
    9548:	1a03      	jule	0x9550 <_EXT0_IT+0xcc>
		{
			l_u16CoilZeroCurrCountA++;
    954a:	72ee      	lod	A, X
    954c:	a001      	add	A, #1
    954e:	0004      	jmp	0x9558 <_EXT0_IT+0xd4>
		}
		else if ( l_u16CoilZeroCurrCountA != 0 )
    9550:	2c00      	cmp	X, #0
    9552:	1904      	je	0x955c <_EXT0_IT+0xd8>
		{
			l_u16CoilZeroCurrCountA--;
    9554:	72ee      	lod	A, X
    9556:	a0ff      	add	A, #-1
    9558:	52d8 0138 	mov	0x138 <_l_u16CoilZeroCurrCountA>, A
		}

		if(g_u16CurrentMotorCoilB < (l_u16CurrentZeroOffset + C_MIN_COIL_CURRENT))
    955c:	e00a      	add	Y, #10
    955e:	5a07      	mov	[S-8], Y
    9560:	7ed8 0138 	lod	X, 0x138 <_l_u16CoilZeroCurrCountA>
    9564:	7ad8 0136 	lod	Y, 0x136 <_l_u16CoilZeroCurrCountB>
    9568:	7209      	lod	A, [S-10]
    956a:	ae07      	cmp	A, [S-8]
    956c:	1c03      	jnc	0x9574 <_EXT0_IT+0xf0>
		{
			l_u16CoilZeroCurrCountB++;
    956e:	72e6      	lod	A, Y
    9570:	a001      	add	A, #1
    9572:	0004      	jmp	0x957c <_EXT0_IT+0xf8>
		}
		else if ( l_u16CoilZeroCurrCountB != 0 )
    9574:	ec00      	cmp	Y, #0
    9576:	1904      	je	0x9580 <_EXT0_IT+0xfc>
		{
			l_u16CoilZeroCurrCountB--;
    9578:	72e6      	lod	A, Y
    957a:	a0ff      	add	A, #-1
    957c:	52d8 0136 	mov	0x136 <_l_u16CoilZeroCurrCountB>, A
		}

		if((l_u16CoilZeroCurrCountA >= C_COIL_ZERO_CURRENT_COUNT) || (l_u16CoilZeroCurrCountB >= C_COIL_ZERO_CURRENT_COUNT))
    9580:	2c1f      	cmp	X, #31
    9582:	1e04      	jug	0x958c <_EXT0_IT+0x108>
    9584:	72d8 0136 	lod	A, 0x136 <_l_u16CoilZeroCurrCountB>
    9588:	ac1f      	cmp	A, #31
    958a:	1a15      	jule	0x95b6 <_EXT0_IT+0x132>
		{
			MotorDriverStop( (uint16) C_STOP_IMMEDIATE);
    958c:	7001      	lod	A, #1
    958e:	165b      	call	0x9246 <_MotorDriverStop>
			g_e8ErrorElectric = (uint8) C_ERR_ELECTRIC_PERM;
    9590:	6002      	lod	AL, #2
    9592:	412d      	mov	dp:0x2d <_g_e8ErrorElectric>, AL
			SetLastError( (uint8) C_ERR_COIL_ZERO_CURRENT);
    9594:	72da 00e6 	lod	A, #230
    9598:	82db 89f6 	callf	0x89f6 <_SetLastError>
			g_e8ErrorCoil = (uint8) C_ERR_SELFTEST_C;//coil open
    959c:	60ec      	lod	AL, #-20
    959e:	412c      	mov	dp:0x2c <_g_e8ErrorCoil>, AL
			return;
    95a0:	5c11      	dec	S, #18
    95a2:	4cc3      	pop	D
    95a4:	7acf      	pop	Y
    95a6:	7ecf      	pop	X
    95a8:	72cf      	pop	A
    95aa:	4407      	mov	R, #0
    95ac:	72cb      	pop	M
    95ae:	5401      	ret
		}
	}else if(l_u16CoilCurrentStartDelay > 0){
		l_u16CoilCurrentStartDelay--;
    95b0:	a0ff      	add	A, #-1
    95b2:	52d8 0134 	mov	0x134 <_l_u16CoilCurrentStartDelay>, A



	/* Update micro-step index */
	{
		uint16 u16MicroStepIdx = g_u16MicroStepIdx;
    95b6:	7950      	lod	Y, dp:0x50 <_g_u16MicroStepIdx>
		if ( g_e8MotorDirectionCCW )
    95b8:	612a      	lod	AL, dp:0x2a <_g_e8MotorDirectionCCW>
    95ba:	1906      	je	0x95c8 <_EXT0_IT+0x144>
		{
			/* Counter Clock-wise (Closing) */
			if ( u16MicroStepIdx == 0 )
    95bc:	ec00      	cmp	Y, #0
    95be:	1d02      	jne	0x95c4 <_EXT0_IT+0x140>
			{
				u16MicroStepIdx = g_u16MotorMicroStepsPerElecRotation;
    95c0:	7ad8 026e 	lod	Y, 0x26e <_g_u16MotorMicroStepsPerElecRotation>
			}
			u16MicroStepIdx--;													/* Decrement the PWM vector pointer */
    95c4:	e0ff      	add	Y, #-1
    95c6:	0005      	jmp	0x95d2 <_EXT0_IT+0x14e>
		}
		else
		{
			/* Clock-wise (Opening) */
			u16MicroStepIdx++;													/* Increment the PWM vectors pointer */
    95c8:	e001      	add	Y, #1
			if ( u16MicroStepIdx >= g_u16MotorMicroStepsPerElecRotation )		/* Test the PWM vectors pointer: 48 usteps per electrical period */
    95ca:	eed8 026e 	cmp	Y, 0x26e <_g_u16MotorMicroStepsPerElecRotation>
    95ce:	1801      	jc	0x95d2 <_EXT0_IT+0x14e>
			{
				u16MicroStepIdx = 0;											/* Re-initialise the PWM vectors pointer to 0 */
    95d0:	7800      	lod	Y, #0
			}
		}
		g_u16MicroStepIdx = u16MicroStepIdx;
    95d2:	5950      	mov	dp:0x50 <_g_u16MicroStepIdx>, Y
	}

	/* Check for speed update required */
	if ( g_u16CommutTimerPeriod == g_u16TargetCommutTimerPeriod )
    95d4:	7d52      	lod	X, dp:0x52 <_g_u16CommutTimerPeriod>
    95d6:	7154      	lod	A, dp:0x54 <_g_u16TargetCommutTimerPeriod>
    95d8:	520d      	mov	[S-14], A
    95da:	2ee2      	cmp	X, A
    95dc:	1d04      	jne	0x95e6 <_EXT0_IT+0x162>
	{
		g_u8MotorStartupMode = (uint8) MSM_STEPPER_C;
    95de:	6003      	lod	AL, #3
    95e0:	42d8 013f 	mov	0x13f <_g_u8MotorStartupMode>, AL
    95e4:	005b      	jmp	0x969c <_EXT0_IT+0x218>
	}
	else
	{
		/* Update speed */
		uint16 u16Compensation = l_u16SpeedRPM;							//MMP160606-1
    95e6:	72d8 0316 	lod	A, 0x316 <_l_u16SpeedRPM>
    95ea:	520b      	mov	[S-12], A
		if ( g_u16CommutTimerPeriod < g_u16TargetCommutTimerPeriod )
    95ec:	2e0d      	cmp	X, [S-14]
    95ee:	1c30      	jnc	0x9650 <_EXT0_IT+0x1cc>
		{
			/* Deceleration per micro-step */
			g_u8MotorStartupMode = (uint8) MSM_STEPPER_D;					/* Too fast, decelerate */
    95f0:	6002      	lod	AL, #2
    95f2:	42d8 013f 	mov	0x13f <_g_u8MotorStartupMode>, AL
    95f6:	71a2      	lod	A, dp:0xa2 <_g_NvramUser+0x48>
    95f8:	7800      	lod	Y, #0
    95fa:	48e0      	asl	YA, #1
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    95fc:	7e0b      	lod	X, [S-12]
    95fe:	4c63      	divu	YA, X
    9600:	4c63      	divu	YA, X
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    9602:	2ae2      	sub	X, A
    9604:	5e03      	mov	[S-4], X
    9606:	5ed8 0316 	mov	0x316 <_l_u16SpeedRPM>, X
    960a:	72d8 0318 	lod	A, 0x318 <_l_u32Temp>
    960e:	7ad8 031a 	lod	Y, 0x31a <_l_u32Temp+0x2>
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    9612:	4c63      	divu	YA, X
    9614:	4c63      	divu	YA, X
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    9616:	7ae2      	lod	Y, A
    9618:	e0ff      	add	Y, #-1
    961a:	5952      	mov	dp:0x52 <_g_u16CommutTimerPeriod>, Y
			l_u16SpeedRPM = l_u16SpeedRPM - divU16_U32byU16( (uint32) 2*NVRAM_ACCELERATION_CONST, l_u16SpeedRPM);	/* MMP160606-1 */
			g_u16CommutTimerPeriod = divU16_U32byU16( l_u32Temp, l_u16SpeedRPM) - 1;	/* MMP160606-1 */
			l_u8VTIdx--;
    961c:	6136      	lod	AL, dp:0x36 <_l_u8VTIdx>
    961e:	80ff      	add	AL, #-1
    9620:	4136      	mov	dp:0x36 <_l_u8VTIdx>, AL
			if ( g_u16StartupDelay < l_u8VTIdx )
    9622:	5cf2      	usex	A
    9624:	ad38      	cmp	A, dp:0x38 <_g_u16StartupDelay>
    9626:	1a03      	jule	0x962e <_EXT0_IT+0x1aa>
			{
				g_u16StartupDelay = l_u16StartupDelayInit;						/* MMP130627-1/MMP140331-2: Speed reduction, stall detection post-poned */
    9628:	72d8 013a 	lod	A, 0x13a <_l_u16StartupDelayInit>
    962c:	5138      	mov	dp:0x38 <_g_u16StartupDelay>, A
			}
			if ( g_u16CommutTimerPeriod > g_u16TargetCommutTimerPeriod )
    962e:	ee0d      	cmp	Y, [S-14]
    9630:	1a02      	jule	0x9636 <_EXT0_IT+0x1b2>
			{
				g_u16CommutTimerPeriod = g_u16TargetCommutTimerPeriod;
    9632:	7a0d      	lod	Y, [S-14]
    9634:	5952      	mov	dp:0x52 <_g_u16CommutTimerPeriod>, Y
			}
			TMR1_REGB = g_u16CommutTimerPeriod;
    9636:	7152      	lod	A, dp:0x52 <_g_u16CommutTimerPeriod>
    9638:	52ac      	mov	io:0x2c <_g_e8ErrorCoil>, A
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    963a:	72d8 0320 	lod	A, 0x320 <_g_u16PidCtrlRatio>
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    963e:	7a03      	lod	Y, [S-4]
    9640:	7e0b      	lod	X, [S-12]
    9642:	4821      	mulu	YA, A, Y
    9644:	4c63      	divu	YA, X
    9646:	4c63      	divu	YA, X
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    9648:	52d8 0320 	mov	0x320 <_g_u16PidCtrlRatio>, A
#if (_SUPPORT_PWM_DC_RAMPDOWN != FALSE)											/* MMP140903-2 - Begin */
			g_u16PidCtrlRatio = muldivU16_U16byU16byU16( g_u16PidCtrlRatio, l_u16SpeedRPM, u16Compensation);	/* MMP160606-2 */
			g_u16PID_I = g_u16PidCtrlRatio;
    964c:	51ca      	mov	dp:0xca <_g_u16PID_I>, A
    964e:	0026      	jmp	0x969c <_EXT0_IT+0x218>
//			/* Reduce the PWM-duty cycle to avoid current increase (wrong stall detection) (254/256) */
//			g_u16PidCtrlRatio = (uint16) (mulU32_U16byU16( g_u16PidCtrlRatio, 254) >> 8);
//			g_u16PID_I = g_u16PidCtrlRatio;
//#endif /* (_SUPPORT_PWM_DC_RAMPDOWN != FALSE) */								/* MMP140903-2 - Begin */
		}
		else if ( (g_u16MicroStepIdx == 0) || ((g_u16MicroStepIdx > NVRAM_ACCELERATION_POINTS) && ((g_u16MicroStepIdx & NVRAM_ACCELERATION_POINTS) == 0)) )
    9650:	ec00      	cmp	Y, #0
    9652:	1906      	je	0x9660 <_EXT0_IT+0x1dc>
    9654:	61a4      	lod	AL, dp:0xa4 <_g_NvramUser+0x4a>
    9656:	b43f      	and	A, #63
    9658:	eee2      	cmp	Y, A
    965a:	1a20      	jule	0x969c <_EXT0_IT+0x218>
    965c:	b6e6      	and	A, Y
    965e:	1d1e      	jne	0x969c <_EXT0_IT+0x218>
		{
			/* Acceleration per acceleration_points ((multiple) full-step) */
			g_u8MotorStartupMode = (uint8) MSM_STEPPER_A;					/* Too slow, accelerate */
    9660:	6001      	lod	AL, #1
    9662:	42d8 013f 	mov	0x13f <_g_u8MotorStartupMode>, AL
    9666:	71a2      	lod	A, dp:0xa2 <_g_NvramUser+0x48>
    9668:	7800      	lod	Y, #0
    966a:	48e0      	asl	YA, #1
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    966c:	7e0b      	lod	X, [S-12]
    966e:	4c63      	divu	YA, X
    9670:	4c63      	divu	YA, X
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    9672:	22e2      	add	X, A
    9674:	5ed8 0316 	mov	0x316 <_l_u16SpeedRPM>, X
    9678:	72d8 0318 	lod	A, 0x318 <_l_u32Temp>
    967c:	7ad8 031a 	lod	Y, 0x31a <_l_u32Temp+0x2>
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    9680:	4c63      	divu	YA, X
    9682:	4c63      	divu	YA, X
 *
 * Output :
 *      result      unsigned 16-bit quotient
 */
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    9684:	7ae2      	lod	Y, A
    9686:	e0ff      	add	Y, #-1
    9688:	5952      	mov	dp:0x52 <_g_u16CommutTimerPeriod>, Y
			l_u16SpeedRPM = l_u16SpeedRPM + divU16_U32byU16( (uint32) 2*NVRAM_ACCELERATION_CONST, l_u16SpeedRPM);	/* MMP160606-1 */
			g_u16CommutTimerPeriod = divU16_U32byU16( l_u32Temp, l_u16SpeedRPM) - 1;	/* MMP160606-1 */
			l_u8VTIdx++;
    968a:	6136      	lod	AL, dp:0x36 <_l_u8VTIdx>
    968c:	8001      	add	AL, #1
    968e:	4136      	mov	dp:0x36 <_l_u8VTIdx>, AL
			if ( g_u16CommutTimerPeriod < g_u16TargetCommutTimerPeriod )	/* MMP150923-1 */
    9690:	ee0d      	cmp	Y, [S-14]
    9692:	1c02      	jnc	0x9698 <_EXT0_IT+0x214>
			{
				g_u16CommutTimerPeriod = g_u16TargetCommutTimerPeriod;
    9694:	720d      	lod	A, [S-14]
    9696:	5152      	mov	dp:0x52 <_g_u16CommutTimerPeriod>, A
			}
			TMR1_REGB = g_u16CommutTimerPeriod;
    9698:	7152      	lod	A, dp:0x52 <_g_u16CommutTimerPeriod>
    969a:	52ac      	mov	io:0x2c <_g_e8ErrorCoil>, A
//			TMR1_REGB = g_u16CommutTimerPeriod;
//			g_u8MotorStartupMode = (uint8) MSM_STEPPER_A;						/* Too slow, accelerate */
		}
	}

	VoltageCorrection();
    969c:	1358      	call	0x9d4e <_VoltageCorrection>

	MotorDriver_4PhaseStepper();
    969e:	14d0      	call	0x9040 <_MotorDriver_4PhaseStepper>
	if ( MotorStallCheckA() != (uint16) C_STALL_NOT_FOUND )						/* Stall-detector "A" */
    96a0:	1018      	call	0x96d2 <_MotorStallCheckA>
    96a2:	ac00      	cmp	A, #0
    96a4:	190a      	je	0x96ba <_EXT0_IT+0x236>
	{
		g_u8StallTypeComm |= (uint8) C_STALL_FOUND_A;
    96a6:	611f      	lod	AL, dp:0x1f <_g_u8StallTypeComm>
    96a8:	8440      	or	AL, #64
    96aa:	411f      	mov	dp:0x1f <_g_u8StallTypeComm>, AL
		if ( g_e8StallDetectorEna & ((uint8) C_STALLDET_A | (uint8) C_STALLDET_CALIB))	/* MMP130916-1 */
    96ac:	61ee      	lod	AL, dp:0xee <_g_e8StallDetectorEna>
    96ae:	b409      	and	A, #9
    96b0:	1904      	je	0x96ba <_EXT0_IT+0x236>
		{
			g_u8StallOcc = TRUE;												/* Report stall and ...  */
    96b2:	6001      	lod	AL, #1
    96b4:	4128      	mov	dp:0x28 <_g_u8StallOcc>, AL
			MotorDriverStop( (uint16) C_STOP_EMERGENCY);						/* ... stop motor (Stall) */
    96b6:	7002      	lod	A, #2
    96b8:	15c6      	call	0x9246 <_MotorDriverStop>
    96ba:	5c11      	dec	S, #18
    96bc:	4cc3      	pop	D
    96be:	7acf      	pop	Y
    96c0:	7ecf      	pop	X
    96c2:	72cf      	pop	A
    96c4:	4407      	mov	R, #0
    96c6:	72cb      	pop	M
    96c8:	5401      	ret

000096ca <_MotorStallInitA>:
 *
 * Initialise Stall detector "A"
 * ****************************************************************************	*/
void MotorStallInitA( void)
{
	g_u8StallTypeComm = (uint8) C_STALL_NOT_FOUND;								/* Used for communication */
    96ca:	6000      	lod	AL, #0
    96cc:	411f      	mov	dp:0x1f <_g_u8StallTypeComm>, AL

	l_u8StallCountA = 0;														/* Stall-counter */
    96ce:	413b      	mov	dp:0x3b <_l_u8StallCountA>, AL
    96d0:	5401      	ret

000096d2 <_MotorStallCheckA>:
 * Check if motor is stalled
 * Stall detector "A" is based on fast current increase
 * Performance: 5us @ 20MHz
 * ****************************************************************************	*/
uint16 MotorStallCheckA( void)
{
    96d2:	5805      	inc	S, #6
	uint16 u16Result = C_STALL_NOT_FOUND;
    96d4:	7000      	lod	A, #0
    96d6:	5205      	mov	[S-6], A
	if ( (g_u16StartupDelay == 0) && (g_u16MotorCurrentMovAvgxN > (C_MIN_MOTORCURRENT << 4)) )	/* MMP130916-1 */
    96d8:	7138      	lod	A, dp:0x38 <_g_u16StartupDelay>
    96da:	1d2e      	jne	0x9738 <_MotorStallCheckA+0x66>
    96dc:	7156      	lod	A, dp:0x56 <__data_size>
    96de:	5203      	mov	[S-4], A
    96e0:	aeda 00a0 	cmp	A, #160
    96e4:	1a29      	jule	0x9738 <_MotorStallCheckA+0x66>
		   blocks, the BEMF drops to zero, and therefore the motor current increases.
		   This increase is monitored by calculating the difference (delta) between
		   a LPF filter (slowly increase) and the actual motor current. If this delta
		   increases above a specified threshold, stall is detected. */
		uint16 u16Threshold;
		if ( NVRAM_STALL_SPEED_DEPENDED )
    96e6:	61c9      	lod	AL, dp:0xc9 <__bss_dp_size+0x19>
    96e8:	65a5      	lod	YL, dp:0xa5 <_g_NvramUser+0x4b>
    96ea:	7d58      	lod	X, dp:0x58 <_g_u16MotorCurrentLPFx64>
    96ec:	8c00      	cmp	AL, #0
    96ee:	1e8a      	jsge	0x9704 <_MotorStallCheckA+0x32>
		{
			u16Threshold = (NVRAM_STALL_CURR_THRSHLD + 120) + (g_u8MotorStatusSpeed << 3);	/* Speed depended Threshold */
    96f0:	f47f      	and	Y, #127
    96f2:	611e      	lod	AL, dp:0x1e <__ramfunc_size>
    96f4:	44a2      	asl	A, #2
    96f6:	4422      	asl	A
    96f8:	b6da 07f8 	and	A, #2040
    96fc:	e2e2      	add	Y, A
    96fe:	72e6      	lod	A, Y
    9700:	a078      	add	A, #120
    9702:	0004      	jmp	0x970c <_MotorStallCheckA+0x3a>
		}
		else
		{
			u16Threshold = (NVRAM_STALL_CURR_THRSHLD + 128);					/* Fixed Threshold */
    9704:	72e6      	lod	A, Y
    9706:	b47f      	and	A, #127
    9708:	a2da 0080 	add	A, #128
		}
		l_u16MotorCurrentStallThrshldxN = (uint16)(((uint32)g_u16MotorCurrentLPFx64 * u16Threshold) >> (13 - C_MOVAVG_SSZ));
    970c:	4823      	mulu	YA, A, X
    970e:	48a6      	lsr	YA, #7
    9710:	52d8 031e 	mov	0x31e <_l_u16MotorCurrentStallThrshldxN>, A
		if ( g_u16MotorCurrentMovAvgxN > l_u16MotorCurrentStallThrshldxN )
    9714:	7ae2      	lod	Y, A
    9716:	613b      	lod	AL, dp:0x3b <_l_u8StallCountA>
    9718:	4201      	mov	[S-2], AL
    971a:	7203      	lod	A, [S-4]
    971c:	aee6      	cmp	A, Y
    971e:	1a08      	jule	0x9730 <_MotorStallCheckA+0x5e>
		{
			l_u8StallCountA++;
    9720:	6201      	lod	AL, [S-2]
    9722:	8001      	add	AL, #1
    9724:	413b      	mov	dp:0x3b <_l_u8StallCountA>, AL
			if ( l_u8StallCountA >= 3 )
    9726:	8c02      	cmp	AL, #2
    9728:	1a07      	jule	0x9738 <_MotorStallCheckA+0x66>
			{
				/* Real stall */
				u16Result = C_STALL_FOUND;
    972a:	7002      	lod	A, #2
    972c:	5205      	mov	[S-6], A
    972e:	0004      	jmp	0x9738 <_MotorStallCheckA+0x66>
			}
		}
		else if ( l_u8StallCountA )
    9730:	6201      	lod	AL, [S-2]
    9732:	1902      	je	0x9738 <_MotorStallCheckA+0x66>
		{
			l_u8StallCountA--;
    9734:	80ff      	add	AL, #-1
    9736:	413b      	mov	dp:0x3b <_l_u8StallCountA>, AL
		}
	}
	return ( u16Result );
} /* End of MotorStallCheckA() */
    9738:	7205      	lod	A, [S-6]
    973a:	5407      	ret	#8

0000973c <_NVRAM_CRC8>:
 *								TRUE: Calculated CRC8
 *
 *	Calculate CRC8 on User-NVRAM
 * ****************************************************************************	*/
uint8 NVRAM_CRC8( uint8 byReplaceCRC)
{
    973c:	5803      	inc	S, #4
    973e:	5201      	mov	[S-2], A
	uint16 u16CRC;

	if ( byReplaceCRC != FALSE )
    9740:	ac00      	cmp	A, #0
    9742:	1902      	je	0x9748 <_NVRAM_CRC8+0xc>
	{
		g_NvramUser.CRC8 = 0x00;
    9744:	6000      	lod	AL, #0
    9746:	415a      	mov	dp:0x5a <_g_NvramUser>, AL
 * const uint16_t u16Length: Length (in 16-bit words)
 *
 * returns a 8-bit (extended to 16-bit) CRC (Sum with carry) calculation over the specified area.
 */
__MLX_TEXT__ static __inline__ uint16 nvram_CalcCRC( const uint16_t *pu16BeginAddress, const uint16_t u16Length)
{
    9748:	7ada 005a 	lod	Y, #90
    uint16 u16Result;
    uint16 u16Result2;  /* Clobbering of the register */
    uint16 u16Result3;  /* Clobbering of the register */
    __asm__ __volatile__
    974c:	7c38      	lod	X, #56
    974e:	7000      	lod	A, #0
    9750:	08a7      	clrb	ML.7
    9752:	b2d6      	adc	A, [Y++]
    9754:	1bfe      	djnz	X, 0x9752 <_NVRAM_CRC8+0x16>
    9756:	92e4      	adc	AL, AH
    9758:	9000      	adc	AL, #0
    975a:	5cf2      	usex	A
    975c:	5203      	mov	[S-4], A
	}

	u16CRC = nvram_CalcCRC( (uint16 *) &g_NvramUser, (sizeof(g_NvramUser)/sizeof(uint16)));	/* MMP151202-1 */

	if ( byReplaceCRC != FALSE )
    975e:	7a01      	lod	Y, [S-2]
    9760:	1903      	je	0x9768 <_NVRAM_CRC8+0x2c>
	{
		g_NvramUser.CRC8 = (0xFF - u16CRC);
    9762:	60ff      	lod	AL, #-1
    9764:	8a03      	sub	AL, [S-4]
    9766:	415a      	mov	dp:0x5a <_g_NvramUser>, AL
	}

	return ( (uint8) u16CRC );
    9768:	6203      	lod	AL, [S-4]
    976a:	5cf2      	usex	A
} /* End of NVRAM_CRC8() */
    976c:	5405      	ret	#6

0000976e <_NVRAM_CountCRC8>:
 *								TRUE: Calculated CRC8.
 *
 *	Calculate CRC8 on Write-cycle counter.
 * ****************************************************************************	*/
uint8 NVRAM_CountCRC8( PNVRAM_ERRORLOG pNVERRLOG, uint8 byReplaceCRC)
{
    976e:	5807      	inc	S, #8
    9770:	5203      	mov	[S-4], A
    9772:	620b      	lod	AL, [S-12]
    9774:	5cf2      	usex	A
    9776:	5201      	mov	[S-2], A
    9778:	7c01      	lod	X, #1
    977a:	7a03      	lod	Y, [S-4]
    977c:	7000      	lod	A, #0
    977e:	08a7      	clrb	ML.7
    9780:	b2d6      	adc	A, [Y++]
    9782:	1bfe      	djnz	X, 0x9780 <_NVRAM_CountCRC8+0x12>
    9784:	92e4      	adc	AL, AH
    9786:	9000      	adc	AL, #0
    9788:	5cf2      	usex	A
    978a:	5207      	mov	[S-8], A
	uint16 u16CRC = nvram_CalcCRC( (uint16 *) &pNVERRLOG->NvramProgramCycleCount, 1);	/* MMP151202-1 */

	if ( byReplaceCRC != FALSE )
    978c:	7201      	lod	A, [S-2]
    978e:	190c      	je	0x97a8 <_NVRAM_CountCRC8+0x3a>
	{
		pNVERRLOG->ErrorLogIndex_CRC = (pNVERRLOG->ErrorLogIndex_CRC & 0x00FF) | ((0xFF - u16CRC) << 8);
    9790:	7a03      	lod	Y, [S-4]
    9792:	72f2      	lod	A, [Y+2]
    9794:	b6da 00ff 	and	A, #255
    9798:	7ee2      	lod	X, A
    979a:	72da 00ff 	lod	A, #255
    979e:	aa07      	sub	A, [S-8]
    97a0:	6800      	lod	AH, #0
    97a2:	72e4      	swap	A
    97a4:	26e2      	or	X, A
    97a6:	5ef2      	mov	[Y+2], X
	}
	return ( (uint8) ((pNVERRLOG->ErrorLogIndex_CRC >> 8) ^ u16CRC) );
    97a8:	7a03      	lod	Y, [S-4]
    97aa:	62f3      	lod	AL, [Y+3]
    97ac:	9e07      	xor	AL, [S-8]
    97ae:	5cf2      	usex	A
} /* End of NVRAM_CountCRC8() */
    97b0:	5409      	ret	#10

000097b2 <_NVRAM_PageVerify>:
 *	Post:	FALSE: NVRAM shadow-RAM page structure and RAM-structure are not the same
 *			TRUE : NVRAM shadow-RAM page structure and RAM-structure are the same
 *
 * ****************************************************************************	*/
uint16 NVRAM_PageVerify( const uint16 *pMRAM)
{
    97b2:	7ee2      	lod	X, A
	uint16 *pURAM = (uint16 *) &g_NvramUser;
    97b4:	7ada 005a 	lod	Y, #90
	do
	{
		if ( *pMRAM++ != *pURAM++ )
    97b8:	72de      	lod	A, [X++]
    97ba:	aed6      	cmp	A, [Y++]
    97bc:	1902      	je	0x97c2 <_NVRAM_PageVerify+0x10>
		{
			/* Error */
			return ( FALSE );
    97be:	7000      	lod	A, #0
    97c0:	5401      	ret
		}
	} while ( pURAM < ((uint16 *) &g_NvramUser + (sizeof(g_NvramUser)/sizeof(uint16))) );
    97c2:	eeda 00ca 	cmp	Y, #202
    97c6:	1878      	jc	0x97b8 <_NVRAM_PageVerify+0x6>
	return ( TRUE );
    97c8:	7001      	lod	A, #1
} /* End of NVRAM_PageVerify() */
    97ca:	5401      	ret

000097cc <_NVRAM_Store>:
 *
 * C_ADDR_USERPAGE1+0x00:0x7F:	User page #1 (64x 16-bits words)
 * C_ADDR_USERPAGE2+0x00:0x7F:	User page #2 (64x 16-bits words) (Backup)
 * ****************************************************************************	*/
uint16 NVRAM_Store( uint16 u16Page)
{
    97cc:	5803      	inc	S, #4
    97ce:	5203      	mov	[S-4], A
	uint16 *pURAM;
	uint16 *pMRAM;
	uint16 u16Result = C_NVRAM_STORE_OKAY;										/* MMP150219-1 */
    97d0:	7000      	lod	A, #0
    97d2:	5201      	mov	[S-2], A

	/* Store NVRAM */
	if ( (u16Page & C_MVRAM_USER_PAGE_NoCRC) == 0 )
    97d4:	6203      	lod	AL, [S-4]
    97d6:	8c00      	cmp	AL, #0
    97d8:	1a82      	jsl	0x97de <_NVRAM_Store+0x12>
	{
		(void) NVRAM_CRC8( TRUE);												/* Update CRC8 */
    97da:	7001      	lod	A, #1
    97dc:	17af      	call	0x973c <_NVRAM_CRC8>
	}

	/* Copy NVRAM UserRAM-copy into NVRAM MirrorRAM */
	if ( (u16Page & C_NVRAM_USER_PAGE_1) &&
    97de:	7203      	lod	A, [S-4]
    97e0:	b401      	and	A, #1
    97e2:	1d01      	jne	0x97e6 <_NVRAM_Store+0x1a>
    97e4:	0039      	jmp	0x9858 <_NVRAM_Store+0x8c>
    97e6:	7203      	lod	A, [S-4]
    97e8:	b440      	and	A, #64
    97ea:	1d05      	jne	0x97f6 <_NVRAM_Store+0x2a>
    97ec:	72da 1000 	lod	A, #4096
    97f0:	17e0      	call	0x97b2 <_NVRAM_PageVerify>
    97f2:	ac00      	cmp	A, #0
    97f4:	1d31      	jne	0x9858 <_NVRAM_Store+0x8c>
		/* Forced Write, or RAM differs from NVRAM; Copy RAM to NVRAM */
		do
		{
			/* Update NVRAM program cycle counter */							/* MMP150219-1 - Begin */
			PNVRAM_ERRORLOG pNVERRLOG = (PNVRAM_ERRORLOG) (C_ADDR_USERPAGE1 + sizeof(NVRAM_USER));
			if ( NVRAM_CountCRC8( pNVERRLOG, FALSE) != (uint8) 0xFFU )
    97f6:	54ca 0000 	pushw	#0
    97fa:	72da 1070 	lod	A, #4208
    97fe:	17b7      	call	0x976e <_NVRAM_CountCRC8>
    9800:	5c01      	dec	S, #2
    9802:	8cff      	cmp	AL, #-1
    9804:	1906      	je	0x9812 <_NVRAM_Store+0x46>
			{
				/* Invalid NVRAM Program-counter */
				pNVERRLOG->NvramProgramCycleCount = 0U;
    9806:	7000      	lod	A, #0
    9808:	7ada 1070 	lod	Y, #4208
    980c:	52f0      	mov	[Y], A
				u16Result = C_NVRAM_STORE_INVALID_COUNTER;
    980e:	7802      	lod	Y, #2
    9810:	5a01      	mov	[S-2], Y
			}
#if _SUPPORT_UNLIMITED_NVRAM_WRITE_CYCLES
			if ( pNVERRLOG->NvramProgramCycleCount < 0xFFFEU )
    9812:	7ada 1070 	lod	Y, #4208
    9816:	72f0      	lod	A, [Y]
    9818:	acfd      	cmp	A, #-3
    981a:	1e02      	jug	0x9820 <_NVRAM_Store+0x54>
			{
				pNVERRLOG->NvramProgramCycleCount++;
    981c:	a001      	add	A, #1
    981e:	52f0      	mov	[Y], A
			{
				u16Result = C_NVRAM_STORE_MAX_WRITE_CYCLE;
				break;															/* Skip NVRAM update (reached max-write cycle count) */
			}
#endif /* _SUPPORT_UNLIMITED_NVRAM_WRITE_CYCLES */
			(void) NVRAM_CountCRC8( pNVERRLOG, TRUE);							/* Calculate Cycle-count CRC8 */
    9820:	54ca 0001 	pushw	#1
    9824:	72da 1070 	lod	A, #4208
    9828:	17a2      	call	0x976e <_NVRAM_CountCRC8>

			/* Copy System RAM version to NVRAM User-page 1 shadow-RAM */
			{
				pURAM = (uint16 *) &g_NvramUser;
    982a:	7ada 005a 	lod	Y, #90
				pMRAM = (uint16 *) C_ADDR_USERPAGE1;
    982e:	7eda 1000 	lod	X, #4096
				do
    9832:	5c01      	dec	S, #2
				{
					*pMRAM++ = *pURAM++;
    9834:	54c6      	movsw	[X++], [Y++]
				} while ( pURAM < ((uint16 *) &g_NvramUser + (sizeof(g_NvramUser)/sizeof(uint16))) );
    9836:	eeda 00ca 	cmp	Y, #202
    983a:	187c      	jc	0x9834 <_NVRAM_Store+0x68>
			}																	/* MMP150219-1 - End */

			/* Save (NV)RAM to NV(RAM) */
			NVRAM_SavePage( NVRAM1_PAGE1);
    983c:	7000      	lod	A, #0
    983e:	82db 5a00 	callf	0x5a00 <_NVRAM_SavePage>

#if _SUPPORT_NVRAM_RECOVER_CYCLE_ONCE
			/* Check (NV)RAM page */
			NVRAM_LoadAll();
    9842:	82db 599a 	callf	0x599a <_NVRAM_LoadAll>
			if ( NVRAM_PageVerify( (uint16 *) C_ADDR_USERPAGE1) == FALSE )
    9846:	72da 1000 	lod	A, #4096
    984a:	17b3      	call	0x97b2 <_NVRAM_PageVerify>
    984c:	ac00      	cmp	A, #0
    984e:	1d04      	jne	0x9858 <_NVRAM_Store+0x8c>
			{
				/* Error */
				SetLastError( (uint8) C_ERR_NVRAM_PG11);
    9850:	72da 00f4 	lod	A, #244
    9854:	82db 89f6 	callf	0x89f6 <_SetLastError>
		} while ( FALSE );
	}

#if _SUPPORT_NVRAM_BACKUP
	/* Duplicate NVRAM user page 1 into page 2 */
	if ( (u16Page & C_NVRAM_USER_PAGE_2) &&
    9858:	7203      	lod	A, [S-4]
    985a:	b402      	and	A, #2
    985c:	1d01      	jne	0x9860 <_NVRAM_Store+0x94>
    985e:	0039      	jmp	0x98d2 <_NVRAM_Store+0x106>
    9860:	7203      	lod	A, [S-4]
    9862:	b440      	and	A, #64
    9864:	1d05      	jne	0x9870 <_NVRAM_Store+0xa4>
    9866:	72da 1100 	lod	A, #4352
    986a:	17a3      	call	0x97b2 <_NVRAM_PageVerify>
    986c:	ac00      	cmp	A, #0
    986e:	1d31      	jne	0x98d2 <_NVRAM_Store+0x106>
		/* Forced Write, or RAM differs from NVRAM; Copy RAM to NVRAM */
		do
		{
			/* Update NVRAM program cycle counter */							/* MMP150219-1 - Begin */
			PNVRAM_ERRORLOG pNVERRLOG = (PNVRAM_ERRORLOG) (C_ADDR_USERPAGE2 + sizeof(NVRAM_USER));
			if ( NVRAM_CountCRC8( pNVERRLOG, FALSE) != (uint8) 0xFFU )
    9870:	54ca 0000 	pushw	#0
    9874:	72da 1170 	lod	A, #4464
    9878:	177a      	call	0x976e <_NVRAM_CountCRC8>
    987a:	5c01      	dec	S, #2
    987c:	8cff      	cmp	AL, #-1
    987e:	1906      	je	0x988c <_NVRAM_Store+0xc0>
			{
				/* Invalid NVRAM Program-counter */
				pNVERRLOG->NvramProgramCycleCount = 0U;
    9880:	7000      	lod	A, #0
    9882:	7ada 1170 	lod	Y, #4464
    9886:	52f0      	mov	[Y], A
				u16Result = C_NVRAM_STORE_INVALID_COUNTER;
    9888:	7802      	lod	Y, #2
    988a:	5a01      	mov	[S-2], Y
			}
#if _SUPPORT_UNLIMITED_NVRAM_WRITE_CYCLES
			if ( pNVERRLOG->NvramProgramCycleCount < 0xFFFEU )
    988c:	7ada 1170 	lod	Y, #4464
    9890:	72f0      	lod	A, [Y]
    9892:	acfd      	cmp	A, #-3
    9894:	1e02      	jug	0x989a <_NVRAM_Store+0xce>
			{
				pNVERRLOG->NvramProgramCycleCount++;
    9896:	a001      	add	A, #1
    9898:	52f0      	mov	[Y], A
			{
				u16Result = C_NVRAM_STORE_MAX_WRITE_CYCLE;
				break;															/* Skip NVRAM update (reached max-write cycle count) */
			}
#endif /* _SUPPORT_UNLIMITED_NVRAM_WRITE_CYCLES */
			(void) NVRAM_CountCRC8( pNVERRLOG, TRUE);
    989a:	54ca 0001 	pushw	#1
    989e:	72da 1170 	lod	A, #4464
    98a2:	1765      	call	0x976e <_NVRAM_CountCRC8>

			/* Copy System RAM version to NVRAM User-page 2 shadow-RAM */
			{
				pURAM = (uint16 *) &g_NvramUser;
    98a4:	7ada 005a 	lod	Y, #90
				pMRAM = (uint16 *) C_ADDR_USERPAGE2;
    98a8:	7eda 1100 	lod	X, #4352
				do
    98ac:	5c01      	dec	S, #2
				{
					*pMRAM++ = *pURAM++;
    98ae:	54c6      	movsw	[X++], [Y++]
				} while ( pURAM < ((uint16 *) &g_NvramUser + (sizeof(g_NvramUser)/sizeof(uint16))) );
    98b0:	eeda 00ca 	cmp	Y, #202
    98b4:	187c      	jc	0x98ae <_NVRAM_Store+0xe2>
			}																	/* MMP150219-1 - End */

			/* Save (NV)RAM to NV(RAM) */
			NVRAM_SavePage( NVRAM2_PAGE1);
    98b6:	7002      	lod	A, #2
    98b8:	82db 5a00 	callf	0x5a00 <_NVRAM_SavePage>

#if _SUPPORT_NVRAM_RECOVER_CYCLE_ONCE
			/* Check (NV)RAM page */
			NVRAM_LoadAll();
    98bc:	82db 599a 	callf	0x599a <_NVRAM_LoadAll>
			if ( NVRAM_PageVerify( (uint16 *) C_ADDR_USERPAGE2) == FALSE )
    98c0:	72da 1100 	lod	A, #4352
    98c4:	1776      	call	0x97b2 <_NVRAM_PageVerify>
    98c6:	ac00      	cmp	A, #0
    98c8:	1d04      	jne	0x98d2 <_NVRAM_Store+0x106>
			{
				/* Error */
				SetLastError( (uint8) C_ERR_NVRAM_PG21);
    98ca:	72da 00f6 	lod	A, #246
    98ce:	82db 89f6 	callf	0x89f6 <_SetLastError>
#endif /* _SUPPORT_NVRAM_RECOVER_CYCLE_ONCE */
		} while ( FALSE );
	}
#endif /* _SUPPORT_NVRAM_BACKUP */
	return ( u16Result );														/* MMP150219-1 */
} /* NVRAM_Store() */
    98d2:	7201      	lod	A, [S-2]
    98d4:	5405      	ret	#6

000098d6 <_NVRAM_LoadUserPage>:
 * void NVRAM_LoadUserPage
 *
 * Load user NVRAM page (NVRAM to User-RAM).
 * ****************************************************************************	*/
void NVRAM_LoadUserPage( void)
{
    98d6:	5807      	inc	S, #8
	uint16 u16ErrorFlag;
	uint16 *pURAM = (uint16 *) &g_NvramUser;
    98d8:	7ada 005a 	lod	Y, #90
    98dc:	5a05      	mov	[S-6], Y
#if (LINPROT == LIN2J_VALVE_GM)
	uint16 *pMRAM;
	if ( (((NVRAM_USER *) C_ADDR_USERPAGE1)->AppStatus & 0x80) ^ (((NVRAM_USER *) C_ADDR_USERPAGE2)->AppStatus & 0x80) )
    98de:	7ada 101e 	lod	Y, #4126
    98e2:	66f0      	lod	YL, [Y]
    98e4:	f6da 0080 	and	Y, #128
    98e8:	7ee6      	lod	X, Y
    98ea:	7ada 111e 	lod	Y, #4382
    98ee:	62f0      	lod	AL, [Y]
    98f0:	b6da 0080 	and	A, #128
    98f4:	2ee2      	cmp	X, A
    98f6:	1904      	je	0x9900 <_NVRAM_LoadUserPage+0x2a>
		pMRAM = (uint16 *) C_ADDR_USERPAGE2;
    98f8:	7eda 1100 	lod	X, #4352
    98fc:	5e03      	mov	[S-4], X
    98fe:	0003      	jmp	0x9906 <_NVRAM_LoadUserPage+0x30>
	else
		pMRAM = (uint16 *) C_ADDR_USERPAGE1;
    9900:	7ada 1000 	lod	Y, #4096
    9904:	5a03      	mov	[S-4], Y
#else  /* (LINPROT == LIN2J_VALVE_GM) */
	uint16 *pMRAM = (uint16 *) C_ADDR_USERPAGE1;
#endif /* (LINPROT == LIN2J_VALVE_GM) */

	NVRAM_LoadAll();
    9906:	82db 599a 	callf	0x599a <_NVRAM_LoadAll>
	u16ErrorFlag = (VARIOUS_L & EENV_DED);										/* Double-bit error state */
    990a:	6280      	lod	AL, io:0x0 <__dp__>
    990c:	7ae2      	lod	Y, A
    990e:	f6da 0080 	and	Y, #128
    9912:	5a07      	mov	[S-8], Y
	/* Copy NVRAM MirrorRAM-copy into NVRAM UserRAM (to allow byte/bit access) */
	do
	{
		*pURAM++ = *pMRAM++;
    9914:	7e05      	lod	X, [S-6]
    9916:	7a03      	lod	Y, [S-4]
    9918:	54c6      	movsw	[X++], [Y++]
    991a:	5a03      	mov	[S-4], Y
    991c:	5e05      	mov	[S-6], X
	} while ( pURAM < (uint16 *) &g_NvramUser + (sizeof(g_NvramUser)/sizeof(uint16)) );
    991e:	2eda 00ca 	cmp	X, #202
    9922:	1878      	jc	0x9914 <_NVRAM_LoadUserPage+0x3e>
	/* Check Double-bit NVRAM set, User-NVRAM structure-revision and User-NVRAM Checksum */
	if ( ((u16ErrorFlag == FALSE) && (VARIOUS_L & EENV_DED)) || (g_NvramUser.Revision != C_NVRAM_USER_REV) || (NVRAM_CRC8( FALSE) != 0xFF) || (g_NvramUser.ConfigurationID != CONFIGURATION_ID) )
    9924:	7207      	lod	A, [S-8]
    9926:	1d03      	jne	0x992e <_NVRAM_LoadUserPage+0x58>
    9928:	6280      	lod	AL, io:0x0 <__dp__>
    992a:	8c00      	cmp	AL, #0
    992c:	1a8c      	jsl	0x9946 <_NVRAM_LoadUserPage+0x70>
    992e:	615b      	lod	AL, dp:0x5b <_g_NvramUser+0x1>
    9930:	8c01      	cmp	AL, #1
    9932:	1d09      	jne	0x9946 <_NVRAM_LoadUserPage+0x70>
    9934:	7000      	lod	A, #0
    9936:	1702      	call	0x973c <_NVRAM_CRC8>
    9938:	8cff      	cmp	AL, #-1
    993a:	1d05      	jne	0x9946 <_NVRAM_LoadUserPage+0x70>
    993c:	7162      	lod	A, dp:0x62 <_g_NvramUser+0x8>
    993e:	aeda 5467 	cmp	A, #21607
    9942:	1d01      	jne	0x9946 <_NVRAM_LoadUserPage+0x70>
    9944:	006d      	jmp	0x9a20 <_NVRAM_LoadUserPage+0x14a>
	/* Check Double-Bit Error NVRAM, Wrong revision or Invalid Checksum */
	if ( u16ErrorFlag )
	{
		/* Double-bit error or incorrect revision or Invalid CRC; Copy NVRAM user page 2 into UserRAM */
		/* Note: EENV_DED can't be cleared !! In case of first user-page DBE, a second-page DBE can't be detected */
		u16ErrorFlag = (VARIOUS_L & EENV_DED);
    9946:	6280      	lod	AL, io:0x0 <__dp__>
    9948:	7ae2      	lod	Y, A
    994a:	f6da 0080 	and	Y, #128
    994e:	5a07      	mov	[S-8], Y

#if (LINPROT == LIN2J_VALVE_GM)
		if ( (((NVRAM_USER *) C_ADDR_USERPAGE1)->AppStatus & 0x80) ^ (((NVRAM_USER *) C_ADDR_USERPAGE2)->AppStatus & 0x80) )
    9950:	7ada 101e 	lod	Y, #4126
    9954:	66f0      	lod	YL, [Y]
    9956:	f6da 0080 	and	Y, #128
    995a:	7ee6      	lod	X, Y
    995c:	7ada 111e 	lod	Y, #4382
    9960:	62f0      	lod	AL, [Y]
    9962:	b6da 0080 	and	A, #128
    9966:	2ee2      	cmp	X, A
    9968:	1904      	je	0x9972 <_NVRAM_LoadUserPage+0x9c>
			pMRAM = (uint16 *) C_ADDR_USERPAGE1;
    996a:	7eda 1000 	lod	X, #4096
    996e:	5e03      	mov	[S-4], X
    9970:	0003      	jmp	0x9978 <_NVRAM_LoadUserPage+0xa2>
		else
			pMRAM = (uint16 *) C_ADDR_USERPAGE2;
    9972:	7ada 1100 	lod	Y, #4352
    9976:	5a03      	mov	[S-4], Y
#else  /* (LINPROT == LIN2J_VALVE_GM) */
		pMRAM = (uint16 *) C_ADDR_USERPAGE2;
#endif /* (LINPROT == LIN2J_VALVE_GM) */
		pURAM = (uint16 *) &g_NvramUser;
    9978:	7eda 005a 	lod	X, #90
    997c:	5e05      	mov	[S-6], X
		do
		{
			*pURAM++ = *pMRAM++;
    997e:	7e05      	lod	X, [S-6]
    9980:	7a03      	lod	Y, [S-4]
    9982:	54c6      	movsw	[X++], [Y++]
    9984:	5a03      	mov	[S-4], Y
    9986:	5e05      	mov	[S-6], X
		} while ( pURAM < (uint16 *) &g_NvramUser + (sizeof(g_NvramUser)/sizeof(uint16)) );
    9988:	2eda 00ca 	cmp	X, #202
    998c:	1878      	jc	0x997e <_NVRAM_LoadUserPage+0xa8>
		if ( ((u16ErrorFlag != FALSE) || ((VARIOUS_L & EENV_DED) == 0)) && (g_NvramUser.Revision == C_NVRAM_USER_REV) && (NVRAM_CRC8( FALSE) == 0xFF) && (g_NvramUser.ConfigurationID == CONFIGURATION_ID) )
    998e:	7207      	lod	A, [S-8]
    9990:	1d03      	jne	0x9998 <_NVRAM_LoadUserPage+0xc2>
    9992:	6280      	lod	AL, io:0x0 <__dp__>
    9994:	8c00      	cmp	AL, #0
    9996:	1a92      	jsl	0x99bc <_NVRAM_LoadUserPage+0xe6>
    9998:	615b      	lod	AL, dp:0x5b <_g_NvramUser+0x1>
    999a:	8c01      	cmp	AL, #1
    999c:	1d0f      	jne	0x99bc <_NVRAM_LoadUserPage+0xe6>
    999e:	7000      	lod	A, #0
    99a0:	16cd      	call	0x973c <_NVRAM_CRC8>
    99a2:	8cff      	cmp	AL, #-1
    99a4:	1d0b      	jne	0x99bc <_NVRAM_LoadUserPage+0xe6>
    99a6:	7162      	lod	A, dp:0x62 <_g_NvramUser+0x8>
    99a8:	aeda 5467 	cmp	A, #21607
    99ac:	1d07      	jne	0x99bc <_NVRAM_LoadUserPage+0xe6>
		{
			/* Second User Page is correct; Rewrite 1st page */
			SetLastError( (uint8) C_ERR_INV_USERPAGE_1);
    99ae:	72da 00c0 	lod	A, #192
    99b2:	82db 89f6 	callf	0x89f6 <_SetLastError>
			(void) NVRAM_Store( (uint16) (C_NVRAM_USER_PAGE_1 | C_NVRAM_USER_PAGE_FORCE));
    99b6:	7041      	lod	A, #65
    99b8:	1709      	call	0x97cc <_NVRAM_Store>
			u16ErrorFlag = FALSE;
    99ba:	5409      	ret	#10
#if (MOTOR_PARAMS == MP_NVRAM)
#if (_SUPPORT_CODE_PARAMS == FALSE)
	if ( u16ErrorFlag )
	{
		/* First and/or second page is corrupt; Log error and use default data */
		SetLastError( (uint8) C_ERR_INV_USERPAGE_BOTH);
    99bc:	72da 00c2 	lod	A, #194
    99c0:	82db 89f6 	callf	0x89f6 <_SetLastError>
#else  /* (_SUPPORT_CODE_PARAMS == FALSE) */
		/* Always use hard-coded NVRAM value to be re-written in RAM-structure */
#endif /* (_SUPPORT_CODE_PARAMS == FALSE) */

		/* UniROM */
		pMRAM = (uint16 *) &defNvramUser;
    99c4:	7ada a2be 	lod	Y, #41662
    99c8:	5a03      	mov	[S-4], Y
		pURAM = (uint16 *) &g_NvramUser;
    99ca:	7eda 005a 	lod	X, #90
    99ce:	5e05      	mov	[S-6], X
		do
		{
			*pURAM++ = *pMRAM++;
    99d0:	7e05      	lod	X, [S-6]
    99d2:	7a03      	lod	Y, [S-4]
    99d4:	54c6      	movsw	[X++], [Y++]
    99d6:	5a03      	mov	[S-4], Y
    99d8:	5e05      	mov	[S-6], X
		} while ( pURAM < (uint16 *) &g_NvramUser + (sizeof(g_NvramUser)/sizeof(uint16)) );
    99da:	2eda 00ca 	cmp	X, #202
    99de:	1878      	jc	0x99d0 <_NVRAM_LoadUserPage+0xfa>

#if (_SUPPORT_CODE_PARAMS == FALSE)
		{
			PNVRAM_ERRORLOG pNVERRLOG_UPG = (PNVRAM_ERRORLOG) (C_ADDR_USERPAGE1 + sizeof(NVRAM_USER));
    99e0:	7ada 1070 	lod	Y, #4208
    99e4:	5a01      	mov	[S-2], Y
			if ( NVRAM_CountCRC8( pNVERRLOG_UPG, FALSE) != 0xFF )				/* Check NVRAM User Page #1 Write-cycle counter CRC */
    99e6:	54ca 0000 	pushw	#0
    99ea:	72da 1070 	lod	A, #4208
    99ee:	16bf      	call	0x976e <_NVRAM_CountCRC8>
    99f0:	5c01      	dec	S, #2
    99f2:	8cff      	cmp	AL, #-1
    99f4:	1904      	je	0x99fe <_NVRAM_LoadUserPage+0x128>
			{
				pNVERRLOG_UPG->NvramProgramCycleCount = 0;						/* Clear program cycle-counter */
    99f6:	7000      	lod	A, #0
    99f8:	7e01      	lod	X, [S-2]
    99fa:	52f8      	mov	[X], A
				pNVERRLOG_UPG->ErrorLogIndex_CRC = 0;							/* Clear Error-log index & CRC */
    99fc:	52fa      	mov	[X+2], A
			}
			pNVERRLOG_UPG = (PNVRAM_ERRORLOG) (C_ADDR_USERPAGE2 + sizeof(NVRAM_USER));
    99fe:	7ada 1170 	lod	Y, #4464
    9a02:	5a01      	mov	[S-2], Y
			if ( NVRAM_CountCRC8( pNVERRLOG_UPG, FALSE) != 0xFF )				/* Check NVRAM User Page #2 Write-cycle counter CRC */
    9a04:	54ca 0000 	pushw	#0
    9a08:	72da 1170 	lod	A, #4464
    9a0c:	16b0      	call	0x976e <_NVRAM_CountCRC8>
    9a0e:	5c01      	dec	S, #2
    9a10:	8cff      	cmp	AL, #-1
    9a12:	1904      	je	0x9a1c <_NVRAM_LoadUserPage+0x146>
			{
				pNVERRLOG_UPG->NvramProgramCycleCount = 0;						/* Clear program cycle-counter */
    9a14:	7000      	lod	A, #0
    9a16:	7e01      	lod	X, [S-2]
    9a18:	52f8      	mov	[X], A
				pNVERRLOG_UPG->ErrorLogIndex_CRC = 0;							/* Clear Error-log index & CRC */
    9a1a:	52fa      	mov	[X+2], A
			}
		}
		(void) NVRAM_Store( (uint16) (C_NVRAM_USER_PAGE_ALL | C_NVRAM_USER_PAGE_FORCE));	/* Write (both) user page(s) with default data */
    9a1c:	7043      	lod	A, #67
    9a1e:	16d6      	call	0x97cc <_NVRAM_Store>
    9a20:	5409      	ret	#10

00009a22 <_PlaceError>:
 *			u8ErrorCode: Error-code
 *	Post:	-
 *	Comments: Write error-code into NVRAM (16-bits words based)
 * ****************************************************************************	*/
void PlaceError( uint16 *pu16ErrorElement, uint16 u16OddEven, uint8 u8ErrorCode)
{
    9a22:	5801      	inc	S, #2
    9a24:	7ee2      	lod	X, A
    9a26:	6207      	lod	AL, [S-8]
    9a28:	66e0      	lod	YL, AL
    9a2a:	5cf6      	usex	Y
    9a2c:	72f8      	lod	A, [X]
    9a2e:	5201      	mov	[S-2], A
	if ( u16OddEven )
    9a30:	7205      	lod	A, [S-6]
    9a32:	1905      	je	0x9a3e <_PlaceError+0x1c>
	{
		/* Odd index: MSB of uint16 */
		*pu16ErrorElement = (uint8)(*pu16ErrorElement) | (((uint16) u8ErrorCode) << 8);
    9a34:	6201      	lod	AL, [S-2]
    9a36:	5cf2      	usex	A
    9a38:	6c00      	lod	YH, #0
    9a3a:	7ae8      	swap	Y
    9a3c:	0003      	jmp	0x9a44 <_PlaceError+0x22>
	}
	else
	{
		/* Even index: LSB of uint16 */
		*pu16ErrorElement = (*pu16ErrorElement & 0xFF00) | ((uint16) u8ErrorCode);
    9a3e:	7201      	lod	A, [S-2]
    9a40:	b6da ff00 	and	A, #65280
    9a44:	a6e6      	or	A, Y
    9a46:	52f8      	mov	[X], A
    9a48:	5403      	ret	#4

00009a4a <_NVRAM_LogError>:
 *	result is either 0 or 1, indicating which page should be written next-time.
 * Index at user-page #1/#2: 0-11: Empty/over-write index, FF: Full
 * If index user-page #1 is not 0xFF (Full), write error at page #1, otherwise page #2
 * ****************************************************************************	*/
uint16 NVRAM_LogError( uint8 u8ErrorCode)
{
    9a4a:	5807      	inc	S, #8
    9a4c:	5207      	mov	[S-8], A
	uint16 u16Result = C_NVRAM_STORE_OKAY;										/* MMP150219-1 */
    9a4e:	7000      	lod	A, #0
    9a50:	5205      	mov	[S-6], A
	PNVRAM_ERRORLOG pNVERRLOG_UPG1 = (PNVRAM_ERRORLOG) (C_ADDR_USERPAGE1 + sizeof(NVRAM_USER));
	PNVRAM_ERRORLOG pNVERRLOG_UPG2 = (PNVRAM_ERRORLOG) (C_ADDR_USERPAGE2 + sizeof(NVRAM_USER));
	uint16 u16ErrorLogIdx1 = (uint8) (pNVERRLOG_UPG1->ErrorLogIndex_CRC);
    9a52:	7ada 1070 	lod	Y, #4208
    9a56:	72f2      	lod	A, [Y+2]
    9a58:	5cf2      	usex	A
    9a5a:	5203      	mov	[S-4], A
	uint16 u16ErrorLogIdx2 = (uint8) (pNVERRLOG_UPG2->ErrorLogIndex_CRC);
    9a5c:	7ada 1170 	lod	Y, #4464
    9a60:	72f2      	lod	A, [Y+2]
    9a62:	5cf2      	usex	A
    9a64:	5201      	mov	[S-2], A
	
	if ( (u16ErrorLogIdx1 ^ u16ErrorLogIdx2) == 0x00 )
    9a66:	7203      	lod	A, [S-4]
    9a68:	be01      	xor	A, [S-2]
    9a6a:	1d03      	jne	0x9a72 <_NVRAM_LogError+0x28>
	{
		u16ErrorLogIdx1 = 0x00;													/* Second UserPage last time written full; Start from index 0 at User Page #1 */
    9a6c:	7000      	lod	A, #0
    9a6e:	5203      	mov	[S-4], A
    9a70:	0004      	jmp	0x9a7a <_NVRAM_LogError+0x30>
	}
	else if ( (u16ErrorLogIdx1 ^ u16ErrorLogIdx2) == 0x01 )
    9a72:	ac01      	cmp	A, #1
    9a74:	1d02      	jne	0x9a7a <_NVRAM_LogError+0x30>
	{
		u16ErrorLogIdx2 = 0x00;
    9a76:	7800      	lod	Y, #0
    9a78:	5a01      	mov	[S-2], Y
	}
	
	if ( (u16ErrorLogIdx1 & 0x80) == 0x00 )
    9a7a:	6203      	lod	AL, [S-4]
    9a7c:	8c00      	cmp	AL, #0
    9a7e:	1e81      	jsge	0x9a82 <_NVRAM_LogError+0x38>
    9a80:	0046      	jmp	0x9b0e <_NVRAM_LogError+0xc4>
	{
		/* Store error on User-Page #1 */										/* MMP150219-1 - Begin */
		if ( u16ErrorLogIdx1 >= C_MAX_ERRORS_PER_PAGE )							/* Check against array overflow */
    9a82:	7a03      	lod	Y, [S-4]
    9a84:	ec0b      	cmp	Y, #11
    9a86:	1a02      	jule	0x9a8c <_NVRAM_LogError+0x42>
		{
			u16ErrorLogIdx1 = 0;
    9a88:	7000      	lod	A, #0
    9a8a:	5203      	mov	[S-4], A
		}
		if ( NVRAM_CountCRC8( pNVERRLOG_UPG1, FALSE) == 0x00 )
    9a8c:	54ca 0000 	pushw	#0
    9a90:	72da 1070 	lod	A, #4208
    9a94:	166c      	call	0x976e <_NVRAM_CountCRC8>
    9a96:	5c01      	dec	S, #2
    9a98:	8c00      	cmp	AL, #0
    9a9a:	1d05      	jne	0x9aa6 <_NVRAM_LogError+0x5c>
		{
			pNVERRLOG_UPG1->NvramProgramCycleCount++;
    9a9c:	7ada 1070 	lod	Y, #4208
    9aa0:	72f0      	lod	A, [Y]
    9aa2:	a001      	add	A, #1
    9aa4:	0003      	jmp	0x9aac <_NVRAM_LogError+0x62>
		}
		else
		{
			pNVERRLOG_UPG1->NvramProgramCycleCount = 1U;
    9aa6:	7001      	lod	A, #1
    9aa8:	7ada 1070 	lod	Y, #4208
    9aac:	52f0      	mov	[Y], A
		}																		/* MMP150219-1 - End */
		if ( pNVERRLOG_UPG1->NvramProgramCycleCount < (C_MAX_NVRAM_PROGRAM_COUNT - 1000) )
    9aae:	7ada 1070 	lod	Y, #4208
    9ab2:	72f0      	lod	A, [Y]
    9ab4:	aeda f9ff 	cmp	A, #63999
    9ab8:	1a01      	jule	0x9abc <_NVRAM_LogError+0x72>
    9aba:	0068      	jmp	0x9b8c <_NVRAM_LogError+0x142>
		{
			(void) NVRAM_CountCRC8( pNVERRLOG_UPG1, TRUE);
    9abc:	54ca 0001 	pushw	#1
    9ac0:	72da 1070 	lod	A, #4208
    9ac4:	1654      	call	0x976e <_NVRAM_CountCRC8>
			PlaceError( (uint16 *) &(pNVERRLOG_UPG1->ErrorLog[u16ErrorLogIdx1 >> 1]), u16ErrorLogIdx1 & 0x01, u8ErrorCode);
    9ac6:	7205      	lod	A, [S-6]
    9ac8:	b4fe      	and	A, #-2
    9aca:	a2da 1074 	add	A, #4212
    9ace:	7a09      	lod	Y, [S-10]
    9ad0:	5adf      	push	Y
    9ad2:	7a07      	lod	Y, [S-8]
    9ad4:	f401      	and	Y, #1
    9ad6:	5adf      	push	Y
    9ad8:	17a4      	call	0x9a22 <_PlaceError>
			/* Update Error-log Index */
			u16ErrorLogIdx1++;
    9ada:	7209      	lod	A, [S-10]
    9adc:	a001      	add	A, #1
    9ade:	5209      	mov	[S-10], A
			if ( u16ErrorLogIdx1 >= C_MAX_ERRORS_PER_PAGE )
    9ae0:	5c05      	dec	S, #6
    9ae2:	ac0b      	cmp	A, #11
    9ae4:	1a0a      	jule	0x9afa <_NVRAM_LogError+0xb0>
			{
				/* Array full; Switch to page #2 */
				if ( u16ErrorLogIdx2 & 0x80 )
    9ae6:	6201      	lod	AL, [S-2]
    9ae8:	8c00      	cmp	AL, #0
    9aea:	1e84      	jsge	0x9af4 <_NVRAM_LogError+0xaa>
				{
					u16ErrorLogIdx1 = (u16ErrorLogIdx2 ^ 0x01);
    9aec:	7a01      	lod	Y, [S-2]
    9aee:	fc01      	xor	Y, #1
    9af0:	5a03      	mov	[S-4], Y
    9af2:	0003      	jmp	0x9afa <_NVRAM_LogError+0xb0>
				}
				else
				{
					u16ErrorLogIdx1 = 0xFF;
    9af4:	72da 00ff 	lod	A, #255
    9af8:	5203      	mov	[S-4], A
				}
			}
			pNVERRLOG_UPG1->ErrorLogIndex_CRC = ((pNVERRLOG_UPG1->ErrorLogIndex_CRC) & 0xFF00) | u16ErrorLogIdx1;
    9afa:	7ada 1070 	lod	Y, #4208
    9afe:	72f2      	lod	A, [Y+2]
    9b00:	b6da ff00 	and	A, #65280
    9b04:	a603      	or	A, [S-4]
    9b06:	52f2      	mov	[Y+2], A
			/* Save (NV)RAM to NV(RAM) */
			NVRAM_SavePage( NVRAM1_PAGE1 | NVRAM_PAGE_WR_SKIP_WAIT);
    9b08:	72da 8000 	lod	A, #32768
    9b0c:	003c      	jmp	0x9b86 <_NVRAM_LogError+0x13c>
		}
	}
	else 
	{
		/* Store error on User-Page #2 */										/* MMP150219-1 - Begin */
		if ( u16ErrorLogIdx2 >= C_MAX_ERRORS_PER_PAGE )							/* Check against array overflow */
    9b0e:	7a01      	lod	Y, [S-2]
    9b10:	ec0b      	cmp	Y, #11
    9b12:	1a02      	jule	0x9b18 <_NVRAM_LogError+0xce>
		{
			u16ErrorLogIdx2 = 0;
    9b14:	7000      	lod	A, #0
    9b16:	5201      	mov	[S-2], A
		}
		if ( NVRAM_CountCRC8( pNVERRLOG_UPG2, FALSE) == 0x00 )
    9b18:	54ca 0000 	pushw	#0
    9b1c:	72da 1170 	lod	A, #4464
    9b20:	1626      	call	0x976e <_NVRAM_CountCRC8>
    9b22:	5c01      	dec	S, #2
    9b24:	8c00      	cmp	AL, #0
    9b26:	1d05      	jne	0x9b32 <_NVRAM_LogError+0xe8>
		{
			pNVERRLOG_UPG2->NvramProgramCycleCount++;
    9b28:	7ada 1170 	lod	Y, #4464
    9b2c:	72f0      	lod	A, [Y]
    9b2e:	a001      	add	A, #1
    9b30:	0003      	jmp	0x9b38 <_NVRAM_LogError+0xee>
		}
		else
		{
			pNVERRLOG_UPG2->NvramProgramCycleCount = 1U;
    9b32:	7001      	lod	A, #1
    9b34:	7ada 1170 	lod	Y, #4464
    9b38:	52f0      	mov	[Y], A
		}																		/* MMP150219-1 - End  */
		if ( pNVERRLOG_UPG2->NvramProgramCycleCount < (C_MAX_NVRAM_PROGRAM_COUNT - 1000) )
    9b3a:	7ada 1170 	lod	Y, #4464
    9b3e:	72f0      	lod	A, [Y]
    9b40:	aeda f9ff 	cmp	A, #63999
    9b44:	1e23      	jug	0x9b8c <_NVRAM_LogError+0x142>
		{
			(void) NVRAM_CountCRC8( pNVERRLOG_UPG2, TRUE);
    9b46:	54ca 0001 	pushw	#1
    9b4a:	72da 1170 	lod	A, #4464
    9b4e:	160f      	call	0x976e <_NVRAM_CountCRC8>
			PlaceError( (uint16 *) &(pNVERRLOG_UPG2->ErrorLog[u16ErrorLogIdx2 >> 1]), u16ErrorLogIdx2 & 0x01, u8ErrorCode);
    9b50:	7203      	lod	A, [S-4]
    9b52:	b4fe      	and	A, #-2
    9b54:	a2da 1174 	add	A, #4468
    9b58:	7a09      	lod	Y, [S-10]
    9b5a:	5adf      	push	Y
    9b5c:	7a05      	lod	Y, [S-6]
    9b5e:	f401      	and	Y, #1
    9b60:	5adf      	push	Y
    9b62:	175f      	call	0x9a22 <_PlaceError>
			/* Update Error-log Index */
			u16ErrorLogIdx2++;
    9b64:	7207      	lod	A, [S-8]
    9b66:	a001      	add	A, #1
    9b68:	5207      	mov	[S-8], A
			if ( u16ErrorLogIdx2 >= C_MAX_ERRORS_PER_PAGE )
    9b6a:	5c05      	dec	S, #6
    9b6c:	ac0b      	cmp	A, #11
    9b6e:	1a02      	jule	0x9b74 <_NVRAM_LogError+0x12a>
			{
				/* Array full; Switch to page #1  */
				u16ErrorLogIdx2 = u16ErrorLogIdx1;
    9b70:	7a03      	lod	Y, [S-4]
    9b72:	5a01      	mov	[S-2], Y
			}
			pNVERRLOG_UPG2->ErrorLogIndex_CRC = ((pNVERRLOG_UPG2->ErrorLogIndex_CRC) & 0xFF00) | u16ErrorLogIdx2;
    9b74:	7ada 1170 	lod	Y, #4464
    9b78:	72f2      	lod	A, [Y+2]
    9b7a:	b6da ff00 	and	A, #65280
    9b7e:	a601      	or	A, [S-2]
    9b80:	52f2      	mov	[Y+2], A
			/* Save (NV)RAM to NV(RAM) */
			NVRAM_SavePage( NVRAM2_PAGE1 | NVRAM_PAGE_WR_SKIP_WAIT);
    9b82:	72da 8002 	lod	A, #32770
    9b86:	82db 5a00 	callf	0x5a00 <_NVRAM_SavePage>
    9b8a:	0002      	jmp	0x9b90 <_NVRAM_LogError+0x146>
		}
		else
		{
			u16Result = C_NVRAM_STORE_MAX_WRITE_CYCLE;
    9b8c:	7001      	lod	A, #1
    9b8e:	5205      	mov	[S-6], A
		}
	}
	return ( u16Result );														/* MMP150219-1 */
} /* End of NVRAM_LogError() */
    9b90:	7205      	lod	A, [S-6]
    9b92:	5409      	ret	#10

00009b94 <_NVRAM_GetLastError>:
 *
 *	Pre:	-
 *	Post:	(uint8) Last logged error-code
 * ****************************************************************************	*/
uint8 NVRAM_GetLastError( void)
{
    9b94:	5803      	inc	S, #4
	uint16 u16ErrorLogIdx1, u16ErrorLogIdx2;
	uint8 u8Result = 0x00;														/* No error's */
    9b96:	7000      	lod	A, #0
    9b98:	5201      	mov	[S-2], A
	PNVRAM_ERRORLOG pNVERRLOG_UPG1 = (PNVRAM_ERRORLOG) (C_ADDR_USERPAGE1 + sizeof(NVRAM_USER));
    9b9a:	7ada 1070 	lod	Y, #4208
	PNVRAM_ERRORLOG pNVERRLOG_UPG2 = (PNVRAM_ERRORLOG) (C_ADDR_USERPAGE2 + sizeof(NVRAM_USER));
	u16ErrorLogIdx1 = (uint8) (pNVERRLOG_UPG1->ErrorLogIndex_CRC);
    9b9e:	72f2      	lod	A, [Y+2]
    9ba0:	5cf2      	usex	A
    9ba2:	7ee2      	lod	X, A
	u16ErrorLogIdx2 = (uint8) (pNVERRLOG_UPG2->ErrorLogIndex_CRC);
    9ba4:	7ada 1170 	lod	Y, #4464
    9ba8:	72f2      	lod	A, [Y+2]
    9baa:	5cf2      	usex	A
    9bac:	5203      	mov	[S-4], A

	if ( (u16ErrorLogIdx1 != 0x00) || (u16ErrorLogIdx2 != 0x00) )
    9bae:	2c00      	cmp	X, #0
    9bb0:	1d02      	jne	0x9bb6 <_NVRAM_GetLastError+0x22>
    9bb2:	ac00      	cmp	A, #0
    9bb4:	192b      	je	0x9c0c <_NVRAM_GetLastError+0x78>
	{
		if ( (u16ErrorLogIdx1 ^ u16ErrorLogIdx2) == 0x00 )
    9bb6:	7203      	lod	A, [S-4]
    9bb8:	beee      	xor	A, X
    9bba:	1d03      	jne	0x9bc2 <_NVRAM_GetLastError+0x2e>
		{
			u16ErrorLogIdx2 = C_MAX_ERRORS_PER_PAGE;								/* Second UserPage last time written full */
    9bbc:	700c      	lod	A, #12
    9bbe:	5203      	mov	[S-4], A
    9bc0:	0008      	jmp	0x9bd2 <_NVRAM_GetLastError+0x3e>
		}
		else if ( (u16ErrorLogIdx1 ^ u16ErrorLogIdx2) == 0x01 )
    9bc2:	ac01      	cmp	A, #1
    9bc4:	1905      	je	0x9bd0 <_NVRAM_GetLastError+0x3c>
		{
			u16ErrorLogIdx1 = C_MAX_ERRORS_PER_PAGE;								/* First UserPage last time written full, and Second UserPage is full */
		}
		else if ( (u16ErrorLogIdx1 == 0xFF) && (u16ErrorLogIdx2 == 0) )				/* MMP140218-1 */
    9bc6:	2eda 00ff 	cmp	X, #255
    9bca:	1d03      	jne	0x9bd2 <_NVRAM_GetLastError+0x3e>
    9bcc:	7a03      	lod	Y, [S-4]
    9bce:	1d01      	jne	0x9bd2 <_NVRAM_GetLastError+0x3e>
		{
			u16ErrorLogIdx1 = C_MAX_ERRORS_PER_PAGE;								/* First UserPage last time written full, and Second UserPage is empty */
    9bd0:	7c0c      	lod	X, #12
		}																			/* MMP140218-1 */

		if ( (u16ErrorLogIdx1 & 0x80) == 0x00 )
    9bd2:	72ee      	lod	A, X
    9bd4:	8c00      	cmp	AL, #0
    9bd6:	1a89      	jsl	0x9bea <_NVRAM_GetLastError+0x56>
		{
			/* Get last error from User-Page #1 */
			u16ErrorLogIdx1--;
    9bd8:	20ff      	add	X, #-1
			{
				uint16 u16ErrorCodes = pNVERRLOG_UPG1->ErrorLog[u16ErrorLogIdx1 >> 1];
    9bda:	72ee      	lod	A, X
    9bdc:	b4fe      	and	A, #-2
    9bde:	7ae2      	lod	Y, A
    9be0:	e2da 1074 	add	Y, #4212
    9be4:	7af0      	lod	Y, [Y]
				if ( u16ErrorLogIdx1 & 0x01 )
    9be6:	72ee      	lod	A, X
    9be8:	000a      	jmp	0x9bfe <_NVRAM_GetLastError+0x6a>
			}
		}
		else
		{
			/* Get last error from User-Page #2 */
			u16ErrorLogIdx2--;
    9bea:	7a03      	lod	Y, [S-4]
    9bec:	e0ff      	add	Y, #-1
    9bee:	5a03      	mov	[S-4], Y
			{
				uint16 u16ErrorCodes = pNVERRLOG_UPG2->ErrorLog[u16ErrorLogIdx2 >> 1];
    9bf0:	72e6      	lod	A, Y
    9bf2:	b4fe      	and	A, #-2
    9bf4:	7ae2      	lod	Y, A
    9bf6:	e2da 1174 	add	Y, #4468
    9bfa:	7af0      	lod	Y, [Y]
				if ( u16ErrorLogIdx2 & 0x01 )
    9bfc:	7203      	lod	A, [S-4]
    9bfe:	b401      	and	A, #1
    9c00:	1903      	je	0x9c08 <_NVRAM_GetLastError+0x74>
				{
					u8Result = (uint8) (u16ErrorCodes >> 8);
    9c02:	6400      	lod	YL, #0
    9c04:	7ae8      	swap	Y
    9c06:	0001      	jmp	0x9c0a <_NVRAM_GetLastError+0x76>
				}
				else
				{
					u8Result = (uint8) u16ErrorCodes;
    9c08:	5cf6      	usex	Y
    9c0a:	5a01      	mov	[S-2], Y
			}
		}
	}
	return( u8Result );

} /* End of NVRAM_GetLastError() */
    9c0c:	7201      	lod	A, [S-2]
    9c0e:	5405      	ret	#6

00009c10 <_NVRAM_ClearErrorLog>:
 *	Comments: Clear Application Error logging (in both User-NVRAM pages)
 * ****************************************************************************	*/
void NVRAM_ClearErrorLog( void)
{
	uint16 i;
	PNVRAM_ERRORLOG pNVERRLOG_UPG = (PNVRAM_ERRORLOG) (C_ADDR_USERPAGE1 + sizeof(NVRAM_USER));
    9c10:	7ada 1070 	lod	Y, #4208
	pNVERRLOG_UPG->ErrorLogIndex_CRC = ((pNVERRLOG_UPG->ErrorLogIndex_CRC) & 0xFF00) | 0x00;	/* Set index at 0x00 */
    9c14:	72f2      	lod	A, [Y+2]
    9c16:	b6da ff00 	and	A, #65280
    9c1a:	52f2      	mov	[Y+2], A
    9c1c:	7ada 1074 	lod	Y, #4212
    9c20:	7c06      	lod	X, #6
	for ( i = 0; i < (C_MAX_ERRORS_PER_PAGE/2); i++ )
	{
		pNVERRLOG_UPG->ErrorLog[i] = 0x0000;
    9c22:	7000      	lod	A, #0
    9c24:	52d6      	mov	[Y++], A
    9c26:	1bfd      	djnz	X, 0x9c22 <_NVRAM_ClearErrorLog+0x12>
	}
	(void) NVRAM_CountCRC8( pNVERRLOG_UPG, TRUE);
    9c28:	54ca 0001 	pushw	#1
    9c2c:	72da 1070 	lod	A, #4208
    9c30:	159e      	call	0x976e <_NVRAM_CountCRC8>
	NVRAM_SavePage( NVRAM1_PAGE1);
    9c32:	7000      	lod	A, #0
    9c34:	82db 5a00 	callf	0x5a00 <_NVRAM_SavePage>

	pNVERRLOG_UPG = (PNVRAM_ERRORLOG) (C_ADDR_USERPAGE2 + sizeof(NVRAM_USER));
    9c38:	7ada 1170 	lod	Y, #4464
	pNVERRLOG_UPG->ErrorLogIndex_CRC = ((pNVERRLOG_UPG->ErrorLogIndex_CRC) & 0xFF00) | 0x00;	/* Set index at 0x00 */
    9c3c:	72f2      	lod	A, [Y+2]
    9c3e:	b6da ff00 	and	A, #65280
    9c42:	52f2      	mov	[Y+2], A
	for ( i = 0; i < (C_MAX_ERRORS_PER_PAGE/2); i++ )
    9c44:	5c01      	dec	S, #2
    9c46:	7ada 1174 	lod	Y, #4468
    9c4a:	7c06      	lod	X, #6
	{
		pNVERRLOG_UPG->ErrorLog[i] = 0x0000;
    9c4c:	7000      	lod	A, #0
    9c4e:	52d6      	mov	[Y++], A
    9c50:	1bfd      	djnz	X, 0x9c4c <_NVRAM_ClearErrorLog+0x3c>
	}
	(void) NVRAM_CountCRC8( pNVERRLOG_UPG, TRUE);
    9c52:	54ca 0001 	pushw	#1
    9c56:	72da 1170 	lod	A, #4464
    9c5a:	1589      	call	0x976e <_NVRAM_CountCRC8>
	NVRAM_SavePage( NVRAM2_PAGE1);
    9c5c:	7002      	lod	A, #2
    9c5e:	82db 5a00 	callf	0x5a00 <_NVRAM_SavePage>
    9c62:	5c01      	dec	S, #2
    9c64:	5401      	ret

00009c66 <_NVRAM_StorePatch>:
 * C_ADDR_PATCHPAGE+0x7A:0x7B:	PATCH3_A
 *
 * ****************************************************************************	*/
void NVRAM_StorePatch( void)
{
	NVRAM_SavePage( NVRAM1_PAGE2);
    9c66:	7001      	lod	A, #1
    9c68:	82db 5a00 	callf	0x5a00 <_NVRAM_SavePage>
	NVRAM_LoadUserPage();
    9c6c:	1634      	call	0x98d6 <_NVRAM_LoadUserPage>
    9c6e:	5401      	ret

00009c70 <_NVRAM_MlxCalibrationAreaCheck>:
 *	Post:	-
 * Comments: Check Melexis NVRAM-page gain-factors (non-zero)
 * ****************************************************************************	*/
void NVRAM_MlxCalibrationAreaCheck( void)
{
	if ( (EE_GLAA == 0) ||														/* Auto addressing gain calibration */
    9c70:	72d8 11d6 	lod	A, 0x11d6 <__ep__+0x1d6>
    9c74:	1913      	je	0x9c9c <_NVRAM_MlxCalibrationAreaCheck+0x2c>
    9c76:	72d8 11d8 	lod	A, 0x11d8 <__ep__+0x1d8>
    9c7a:	1910      	je	0x9c9c <_NVRAM_MlxCalibrationAreaCheck+0x2c>
    9c7c:	72d8 11d0 	lod	A, 0x11d0 <__ep__+0x1d0>
    9c80:	b6da 00ff 	and	A, #255
    9c84:	aeda ff00 	cmp	A, #65280
    9c88:	1909      	je	0x9c9c <_NVRAM_MlxCalibrationAreaCheck+0x2c>
    9c8a:	72d8 11ce 	lod	A, 0x11ce <__ep__+0x1ce>
    9c8e:	6000      	lod	AL, #0
    9c90:	72e4      	swap	A
    9c92:	1904      	je	0x9c9c <_NVRAM_MlxCalibrationAreaCheck+0x2c>
    9c94:	72d8 11ca 	lod	A, 0x11ca <__ep__+0x1ca>
    9c98:	8c00      	cmp	AL, #0
    9c9a:	1d04      	jne	0x9ca4 <_NVRAM_MlxCalibrationAreaCheck+0x34>
		 (EE_GDMCMAA == 0) ||													/* Common Mode Rejection factor */
		 (EE_GMCURR == 0) ||													/* CGAINCAL_FLT (Current sensor filter gain) */
		 (EE_GVOLTAGE == 0) ||													/* VGAINCAL (supply sensor filter gain) */
		 (EE_GTEMP == 0) )														/* Temperature Gain */
	{
		SetLastError( (uint8) C_ERR_NVRAM_MLX_CAL_GN);
    9c9c:	72da 00cf 	lod	A, #207
    9ca0:	82db 89f6 	callf	0x89f6 <_SetLastError>
    9ca4:	5401      	ret

00009ca6 <_PID_Init>:

/* ***
 * PID_Init()
 * ***/
void PID_Init( void)
{
    9ca6:	5813      	inc	S, #20
	/* MMP141209-1: Convert [mA] to [ADC-lsb] */
	uint16 u16MCurrgain = EE_GMCURR;
    9ca8:	72d8 11d0 	lod	A, 0x11d0 <__ep__+0x1d0>
    9cac:	b6da 00ff 	and	A, #255
    9cb0:	7ee2      	lod	X, A
    9cb2:	22da 0100 	add	X, #256
	g_u16PidHoldingThreshold = NVRAM_HOLDING_CURR_LEVEL;
    9cb6:	61a8      	lod	AL, dp:0xa8 <_g_NvramUser+0x4e>
    9cb8:	5cf2      	usex	A
    9cba:	52d8 0326 	mov	0x326 <_g_u16PidHoldingThreshold>, A
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    9cbe:	7ada 0080 	lod	Y, #128
    9cc2:	4821      	mulu	YA, A, Y
    9cc4:	4c63      	divu	YA, X
    9cc6:	4c63      	divu	YA, X
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    9cc8:	52d8 032a 	mov	0x32a <_g_u16PidHoldingThresholdADC>, A
	g_u16PidHoldingThresholdADC = muldivU16_U16byU16byU16( g_u16PidHoldingThreshold, C_GMCURR_DIV, u16MCurrgain);	/* MMP141209-1 */
	g_u16PidRunningThreshold = NVRAM_RUNNING_CURR_LEVEL;
    9ccc:	61a9      	lod	AL, dp:0xa9 <_g_NvramUser+0x4f>
    9cce:	4422      	asl	A
    9cd0:	b6da 01fe 	and	A, #510
    9cd4:	52d8 0322 	mov	0x322 <_g_u16PidRunningThreshold>, A
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    9cd8:	7ada 0080 	lod	Y, #128
    9cdc:	4821      	mulu	YA, A, Y
    9cde:	4c63      	divu	YA, X
    9ce0:	4c63      	divu	YA, X
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    9ce2:	52d8 0324 	mov	0x324 <_g_u16PidRunningThresholdADC>, A
	g_u16PidRunningThresholdADC = muldivU16_U16byU16byU16( g_u16PidRunningThreshold, C_GMCURR_DIV, u16MCurrgain);	/* MMP141209-1/MMP131219-1 */
	g_u16MotorRefVoltage = NVRAM_VSUP_REF;
    9ce6:	618b      	lod	AL, dp:0x8b <_g_NvramUser+0x31>
    9ce8:	5cf2      	usex	A
    9cea:	4872 0019 	muls	A, A, #25
    9cee:	4432      	lsr	A
    9cf0:	5205      	mov	[S-6], A
    9cf2:	52d8 0142 	mov	0x142 <_g_u16MotorRefVoltage>, A
    9cf6:	72d8 11ce 	lod	A, 0x11ce <__ep__+0x1ce>
    9cfa:	6000      	lod	AL, #0
    9cfc:	72e4      	swap	A
    9cfe:	5203      	mov	[S-4], A
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    9d00:	7040      	lod	A, #64
    9d02:	7a05      	lod	Y, [S-6]
    9d04:	7e03      	lod	X, [S-4]
    9d06:	4821      	mulu	YA, A, Y
    9d08:	4c63      	divu	YA, X
    9d0a:	4c63      	divu	YA, X
    9d0c:	5201      	mov	[S-2], A
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    9d0e:	72d8 11ce 	lod	A, 0x11ce <__ep__+0x1ce>
    9d12:	5ce2      	ssex	A
    9d14:	a201      	add	A, [S-2]
    9d16:	52d8 0140 	mov	0x140 <_l_u16MotorRefVoltageADC>, A
	l_u16MotorRefVoltageADC = muldivU16_U16byU16byU16( NVRAM_VSUP_REF, C_GVOLTAGE_DIV, EE_GVOLTAGE) + EE_OVOLTAGE;
#else  /* _SUPPORT_VSMFILTERED */
	l_u16MotorRefVoltageADC = muldivU16_U16byU16byU16( NVRAM_VSUP_REF, C_GVOLTAGE_DIV, EE_GADC) + EE_OADC;
#endif /* _SUPPORT_VSMFILTERED */

	l_u16MinCorrectionRatio = NVRAM_MIN_CORR_RATIO;								/* MMP150509-2 */
    9d1a:	61be      	lod	AL, dp:0xbe <__bss_dp_size+0xe>
    9d1c:	5cf2      	usex	A
    9d1e:	4812 0576 	muls	D, A, #1398
    9d22:	7aef      	lod	Y, S
    9d24:	e0f2      	add	Y, #-14
    9d26:	4c85      	mov	[Y], D
    9d28:	720d      	lod	A, [S-14]
    9d2a:	7a0b      	lod	Y, [S-12]
    9d2c:	48a3      	lsr	YA, #4
    9d2e:	52d8 032c 	mov	0x32c <_l_u16MinCorrectionRatio>, A
	l_u16MaxCorrectionRatio = NVRAM_MAX_CORR_RATIO;								/* MMP150509-2 */
    9d32:	61bf      	lod	AL, dp:0xbf <__bss_dp_size+0xf>
    9d34:	5cf2      	usex	A
    9d36:	a001      	add	A, #1
    9d38:	4812 0576 	muls	D, A, #1398
    9d3c:	7aef      	lod	Y, S
    9d3e:	e0f6      	add	Y, #-10
    9d40:	4c85      	mov	[Y], D
    9d42:	7209      	lod	A, [S-10]
    9d44:	7a07      	lod	Y, [S-8]
    9d46:	48a3      	lsr	YA, #4
    9d48:	52d8 032e 	mov	0x32e <_l_u16MaxCorrectionRatio>, A
    9d4c:	5415      	ret	#22

00009d4e <_VoltageCorrection>:
 *
 *	Compensate Motor PWM Duty Cycle for voltage changes
 * Performance: 7.5us @ 20Mz
 * ***/
void VoltageCorrection( void)
{
    9d4e:	5801      	inc	S, #2

#define ADC_SETTING (uint16)(((2U*PLL_freq)/(1000000U*2*CYCLES_PER_INSTR)) + 1)	/* 2us: 2us*PLL-freq/(10000000us/s * #cycles/instruction) */

static INLINE uint16 GetRawVsupplyMotor( void)
{
extern T_ADC_MOTORRUN_STEPPER4 volatile g_AdcMotorRunStepper4;					/* ADC results Stepper mode */
    9d50:	7ed8 025e 	lod	X, 0x25e <_g_AdcMotorRunStepper4+0x6>
	uint16 u16MotorVoltageADC = GetRawVsupplyMotor();
#if _DEBUG_VOLTAGE_COMPENSATION
	l_ai16MotorVolt[u16MotorVoltIdx] = g_i16MotorVoltage;
	u16MotorVoltIdx = (u16MotorVoltIdx + 1) & (SZ_MOTOR_VOLT_COMP - 1);
#endif /* _DEBUG_VOLTAGE_COMPENSATION */
	if ( (u16MotorVoltageADC > 0) && (l_u16MotorRefVoltageADC > 0) )
    9d54:	1920      	je	0x9d96 <_VoltageCorrection+0x48>
    9d56:	7ad8 0140 	lod	Y, 0x140 <_l_u16MotorRefVoltageADC>
    9d5a:	191d      	je	0x9d96 <_VoltageCorrection+0x48>
 *
 * Example:
 *   uint32 result = ((uint32) a) * b
 */
static __inline__ uint32 mulU32_U16byU16(uint16 a, uint16 b)
{
    9d5c:	72d8 0320 	lod	A, 0x320 <_g_u16PidCtrlRatio>
    uint32 result;

    __asm__ __volatile__ (
    9d60:	4801      	mulu	D, A, Y
static __inline__ uint16 divU16_U32byU16(uint32 a, uint16 b)
{
    uint16 result;
    uint16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    9d62:	4c80      	mov	YA, D
    9d64:	4c63      	divu	YA, X
    9d66:	4c63      	divu	YA, X
    9d68:	7ee2      	lod	X, A
	{
		/* Correct Motor PWM duty cycle instantly based on change of supply voltage */
		uint16 u16NewCorrectionRatio = divU16_U32byU16( mulU32_U16byU16( g_u16PidCtrlRatio, l_u16MotorRefVoltageADC), u16MotorVoltageADC);
		if ( g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING )
    9d6a:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    9d6c:	b401      	and	A, #1
    9d6e:	1909      	je	0x9d82 <_VoltageCorrection+0x34>
		{
			if ( u16NewCorrectionRatio < l_u16MinCorrectionRatio )
    9d70:	72d8 032c 	lod	A, 0x32c <_l_u16MinCorrectionRatio>
    9d74:	2ee2      	cmp	X, A
    9d76:	180c      	jc	0x9d90 <_VoltageCorrection+0x42>
			{
				/* Underflow */
				u16NewCorrectionRatio = l_u16MinCorrectionRatio;
			}
			else if ( u16NewCorrectionRatio > l_u16MaxPidCtrlRatio )
    9d78:	72d8 0328 	lod	A, 0x328 <_l_u16MaxPidCtrlRatio>
    9d7c:	2ee2      	cmp	X, A
    9d7e:	1a09      	jule	0x9d92 <_VoltageCorrection+0x44>
    9d80:	0007      	jmp	0x9d90 <_VoltageCorrection+0x42>
			{
				/* Overflow */
				u16NewCorrectionRatio = l_u16MaxPidCtrlRatio;
			}
		}
		else if ( u16NewCorrectionRatio < NVRAM_MIN_HOLDCORR_RATIO )
    9d82:	61bd      	lod	AL, dp:0xbd <__bss_dp_size+0xd>
    9d84:	5cf2      	usex	A
    9d86:	4832 0576 	muls	YA, A, #1398
    9d8a:	48a3      	lsr	YA, #4
    9d8c:	2ee2      	cmp	X, A
    9d8e:	1c01      	jnc	0x9d92 <_VoltageCorrection+0x44>
		{
			/* Underflow */
			u16NewCorrectionRatio = NVRAM_MIN_HOLDCORR_RATIO;
    9d90:	7ee2      	lod	X, A
		}
		g_u16CorrectionRatio = u16NewCorrectionRatio;
    9d92:	5d4e      	mov	dp:0x4e <_g_u16CorrectionRatio>, X
    9d94:	5403      	ret	#4
	}
	else
	{
		g_u16CorrectionRatio = g_u16PidCtrlRatio;
    9d96:	72d8 0320 	lod	A, 0x320 <_g_u16PidCtrlRatio>
    9d9a:	514e      	mov	dp:0x4e <_g_u16CorrectionRatio>, A
    9d9c:	5403      	ret	#4

00009d9e <_PID_Control>:
 *	DC: Motor PWM Duty Cycle; 
 *	Stepper: current-control;
 *	BEMF: speed-control
 * ***/
void PID_Control( void)
{
    9d9e:	5801      	inc	S, #2
	if ( ((g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING) != 0) ||
    9da0:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    9da2:	b401      	and	A, #1
    9da4:	1d07      	jne	0x9db4 <_PID_Control+0x16>
    9da6:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    9da8:	1901      	je	0x9dac <_PID_Control+0xe>
    9daa:	0095      	jmp	0x9ed6 <_PID_Control+0x138>
    9dac:	62d8 013e 	lod	AL, 0x13e <_g_u8MotorHoldingCurrState>
    9db0:	1d01      	jne	0x9db4 <_PID_Control+0x16>
    9db2:	0091      	jmp	0x9ed6 <_PID_Control+0x138>
			 ((g_e8MotorStatusMode == (uint8) C_MOTOR_STATUS_STOP) && (g_u8MotorHoldingCurrState != FALSE)) ) 	/* Stop-mode & holding-current required */
	{
		/* Running-mode and NOT stall-mode "B" */
		if ( (((g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING) != 0) &&
    9db4:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    9db6:	b401      	and	A, #1
    9db8:	1906      	je	0x9dc6 <_PID_Control+0x28>
    9dba:	61b7      	lod	AL, dp:0xb7 <__bss_dp_size+0x7>
    9dbc:	1904      	je	0x9dc6 <_PID_Control+0x28>
    9dbe:	5cf2      	usex	A
    9dc0:	aed8 0146 	cmp	A, 0x146 <_g_u16PID_CtrlCounter>
    9dc4:	1a0f      	jule	0x9de4 <_PID_Control+0x46>
    9dc6:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    9dc8:	1901      	je	0x9dcc <_PID_Control+0x2e>
    9dca:	007d      	jmp	0x9ec6 <_PID_Control+0x128>
    9dcc:	61b8      	lod	AL, dp:0xb8 <__bss_dp_size+0x8>
    9dce:	44a2      	asl	A, #2
    9dd0:	7ae2      	lod	Y, A
    9dd2:	f6da 03fc 	and	Y, #1020
    9dd6:	1d01      	jne	0x9dda <_PID_Control+0x3c>
    9dd8:	0076      	jmp	0x9ec6 <_PID_Control+0x128>
    9dda:	72d8 0146 	lod	A, 0x146 <_g_u16PID_CtrlCounter>
    9dde:	aee6      	cmp	A, Y
    9de0:	1c01      	jnc	0x9de4 <_PID_Control+0x46>
    9de2:	0071      	jmp	0x9ec6 <_PID_Control+0x128>
			int16 i16PID_Ipart;
			int16 i16PID_Ppart;
			uint16 u16PidCtrlRatio;

			/* Current Control */
			uint16 u16MotorCurrentLPFFraction = ((g_u16MotorCurrentLPFx64 + 32) >> 6);	/* MMP140911-1 */
    9de4:	7158      	lod	A, dp:0x58 <_g_u16MotorCurrentLPFx64>
    9de6:	7ae2      	lod	Y, A
    9de8:	e020      	add	Y, #32
    9dea:	44b6      	lsr	Y, #2
    9dec:	44b6      	lsr	Y, #2
    9dee:	44b6      	lsr	Y, #2
			if ( g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING )
    9df0:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    9df2:	b401      	and	A, #1
    9df4:	1909      	je	0x9e08 <_PID_Control+0x6a>
			{
				i16ControlError = (int16) (g_u16PidRunningThresholdADC - u16MotorCurrentLPFFraction);	/* MMP140911-1 */
    9df6:	72d8 0324 	lod	A, 0x324 <_g_u16PidRunningThresholdADC>
    9dfa:	7ee2      	lod	X, A
    9dfc:	2ae6      	sub	X, Y
				l_u16MaxPidCtrlRatio = l_u16MaxCorrectionRatio;
    9dfe:	72d8 032e 	lod	A, 0x32e <_l_u16MaxCorrectionRatio>
    9e02:	52d8 0328 	mov	0x328 <_l_u16MaxPidCtrlRatio>, A
    9e06:	0004      	jmp	0x9e10 <_PID_Control+0x72>
			}
			else
			{
				i16ControlError = (int16) (g_u16PidHoldingThresholdADC - u16MotorCurrentLPFFraction);	/* MMP140911-1 */
    9e08:	72d8 032a 	lod	A, 0x32a <_g_u16PidHoldingThresholdADC>
    9e0c:	7ee2      	lod	X, A
    9e0e:	2ae6      	sub	X, Y
    return result;
} /* End of divI16_I32byI16() */

static __inline__ int16 mulI16_I16byI16RndDiv64(int16 a, int16 b) __attribute__ ((always_inline));
static __inline__ int16 mulI16_I16byI16RndDiv64(int16 a, int16 b)
{
    9e10:	7aee      	lod	Y, X
    9e12:	ead8 0148 	sub	Y, 0x148 <_g_i16PID_E>
    9e16:	61bb      	lod	AL, dp:0xbb <__bss_dp_size+0xb>
    9e18:	5cf2      	usex	A
    int16 result;
    int16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    9e1a:	4831      	muls	YA, A, Y
    9e1c:	48b5      	asr	YA, #6
    9e1e:	b000      	adc	A, #0
    return result;
} /* End of divI16_I32byI16() */

static __inline__ int16 mulI16_I16byI16RndDiv64(int16 a, int16 b) __attribute__ ((always_inline));
static __inline__ int16 mulI16_I16byI16RndDiv64(int16 a, int16 b)
{
    9e20:	52d8 014a 	mov	0x14a <_g_i16PID_D>, A
			}

			/* Derivative-part */
			g_i16PID_D = mulI16_I16byI16RndDiv64( (i16ControlError - g_i16PID_E), NVRAM_PID_COEF_D);
			g_i16PID_E = i16ControlError;
    9e24:	5ed8 0148 	mov	0x148 <_g_i16PID_E>, X
    9e28:	61ba      	lod	AL, dp:0xba <__bss_dp_size+0xa>
    9e2a:	66e0      	lod	YL, AL
    9e2c:	5cf6      	usex	Y
    int16 result;
    int16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    9e2e:	72e6      	lod	A, Y
    9e30:	4833      	muls	YA, A, X
    9e32:	48b5      	asr	YA, #6
    9e34:	b000      	adc	A, #0
    9e36:	5201      	mov	[S-2], A
			/* Integral-part */
			i16PID_Ipart = mulI16_I16byI16RndDiv64( i16ControlError, NVRAM_PID_COEF_I);
			if ( (i16PID_Ipart < 0) && (g_u16PID_I < ((uint16) -i16PID_Ipart)) )
    9e38:	ac00      	cmp	A, #0
    9e3a:	1e86      	jsge	0x9e48 <_PID_Control+0xaa>
    9e3c:	7201      	lod	A, [S-2]
    9e3e:	5cc2      	neg	A
    9e40:	adca      	cmp	A, dp:0xca <_g_u16PID_I>
    9e42:	1a02      	jule	0x9e48 <_PID_Control+0xaa>
			{
				g_u16PID_I = 0;
    9e44:	7000      	lod	A, #0
    9e46:	0002      	jmp	0x9e4c <_PID_Control+0xae>
			}
			else
			{
				g_u16PID_I = (uint16) (g_u16PID_I + i16PID_Ipart);
    9e48:	71ca      	lod	A, dp:0xca <_g_u16PID_I>
    9e4a:	a201      	add	A, [S-2]
    9e4c:	51ca      	mov	dp:0xca <_g_u16PID_I>, A
    return result;
} /* End of divI16_I32byI16() */

static __inline__ int16 mulI16_I16byI16RndDiv64(int16 a, int16 b) __attribute__ ((always_inline));
static __inline__ int16 mulI16_I16byI16RndDiv64(int16 a, int16 b)
{
    9e4e:	61b9      	lod	AL, dp:0xb9 <__bss_dp_size+0x9>
    9e50:	66e0      	lod	YL, AL
    9e52:	5cf6      	usex	Y
    int16 result;
    int16 result2;    /* clobbering of the register */

    __asm__ __volatile__ (
    9e54:	72e6      	lod	A, Y
    9e56:	4833      	muls	YA, A, X
    9e58:	48b5      	asr	YA, #6
    9e5a:	b000      	adc	A, #0
    9e5c:	7ee2      	lod	X, A
			}
			/* Proportional-part */
			i16PID_Ppart = mulI16_I16byI16RndDiv64( i16ControlError, (int16) NVRAM_PID_COEF_P);
			if ( (i16PID_Ppart < 0) && (g_u16PID_I < ((uint16) -i16PID_Ppart)) )
    9e5e:	ac00      	cmp	A, #0
    9e60:	1e92      	jsge	0x9e86 <_PID_Control+0xe8>
    9e62:	5cc2      	neg	A
    9e64:	adca      	cmp	A, dp:0xca <_g_u16PID_I>
    9e66:	1a0f      	jule	0x9e86 <_PID_Control+0xe8>
			{
				if ( g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING )
    9e68:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    9e6a:	b401      	and	A, #1
    9e6c:	1903      	je	0x9e74 <_PID_Control+0xd6>
				{
					u16PidCtrlRatio = l_u16MinCorrectionRatio;
    9e6e:	7ed8 032c 	lod	X, 0x32c <_l_u16MinCorrectionRatio>
    9e72:	0006      	jmp	0x9e80 <_PID_Control+0xe2>
				}
				else
				{
					u16PidCtrlRatio = NVRAM_MIN_HOLDCORR_RATIO;
    9e74:	61bd      	lod	AL, dp:0xbd <__bss_dp_size+0xd>
    9e76:	5cf2      	usex	A
    9e78:	4832 0576 	muls	YA, A, #1398
    9e7c:	48a3      	lsr	YA, #4
    9e7e:	7ee2      	lod	X, A
				}
				g_u16PID_I = 0;
    9e80:	7000      	lod	A, #0
    9e82:	51ca      	mov	dp:0xca <_g_u16PID_I>, A
    9e84:	001b      	jmp	0x9ebc <_PID_Control+0x11e>
			}
			else
			{
				u16PidCtrlRatio = (uint16) (g_u16PID_I + i16PID_Ppart + g_i16PID_D);
    9e86:	71ca      	lod	A, dp:0xca <_g_u16PID_I>
    9e88:	a2ee      	add	A, X
    9e8a:	7ee2      	lod	X, A
    9e8c:	22d8 014a 	add	X, 0x14a <_g_i16PID_D>
				if ( g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING )
    9e90:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    9e92:	b401      	and	A, #1
    9e94:	190b      	je	0x9eac <_PID_Control+0x10e>
				{
					if ( u16PidCtrlRatio < l_u16MinCorrectionRatio )
    9e96:	72d8 032c 	lod	A, 0x32c <_l_u16MinCorrectionRatio>
    9e9a:	2ee2      	cmp	X, A
    9e9c:	180e      	jc	0x9eba <_PID_Control+0x11c>
					{
						/* Underflow */
						u16PidCtrlRatio = l_u16MinCorrectionRatio;
					}
					else if ( u16PidCtrlRatio >= l_u16MaxPidCtrlRatio )
    9e9e:	72d8 0328 	lod	A, 0x328 <_l_u16MaxPidCtrlRatio>
    9ea2:	2ee2      	cmp	X, A
    9ea4:	180b      	jc	0x9ebc <_PID_Control+0x11e>
					{
						/* Overflow */
						u16PidCtrlRatio = l_u16MaxPidCtrlRatio;
    9ea6:	7ee2      	lod	X, A
						g_u16PID_I = u16PidCtrlRatio;								/* MMP140617-1 */
    9ea8:	51ca      	mov	dp:0xca <_g_u16PID_I>, A
    9eaa:	0008      	jmp	0x9ebc <_PID_Control+0x11e>
					}
				}
				else if ( u16PidCtrlRatio < NVRAM_MIN_HOLDCORR_RATIO )
    9eac:	61bd      	lod	AL, dp:0xbd <__bss_dp_size+0xd>
    9eae:	5cf2      	usex	A
    9eb0:	4832 0576 	muls	YA, A, #1398
    9eb4:	48a3      	lsr	YA, #4
    9eb6:	2ee2      	cmp	X, A
    9eb8:	1c01      	jnc	0x9ebc <_PID_Control+0x11e>
				{
					/* Underflow */
					u16PidCtrlRatio = NVRAM_MIN_HOLDCORR_RATIO;
    9eba:	7ee2      	lod	X, A
				}
			}
			g_u16PidCtrlRatio = u16PidCtrlRatio;
    9ebc:	5ed8 0320 	mov	0x320 <_g_u16PidCtrlRatio>, X
			g_u16PID_CtrlCounter = 0;
    9ec0:	7000      	lod	A, #0
    9ec2:	52d8 0146 	mov	0x146 <_g_u16PID_CtrlCounter>, A
		}
		VoltageCorrection();
    9ec6:	1743      	call	0x9d4e <_VoltageCorrection>

		/* Update motor-driver PWM duty-cycle in case of holding-mode with coil-current */

		/* Stop-mode & holding-current required */
		if ( (g_e8MotorStatusMode == (uint8) C_MOTOR_STATUS_STOP) && (g_u8MotorHoldingCurrState != FALSE) )
    9ec8:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    9eca:	1d05      	jne	0x9ed6 <_PID_Control+0x138>
    9ecc:	62d8 013e 	lod	AL, 0x13e <_g_u8MotorHoldingCurrState>
    9ed0:	1902      	je	0x9ed6 <_PID_Control+0x138>
		{
			MotorDriver_4PhaseStepper();
    9ed2:	82db 9040 	callf	0x9040 <_MotorDriver_4PhaseStepper>
    9ed6:	5403      	ret	#4

00009ed8 <_ThresholdControl>:
 *	DC-Motor: Motor Power
 *	Stepper: Current Threshold Control
 *	BEMF: Nothing
 * ***/
void ThresholdControl( void)
{
    9ed8:	583b      	inc	S, #60
	if ( ((g_e8MotorStatusMode & (uint8) C_MOTOR_STATUS_RUNNING) == 0) && (g_u16PID_ThrshldCtrlCounter >= NVRAM_PID_THRSHLDCTRL_PER) )
    9eda:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    9edc:	66e0      	lod	YL, AL
    9ede:	f401      	and	Y, #1
    9ee0:	1901      	je	0x9ee4 <_ThresholdControl+0xc>
    9ee2:	0099      	jmp	0xa016 <_ThresholdControl+0x13e>
    9ee4:	69bc      	lod	AH, dp:0xbc <__bss_dp_size+0xc>
    9ee6:	6000      	lod	AL, #0
    9ee8:	4472      	asr	A
    9eea:	aed8 0144 	cmp	A, 0x144 <_g_u16PID_ThrshldCtrlCounter>
    9eee:	1a01      	jule	0x9ef2 <_ThresholdControl+0x1a>
    9ef0:	0092      	jmp	0xa016 <_ThresholdControl+0x13e>
	{
		uint16 u16CurrThrshldRatio;
		int16 i16TemperatureBgn = NVRAM_CURRTHRSHLD_TEMP_1;
    9ef2:	65ae      	lod	YL, dp:0xae <_g_NvramUser+0x54>
    9ef4:	5cf6      	usex	Y
    9ef6:	7ee6      	lod	X, Y
    9ef8:	e0c4      	add	Y, #-60
    9efa:	5a35      	mov	[S-54], Y
		uint16 u16CurrThrshldRatioBgn = NVRAM_CURRTHRSHLD_RATIO_1;
    9efc:	61af      	lod	AL, dp:0xaf <_g_NvramUser+0x55>
    9efe:	5cf2      	usex	A
    9f00:	5233      	mov	[S-52], A

		g_u16PID_ThrshldCtrlCounter = 0;
    9f02:	7800      	lod	Y, #0
    9f04:	5ad8 0144 	mov	0x144 <_g_u16PID_ThrshldCtrlCounter>, Y

#if _SUPPORT_AMBIENT_TEMP
		if ( g_i16AmbjTemperature < (i16TemperatureBgn - C_CURRTHRSHLD_TEMP_HYS) )
#else  /* _SUPPORT_AMBIENT_TEMP */
		if ( g_i16ChipTemperature < (i16TemperatureBgn - C_CURRTHRSHLD_TEMP_HYS) )
    9f08:	20c2      	add	X, #-62
    9f0a:	5e31      	mov	[S-50], X
    9f0c:	7d22      	lod	X, dp:0x22 <_g_i16ChipTemperature>
    9f0e:	61b6      	lod	AL, dp:0xb6 <__bss_dp_size+0x6>
    9f10:	4207      	mov	[S-8], AL
    9f12:	7ad8 0326 	lod	Y, 0x326 <_g_u16PidHoldingThreshold>
    9f16:	5a05      	mov	[S-6], Y
    9f18:	72d8 0322 	lod	A, 0x322 <_g_u16PidRunningThreshold>
    9f1c:	5203      	mov	[S-4], A
    9f1e:	2e31      	cmp	X, [S-50]
    9f20:	1e86      	jsge	0x9f2e <_ThresholdControl+0x56>
#endif /* _SUPPORT_AMBIENT_TEMP */
		{
			if ( NVRAM_CURRTHRSHLD_ZONE_1 != 0 )
    9f22:	6607      	lod	YL, [S-8]
    9f24:	f401      	and	Y, #1
    9f26:	1d01      	jne	0x9f2a <_ThresholdControl+0x52>
    9f28:	005f      	jmp	0x9fe8 <_ThresholdControl+0x110>
			{
				u16CurrThrshldRatio = u16CurrThrshldRatioBgn;					/* Same as point _1 */
    9f2a:	7233      	lod	A, [S-52]
    9f2c:	005b      	jmp	0x9fe4 <_ThresholdControl+0x10c>
				u16CurrThrshldRatio = 0;										/* Shutdown motor */
			}
		}
		else
		{
			uint8 u8CurrThrshldCtrlType = NVRAM_CURRTHRSHLD_ZONE_2;				/* Get current threshold compensation-type */
    9f2e:	6207      	lod	AL, [S-8]
    9f30:	4430      	lsr	AL
    9f32:	66e0      	lod	YL, AL
    9f34:	f403      	and	Y, #3
    9f36:	5a2d      	mov	[S-46], Y
			uint16 u16CurrThrshldRatioEnd = NVRAM_CURRTHRSHLD_RATIO_2;			/* Get zone end point (_2) */
    9f38:	65b1      	lod	YL, dp:0xb1 <__bss_dp_size+0x1>
    9f3a:	5cf6      	usex	Y
    9f3c:	5a29      	mov	[S-42], Y
			int16 i16TemperatureEnd = NVRAM_CURRTHRSHLD_TEMP_2;						
    9f3e:	65b0      	lod	YL, dp:0xb0 <__bss_dp_size>
    9f40:	5cf6      	usex	Y
    9f42:	7ee6      	lod	X, Y
    9f44:	20c4      	add	X, #-60
#if _SUPPORT_AMBIENT_TEMP
			if ( g_i16AmbjTemperature > i16TemperatureEnd )						/* Temperature above second zone ? */
#else  /* _SUPPORT_AMBIENT_TEMP */
			if ( g_i16ChipTemperature > i16TemperatureEnd )						/* Temperature above second zone ? */
    9f46:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    9f48:	aeee      	cmp	A, X
    9f4a:	1b2f      	jsle	0x9faa <_ThresholdControl+0xd2>
#endif /* _SUPPORT_AMBIENT_TEMP */
			{
				i16TemperatureBgn = i16TemperatureEnd;							/* Next zone; begin point (_2) */
    9f4c:	5e35      	mov	[S-54], X
				u16CurrThrshldRatioBgn = u16CurrThrshldRatioEnd;
    9f4e:	7a29      	lod	Y, [S-42]
    9f50:	5a33      	mov	[S-52], Y
				u8CurrThrshldCtrlType = NVRAM_CURRTHRSHLD_ZONE_3;
    9f52:	6207      	lod	AL, [S-8]
    9f54:	44b0      	lsr	AL, #2
    9f56:	4430      	lsr	AL
    9f58:	66e0      	lod	YL, AL
    9f5a:	f403      	and	Y, #3
    9f5c:	5a2d      	mov	[S-46], Y
				u16CurrThrshldRatioEnd = NVRAM_CURRTHRSHLD_RATIO_3;				/* Get zone end point (_3) */
    9f5e:	65b3      	lod	YL, dp:0xb3 <__bss_dp_size+0x3>
    9f60:	5cf6      	usex	Y
    9f62:	5a29      	mov	[S-42], Y
				i16TemperatureEnd = NVRAM_CURRTHRSHLD_TEMP_3;
    9f64:	65b2      	lod	YL, dp:0xb2 <__bss_dp_size+0x2>
    9f66:	5cf6      	usex	Y
    9f68:	7ee6      	lod	X, Y
    9f6a:	20c4      	add	X, #-60
#if _SUPPORT_AMBIENT_TEMP
				if ( g_i16AmbjTemperature > i16TemperatureEnd )					/* Temperature above third zone ? */
#else  /* _SUPPORT_AMBIENT_TEMP */
				if ( g_i16ChipTemperature > i16TemperatureEnd )					/* Temperature above third zone ? */
    9f6c:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    9f6e:	aeee      	cmp	A, X
    9f70:	1b1c      	jsle	0x9faa <_ThresholdControl+0xd2>
#endif /* _SUPPORT_AMBIENT_TEMP */
				{
					i16TemperatureBgn = i16TemperatureEnd;						/* Next zone; begin point (_3) */
    9f72:	5e35      	mov	[S-54], X
					u16CurrThrshldRatioBgn = u16CurrThrshldRatioEnd;
    9f74:	7a29      	lod	Y, [S-42]
    9f76:	5a33      	mov	[S-52], Y
					u8CurrThrshldCtrlType = NVRAM_CURRTHRSHLD_ZONE_4;
    9f78:	6207      	lod	AL, [S-8]
    9f7a:	44b0      	lsr	AL, #2
    9f7c:	44b0      	lsr	AL, #2
    9f7e:	4430      	lsr	AL
    9f80:	66e0      	lod	YL, AL
    9f82:	f403      	and	Y, #3
    9f84:	5a2d      	mov	[S-46], Y
					u16CurrThrshldRatioEnd = NVRAM_CURRTHRSHLD_RATIO_4;			/* Get zone end point (_3) */
    9f86:	65b5      	lod	YL, dp:0xb5 <__bss_dp_size+0x5>
    9f88:	5cf6      	usex	Y
    9f8a:	5a29      	mov	[S-42], Y
					i16TemperatureEnd = NVRAM_CURRTHRSHLD_TEMP_4;
    9f8c:	65b4      	lod	YL, dp:0xb4 <__bss_dp_size+0x4>
    9f8e:	5cf6      	usex	Y
    9f90:	7ee6      	lod	X, Y
    9f92:	20c4      	add	X, #-60
#if _SUPPORT_AMBIENT_TEMP
					if ( g_i16AmbjTemperature > i16TemperatureEnd )				/* Temperature above fourth zone ? */
#else  /* _SUPPORT_AMBIENT_TEMP */
					if ( g_i16ChipTemperature > i16TemperatureEnd )				/* Temperature above fourth zone ? */
    9f94:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    9f96:	aeee      	cmp	A, X
    9f98:	1b08      	jsle	0x9faa <_ThresholdControl+0xd2>
#endif /* _SUPPORT_AMBIENT_TEMP */
					{
						u8CurrThrshldCtrlType = NVRAM_CURRTHRSHLD_ZONE_5;
    9f9a:	6207      	lod	AL, [S-8]
    9f9c:	4440      	rl	AL
    9f9e:	9401      	and	AL, #1
    9fa0:	66e0      	lod	YL, AL
    9fa2:	5cf6      	usex	Y
    9fa4:	62e8      	lod	AL, YL
    9fa6:	5cf2      	usex	A
    9fa8:	522d      	mov	[S-46], A
					}
				}
			}
			if ( u8CurrThrshldCtrlType == 1 )
    9faa:	622d      	lod	AL, [S-46]
    9fac:	8c01      	cmp	AL, #1
    9fae:	1d02      	jne	0x9fb4 <_ThresholdControl+0xdc>
			{
				u16CurrThrshldRatio = u16CurrThrshldRatioBgn;
    9fb0:	7a33      	lod	Y, [S-52]
    9fb2:	001b      	jmp	0x9fea <_ThresholdControl+0x112>
			}
			else if ( u8CurrThrshldCtrlType == 2 )
    9fb4:	622d      	lod	AL, [S-46]
    9fb6:	8c02      	cmp	AL, #2
    9fb8:	1d02      	jne	0x9fbe <_ThresholdControl+0xe6>
			{
				u16CurrThrshldRatio = u16CurrThrshldRatioEnd;
    9fba:	7a29      	lod	Y, [S-42]
    9fbc:	0016      	jmp	0x9fea <_ThresholdControl+0x112>
			}
			else if ( u8CurrThrshldCtrlType == 3 )
    9fbe:	622d      	lod	AL, [S-46]
    9fc0:	8c03      	cmp	AL, #3
    9fc2:	1d12      	jne	0x9fe8 <_ThresholdControl+0x110>
			{
				i16TemperatureEnd = i16TemperatureEnd - i16TemperatureBgn;
    9fc4:	2a35      	sub	X, [S-54]
/*
 *	Multiplication
 */
static __inline__ int16 muldivI16_I16byI16byI16(int16 a, int16 b, int16 c) __attribute__ ((always_inline));
static __inline__ int16 muldivI16_I16byI16byI16(int16 a, int16 b, int16 c)
{
    9fc6:	7a29      	lod	Y, [S-42]
    9fc8:	ea33      	sub	Y, [S-52]
    9fca:	5a13      	mov	[S-20], Y
    9fcc:	7122      	lod	A, dp:0x22 <_g_i16ChipTemperature>
    9fce:	aa35      	sub	A, [S-54]
    9fd0:	5211      	mov	[S-18], A
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    9fd2:	7213      	lod	A, [S-20]
    9fd4:	7a11      	lod	Y, [S-18]
    9fd6:	4831      	muls	YA, A, Y
    9fd8:	4c73      	divs	YA, X
    9fda:	4c73      	divs	YA, X
    9fdc:	4c7b      	dadjs	YA, X
    9fde:	7ee2      	lod	X, A
/*
 *	Multiplication
 */
static __inline__ int16 muldivI16_I16byI16byI16(int16 a, int16 b, int16 c) __attribute__ ((always_inline));
static __inline__ int16 muldivI16_I16byI16byI16(int16 a, int16 b, int16 c)
{
    9fe0:	7233      	lod	A, [S-52]
    9fe2:	a2ee      	add	A, X
    9fe4:	5201      	mov	[S-2], A
    9fe6:	0002      	jmp	0x9fec <_ThresholdControl+0x114>
				u16CurrThrshldRatio = (uint16) (muldivI16_I16byI16byI16( ((int16) u16CurrThrshldRatioEnd - (int16) u16CurrThrshldRatioBgn), (g_i16ChipTemperature - i16TemperatureBgn), i16TemperatureEnd) + u16CurrThrshldRatioBgn);
#endif /* _SUPPORT_AMBIENT_TEMP */
			}
			else
			{
				u16CurrThrshldRatio = 0;										/* Shutdown motor */
    9fe8:	7800      	lod	Y, #0
    9fea:	5a01      	mov	[S-2], Y
			}
		}
		{
			uint16 u16MCurrgain = EE_GMCURR;
    9fec:	7ed8 11d0 	lod	X, 0x11d0 <__ep__+0x1d0>
    9ff0:	36da 00ff 	and	X, #255
    9ff4:	22da 0100 	add	X, #256
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    9ff8:	7205      	lod	A, [S-6]
    9ffa:	7a01      	lod	Y, [S-2]
    9ffc:	4821      	mulu	YA, A, Y
    9ffe:	4c63      	divu	YA, X
    a000:	4c63      	divu	YA, X
    a002:	520d      	mov	[S-14], A
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    a004:	52d8 032a 	mov	0x32a <_g_u16PidHoldingThresholdADC>, A
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    a008:	7203      	lod	A, [S-4]
    a00a:	7a01      	lod	Y, [S-2]
    a00c:	4821      	mulu	YA, A, Y
    a00e:	4c63      	divu	YA, X
    a010:	4c63      	divu	YA, X
    return result;
} /* End of muldivI16_I16byI16byI16() */

static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c) __attribute__ ((always_inline));
static __inline__ uint16 muldivU16_U16byU16byU16(uint16 a, uint16 b, uint16 c)
{
    a012:	52d8 0324 	mov	0x324 <_g_u16PidRunningThresholdADC>, A
    a016:	543d      	ret	#62

0000a018 <_Timer_Init>:
 *
 * Initialise the core timer (Mulan2-timer), at a periodic rate of 500us
 * ****************************************************************************	*/
void Timer_Init( void)
{
	TIMER = TMR_EN | CT_PERIODIC_RATE;											/* 500us timer */
    a018:	72da 81f4 	lod	A, #33268
    a01c:	5286      	mov	io:0x6 <_LinMess2>, A
	PRIO = (PRIO & ~(3 << 0)) | ((6 - 3) << 0);									/* Set CoreTimer priority to 6 (3..6) */
    a01e:	72d8 2004 	lod	A, 0x2004 <__ep__+0x1004>
    a022:	a403      	or	A, #3
    a024:	52d8 2004 	mov	0x2004 <__ep__+0x1004>, A
	PEND = CLR_TIMER_IT;
    a028:	7020      	lod	A, #32
    a02a:	52d8 2008 	mov	0x2008 <__ep__+0x1008>, A
	MASK |= EN_TIMER_IT;														/* Enable Timer interrupt */
    a02e:	72d8 2006 	lod	A, 0x2006 <__ep__+0x1006>
    a032:	a420      	or	A, #32
    a034:	52d8 2006 	mov	0x2006 <__ep__+0x1006>, A
    a038:	5401      	ret

0000a03a <_Timer_SleepCompensation>:
 * Timer_SleepCompensation()
 *
 * Compensate the various timer-counters for the sleep-period
 * ****************************************************************************	*/
void Timer_SleepCompensation( uint16 u16SleepPeriod)
{
    a03a:	5805      	inc	S, #6
    a03c:	5201      	mov	[S-2], A
    a03e:	7ada 0100 	lod	Y, #256
    a042:	7eda 36b0 	lod	X, #14000
    int16 result;  /*lint -e530 */
    int16 result2; /*lint -e529 */												/* clobbering of the register */

    __asm__ __volatile__ (
    a046:	4821      	mulu	YA, A, Y
    a048:	4c63      	divu	YA, X
    a04a:	4c63      	divu	YA, X
    a04c:	5205      	mov	[S-6], A
 */
static INLINE uint16 SYS_getCpuStatus (void)
{
    uint16 status;

    __asm__ __volatile__ (
    a04e:	72e3      	lod	A, M
    a050:	5203      	mov	[S-4], A
	u16SleepPeriod = muldivU16_U16byU16byU16( u16SleepPeriod, 256U, (uint16)(CT_PERIODIC_RATE*(PLL_freq/1000000U)));
	ATOMIC_CODE
    a052:	4407      	mov	R, #0
    a054:	500c      	call	fp0:0x60
    a056:	54f0      	mov	UPr, #0
    a058:	7009      	lod	A, #9
    a05a:	82db 5b68 	callf	0x5b68 <_ml_GetState>
    a05e:	acff      	cmp	A, #-1
    a060:	190d      	je	0xa07c <_Timer_SleepCompensation+0x42>
    a062:	62d8 0330 	lod	AL, 0x330 <_LinStatus>
    a066:	b401      	and	A, #1
    a068:	1909      	je	0xa07c <_Timer_SleepCompensation+0x42>
    a06a:	7000      	lod	A, #0
    a06c:	52d8 0110 	mov	0x110 <_g_u16Mlx4StateCheckCounter>, A
    a070:	42d8 011c 	mov	0x11c <_g_u8ErrorCommBusTimeout>, AL
    a074:	7008      	lod	A, #8
    a076:	82db 5b68 	callf	0x5b68 <_ml_GetState>
    a07a:	0005      	jmp	0xa086 <_Timer_SleepCompensation+0x4c>
    a07c:	72d8 0110 	lod	A, 0x110 <_g_u16Mlx4StateCheckCounter>
    a080:	a205      	add	A, [S-6]
    a082:	52d8 0110 	mov	0x110 <_g_u16Mlx4StateCheckCounter>, A
    a086:	72d8 0146 	lod	A, 0x146 <_g_u16PID_CtrlCounter>
    a08a:	a205      	add	A, [S-6]
    a08c:	52d8 0146 	mov	0x146 <_g_u16PID_CtrlCounter>, A
    a090:	72d8 0144 	lod	A, 0x144 <_g_u16PID_ThrshldCtrlCounter>
    a094:	a205      	add	A, [S-6]
    a096:	52d8 0144 	mov	0x144 <_g_u16PID_ThrshldCtrlCounter>, A
    a09a:	66d8 010c 	lod	YL, 0x10c <_g_u8MotorStartDelay>
    a09e:	62e8      	lod	AL, YL
    a0a0:	5cf2      	usex	A
    a0a2:	ae05      	cmp	A, [S-6]
    a0a4:	1a03      	jule	0xa0ac <_Timer_SleepCompensation+0x72>
    a0a6:	62e8      	lod	AL, YL
    a0a8:	8a05      	sub	AL, [S-6]
    a0aa:	0001      	jmp	0xa0ae <_Timer_SleepCompensation+0x74>
    a0ac:	6000      	lod	AL, #0
    a0ae:	42d8 010c 	mov	0x10c <_g_u8MotorStartDelay>, AL
    a0b2:	72d8 014c 	lod	A, 0x14c <_g_u16LinUVTimeCounter>
    a0b6:	1903      	je	0xa0be <_Timer_SleepCompensation+0x84>
    a0b8:	a205      	add	A, [S-6]
    a0ba:	52d8 014c 	mov	0x14c <_g_u16LinUVTimeCounter>, A
    a0be:	72d8 0104 	lod	A, 0x104 <_g_u16CalibPauseCounter>
    a0c2:	1907      	je	0xa0d2 <_Timer_SleepCompensation+0x98>
    a0c4:	ae05      	cmp	A, [S-6]
    a0c6:	1a02      	jule	0xa0cc <_Timer_SleepCompensation+0x92>
    a0c8:	aa05      	sub	A, [S-6]
    a0ca:	0001      	jmp	0xa0ce <_Timer_SleepCompensation+0x94>
    a0cc:	7000      	lod	A, #0
    a0ce:	52d8 0104 	mov	0x104 <_g_u16CalibPauseCounter>, A
/*
 * Set M register value
 */
static INLINE void SYS_setCpuStatus (uint16 status)
{
    __asm__ __volatile__ (
    a0d2:	7203      	lod	A, [S-4]
    a0d4:	52e3      	mov	M, A
    a0d6:	5407      	ret	#8

0000a0d8 <_TIMER_IT>:
 * TIMER_IT()
 *
 * Periodic Timer ISR
 * ****************************************************************************	*/
__interrupt__ void TIMER_IT(void) 
{
    a0d8:	52df      	push	A
	{
		g_u16Mlx4StateCheckCounter++;										/* State check counter */
	}
#endif /* _SUPPORT_LIN_BUS_ACTIVITY_CHECK && (__MLX_PLTF_VERSION_MAJOR__ == 3) */

	if ( g_u8MotorStopDelay != 0 )
    a0da:	6137      	lod	AL, dp:0x37 <_g_u8MotorStopDelay>
    a0dc:	1912      	je	0xa102 <_TIMER_IT+0x2a>
	{
		if ( (--g_u8MotorStopDelay == 0) && ((g_e8MotorStatusMode & (uint8) ~C_MOTOR_STATUS_DEGRADED) == (uint8) C_MOTOR_STATUS_STOP) )
    a0de:	80ff      	add	AL, #-1
    a0e0:	4137      	mov	dp:0x37 <_g_u8MotorStopDelay>, AL
    a0e2:	1d0f      	jne	0xa102 <_TIMER_IT+0x2a>
    a0e4:	61ed      	lod	AL, dp:0xed <_g_e8MotorStatusMode>
    a0e6:	b47f      	and	A, #127
    a0e8:	1d0c      	jne	0xa102 <_TIMER_IT+0x2a>
		{
			DRVCFG_DIS_UVWT();
    a0ea:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    a0ee:	b6da fe00 	and	A, #65024
    a0f2:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A
			DRVCFG_DIS();														/* MMP140903-1 */
    a0f6:	72d8 28c6 	lod	A, 0x28c6 <__io__+0xc6>
    a0fa:	a6da 0100 	or	A, #256
    a0fe:	52d8 28c6 	mov	0x28c6 <__io__+0xc6>, A
		}
	}

	if ( g_u8MotorStartDelay != 0 )
    a102:	62d8 010c 	lod	AL, 0x10c <_g_u8MotorStartDelay>
    a106:	1903      	je	0xa10e <_TIMER_IT+0x36>
	{
		g_u8MotorStartDelay--;
    a108:	80ff      	add	AL, #-1
    a10a:	42d8 010c 	mov	0x10c <_g_u8MotorStartDelay>, AL
	}

	g_u16PID_CtrlCounter++;														/* PID Current/Speed control */
    a10e:	72d8 0146 	lod	A, 0x146 <_g_u16PID_CtrlCounter>
    a112:	a001      	add	A, #1
    a114:	52d8 0146 	mov	0x146 <_g_u16PID_CtrlCounter>, A
	g_u16PID_ThrshldCtrlCounter++;												/* PID Threshold control */
    a118:	72d8 0144 	lod	A, 0x144 <_g_u16PID_ThrshldCtrlCounter>
    a11c:	a001      	add	A, #1
    a11e:	52d8 0144 	mov	0x144 <_g_u16PID_ThrshldCtrlCounter>, A
#if _SUPPORT_CHIP_TEMP_PROFILE
	g_u16TemperatureStabilityCounter++;
#endif /* _SUPPORT_CHIP_TEMP_PROFILE */

#if _SUPPORT_LIN_UV
	if ( g_u16LinUVTimeCounter != 0 )											/* MMP131216-1 - Begin */
    a122:	72d8 014c 	lod	A, 0x14c <_g_u16LinUVTimeCounter>
    a126:	1903      	je	0xa12e <_TIMER_IT+0x56>
	{
		g_u16LinUVTimeCounter++;
    a128:	a001      	add	A, #1
    a12a:	52d8 014c 	mov	0x14c <_g_u16LinUVTimeCounter>, A
	{
		u16DegradeDelay--;
	}
#endif /* (_SUPPORT_DEGRADE_DELAY != FALSE) && (LINPROT == LIN2X_ACT44) */		/* MMP150128-1 - End */

	if ( g_u16CalibPauseCounter != 0 )
    a12e:	72d8 0104 	lod	A, 0x104 <_g_u16CalibPauseCounter>
    a132:	1903      	je	0xa13a <_TIMER_IT+0x62>
		g_u16CalibPauseCounter--;
    a134:	a0ff      	add	A, #-1
    a136:	52d8 0104 	mov	0x104 <_g_u16CalibPauseCounter>, A
    a13a:	72cf      	pop	A
    a13c:	4407      	mov	R, #0
    a13e:	72cb      	pop	M
    a140:	5401      	ret

0000a142 <_SpiDebugInit>:
 *
 *	Comments:	Initialise SPI Interface.
 * ****************************************************************************	*/
void SpiDebugInit( void)
{
	SPI1_PCR  = SPI_CKEN;													/* Set the bit SPI_CKEN to 1 */
    a142:	6001      	lod	AL, #1
    a144:	42d8 289a 	mov	0x289a <__io__+0x9a>, AL
	SPI1_BRR  = ((PLL_freq / DEBUG_SPI_BAUDRATE) + 1);						/* 100, 200, 400, 800 or 1000 kBaud */
    a148:	701d      	lod	A, #29
    a14a:	52d8 289c 	mov	0x289c <__io__+0x9c>, A
	SPI1_CTRL = (SPI_FRSSOEN << 8) | (SPI_MSTRONLY << 8) | SPI_RFIE | SPI_TFIE | /* SPI_BYTEMOD | */ SPI_MSTR | SPI_EN | SPI_CKEN;	/* Mode 00 */
    a14e:	72da 0ad3 	lod	A, #2771
    a152:	52d8 289a 	mov	0x289a <__io__+0x9a>, A
 *
 *	Comments:	Send 16-bit SPI-data
 * ****************************************************************************	*/
static INLINE void SpiDebugWriteFirst( uint16 u16Data)
{
	SPI1_PSCR |= SPI_FRSSOEN;													/* Toggle Slave-Select */
    a156:	62d8 289b 	lod	AL, 0x289b <__io__+0x9b>
    a15a:	8408      	or	AL, #8
    a15c:	42d8 289b 	mov	0x289b <__io__+0x9b>, AL
	SPI1_PSCR &= ~SPI_FRSSOEN;
    a160:	62d8 289b 	lod	AL, 0x289b <__io__+0x9b>
    a164:	94f7      	and	AL, #-9
    a166:	42d8 289b 	mov	0x289b <__io__+0x9b>, AL
	SPI1_DR = u16Data;															/* Send SPI-Data */
    a16a:	72da a55a 	lod	A, #42330
    a16e:	52d8 289e 	mov	0x289e <__io__+0x9e>, A
    a172:	5401      	ret

0000a174 <_au16HaltZero>:
    a174:	0000 0000                                   ....

0000a178 <_tMlxDbgSupport>:
    a178:	fffe 0007 0000 0000 0000 0000 0000 0000     ................
    a188:	0000 0000 d0ff 0000 ff87 c0ff 0001 7d07     ...............}

0000a198 <_au16AnaOutRegs>:
    a198:	201c 201e 2020 204a 204c 204e 28cc 28ce     . .   J L N .(.(

0000a1a8 <_tAdcSelfTest4B>:
    a1a8:	0103 0953 0903 0a53 0a03 0b53 0b03 1953     ..S...S...S...S.
    a1b8:	1903 0d53 0003 ffff                         ..S.....

0000a1c0 <_tAdcSelfTest4A>:
    a1c0:	0103 0953 0903 0a53 0a03 0b53 0b03 1953     ..S...S...S...S.
    a1d0:	1903 0053 0d03 ffff                         ..S.....

0000a1d8 <_SBASE_INIT_4PH>:
    a1d8:	0143 0053 0d63 0473 0d03 ffff               C.S.c.s.....

0000a1e4 <_SBASE_CURRENT>:
    a1e4:	0d03 ffff                                   ....

0000a1e8 <_SBASE_MOTORVOLT>:
    a1e8:	0403 ffff                                   ....

0000a1ec <_SBASE_SUPPLYVOLT>:
    a1ec:	0003 ffff                                   ....

0000a1f0 <_SBASE_TEMP>:
    a1f0:	0103 ffff                                   ....

0000a1f4 <_SBASE_CURROFF>:
    a1f4:	0d03 ffff                                   ....

0000a1f8 <_SBASE_VREF_OFF>:
    a1f8:	0100 ffff                                   ....

0000a1fc <_c_ai16MicroStepVector4PH>:
    a1fc:	0649 12cd 1f23 2b2c 36ca 41e1 4c56 560f     I...#.,+.6.AVL.V
    a20c:	5ef4 66ee 6deb 73d8 78a8 7c4f 7ec3 7ffe     .^.f.m.s.xO|.~..
    a21c:	7ffe 7ec3 7c4f 78a8 73d8 6deb 66ee 5ef4     ...~O|.x.s.m.f.^
    a22c:	560f 4c56 41e1 36ca 2b2c 1f23 12cd 0649     .VVL.A.6,+#...I.
    a23c:	f9b7 ed33 e0dd d4d4 c936 be1f b3aa a9f1     ..3.....6.......
    a24c:	a10c 9912 9215 8c28 8758 83b1 813d 8002     ......(.X...=...
    a25c:	8002 813d 83b1 8758 8c28 9215 9912 a10c     ..=...X.(.......
    a26c:	a9f1 b3aa be1f c936 d4d4 e0dd ed33 f9b7     ......6.....3...
    a27c:	0649 12cd 1f23 2b2c 36ca 41e1 4c56 560f     I...#.,+.6.AVL.V
    a28c:	5ef4 66ee 6deb 73d8 78a8 7c4f 7ec3 7ffe     .^.f.m.s.xO|.~..

0000a29c <_c_au8DrvCfgSelfTestB4>:
    a29c:	c431 8421 4c13 4812 b5f5                    1.!..L.H..

0000a2a6 <_c_au16DrvAdcSelfTestA>:
    a2a6:	0b03 ffff 0a03 ffff 0903 ffff 1903 ffff     ................

0000a2b6 <_c_au8DrvCfgSelfTestA>:
    a2b6:	3020 0c08 0302 c080                          0......

0000a2be <_defNvramUser>:
    a2be:	0100 b06c 8881 0000 5467 0000 ffff 2dc0     ..l.....gT.....-
    a2ce:	321e 0138 0a0a 00b0 0124 ffff 0000 3000     .28.....$......0
    a2de:	0000 0000 0000 0000 0000 0000 0000 0000     ................
    a2ee:	6c40 b001 0060 004b 004b 004b 004b 0000     @l..`.K.K.K.K...
    a2fe:	0000 0000 0000 004b 05dc 1201 1791 963c     ......K.......<.
    a30e:	a514 9040 821a 8044 8062 8f7a 0aef 3219     ..@...D.b.z....2
    a31e:	1e1e 1a10 fa1a 0000 0000 004b 0210 5840     ..........K...@X
    a32e:	0600 00b2 7fff ffff                         ........
