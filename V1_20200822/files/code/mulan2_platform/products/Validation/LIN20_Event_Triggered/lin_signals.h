/*
 * LIN Core API
 * Signal Interaction and Notification
 *
 * This file is application specific and depends on LDF/NCF files
 * Generated by configuration tool C:\EVWS\_LIBRARY_PLATFORMS\library_platform_mulan2\bin\ldf_nodegen.exe (version 1.4.0)
 *
 * Copyright (C) 2007-2015 Melexis N.V.
 */

#ifndef LIN_SIGNALS_H_
#define LIN_SIGNALS_H_

#if defined(HAS_EVENT_TRIGGERED_FRAMES)
/*
 * Indices of node's event-triggered frames
 */
enum {
	doorAll_feedback_idx	= 2U
};

/*
 * List of associated unconditional frames
 */
enum {
	doorFrontLeft_feedback_data_idx	= doorAll_feedback_idx
};
#endif  /* HAS_EVENT_TRIGGERED_FRAMES */

#define ATTR_PACKED   __attribute__ ((packed))

/*
 * Bit-field stuctures define signals layout for every frame
 * Type of the bit-field shall be selected according to
 * the size of the signal:
 *
 *   Type     Signal size
 *              (bits)
 * -------------------------------------------
 *   l_u8        1.. 8
 *   l_u16       9..16
 *   l_u32      17..32  (used only for gaps)
 *   l_u64      33..64  (used only for gaps)
 */

/*
 * Frame doorFrontLeft_status
 */
typedef struct ATTR_PACKED {
    l_u8	doorFrontLeft_respError	: 1;
    l_u8	unused1_0	: 7;
    l_u8	unused8_0	: 8;
} doorFrontLeft_status_data_t;

typedef struct ATTR_PACKED {
    l_u8	doorFrontLeft_respError	: 1;
    l_u8	frm_doorFrontLeft_status	: 1;
    l_u8	unused	: 6;
} doorFrontLeft_status_flags_t;

extern doorFrontLeft_status_data_t	volatile doorFrontLeft_status_data;
extern doorFrontLeft_status_flags_t	volatile doorFrontLeft_status_flags;

/*
 * Frame doorFrontLeft_feedback
 */
typedef struct ATTR_PACKED {
    l_u8	unused0_0	: 8;
    l_u8	doorFrontLeft_brightFeedback	: 8;
    l_u8	unused16_0	: 8;
    l_u8	unused24_0	: 8;
} doorFrontLeft_feedback_data_t;

typedef struct ATTR_PACKED {
    l_u8	doorFrontLeft_brightFeedback	: 1;
    l_u8	frm_doorFrontLeft_feedback	: 1;
    l_u8	unused	: 6;
} doorFrontLeft_feedback_flags_t;

extern doorFrontLeft_feedback_data_t	volatile doorFrontLeft_feedback_data;
extern doorFrontLeft_feedback_flags_t	volatile doorFrontLeft_feedback_flags;

/*
 * Frame doorFrontLeft_setBackLight
 */
typedef struct ATTR_PACKED {
    l_u8	doorFrontLeft_brightLevel	: 8;
    l_u8	doorFrontLeft_timeout	: 8;
} doorFrontLeft_setBackLight_data_t;

typedef struct ATTR_PACKED {
    l_u8	doorFrontLeft_brightLevel	: 1;
    l_u8	doorFrontLeft_timeout	: 1;
    l_u8	frm_doorFrontLeft_setBackLight	: 1;
    l_u8	unused	: 5;
} doorFrontLeft_setBackLight_flags_t;

extern doorFrontLeft_setBackLight_data_t	volatile doorFrontLeft_setBackLight_data;
extern doorFrontLeft_setBackLight_flags_t	volatile doorFrontLeft_setBackLight_flags;

/*===========================================================*/
typedef enum ATTR_PACKED {
    ML_EVENT_TRIGGERED,
    ML_UNCOND_ASSOCIATED,
    ML_UNCOND_FREE
} Frame_type;

ASSERT(sizeof(Frame_type) == 1);

/*
 *  Frame Description Block
 */
typedef struct {
    void volatile *dataBuffer;      /* pointer to the data buffer */
    void volatile *flagsBuffer;     /* pointer to the Flag buffer */
    l_u16  dataBufferSize;          /* size of the data buffer */
    l_u8   flagsBufferSize;         /* size of the flag buffer */
    Frame_type   frame_type;        /* type of the frame */
} FrameDescBlock_type;

ASSERT(sizeof(FrameDescBlock_type) == 8);

extern const FrameDescBlock_type frame_list[ML_NUMBER_OF_DYNAMIC_MESSAGES];

#if LIN_VERSION == 20
extern const l_u16 MID_list[ML_NUMBER_OF_DYNAMIC_MESSAGES]; /* LIN2.0 */
#endif /* LIN_VERSION == 20 */

#if defined(HAS_EVENT_TRIGGERED_FRAMES)
extern const l_u8 associatedFrames[ML_NUMBER_OF_DYNAMIC_MESSAGES];
extern volatile l_u16 frame_updated;
#endif /* HAS_EVENT_TRIGGERED_FRAMES */


/*
 *  Template to generate read signal functions 
 */
#define L_SIG_RD(sigType, frameName, sigName) \
    static INLINE sigType sigType##_rd_##sigName(void);\
    static INLINE sigType sigType##_rd_##sigName(void) \
    {                                                  \
        l_irqmask m;                                   \
        sigType s;                                     \
                                                       \
        m = l_sys_irq_disable();                       \
        s = frameName.sigName;                         \
        l_sys_irq_restore (m);                         \
                                                       \
        return s;                                      \
    }

/*
 *  Template to generate write signal functions
 */
#define L_SIG_WR(sigType, frameName, sigName) \
    static INLINE void sigType##_wr_##sigName(sigType v);\
    static INLINE void sigType##_wr_##sigName(sigType v) \
    {                                                    \
        l_irqmask m;                                     \
                                                         \
        m = l_sys_irq_disable();                         \
        frameName.sigName = v;                           \
        l_sys_irq_restore (m);                           \
    }

/*
 *  Template to generate 'l_flg_tst' and
 *  'l_flg_clr' functions
 */
#define L_FLAGS(bufName, flagName) \
    static INLINE l_bool l_flg_tst_##flagName(void);\
    static INLINE l_bool l_flg_tst_##flagName(void) \
    {                                               \
        l_irqmask m;                                \
        l_bool s;                                   \
                                                    \
        m = l_sys_irq_disable();                    \
        s = bufName.flagName;                       \
        l_sys_irq_restore (m);                      \
                                                    \
        return s;                                   \
    }                                               \
                                                    \
    static INLINE void l_flg_clr_##flagName(void);  \
    static INLINE void l_flg_clr_##flagName(void)   \
    {                                               \
        l_irqmask m;                                \
                                                    \
        m = l_sys_irq_disable();                    \
        bufName.flagName = 0U;                      \
        l_sys_irq_restore (m);                      \
    }

/*
 *  Template to generate 'l_bytes_rd_sss' functions
 */
#define L_BYTES_RD(frameName, sigName) \
    static INLINE void l_bytes_rd_##sigName (l_u8 start, l_u8 count, l_u8 *const data);\
    static INLINE void l_bytes_rd_##sigName (l_u8 start, l_u8 count, l_u8 *const data) \
    {                                               \
        l_irqmask m;                                \
        l_u8 volatile *src;                         \
        l_u8 *dest;                                 \
                                                    \
        m = l_sys_irq_disable();                    \
        src  = &frameName.sigName[start];           \
        dest = data;                                \
        while (count-- != 0U) {                     \
            *dest++ = *src++;                       \
        }                                           \
        l_sys_irq_restore (m);                      \
    }

/*
 *  Template to generate 'l_bytes_wr_sss' functions
 */
#define L_BYTES_WR(frameName, sigName) \
    static INLINE void l_bytes_wr_##sigName (l_u8 start, l_u8 count, l_u8 const *const data);\
    static INLINE void l_bytes_wr_##sigName (l_u8 start, l_u8 count, l_u8 const *const data) \
    {                                               \
        l_irqmask m;                                \
        l_u8 const *src;                            \
        l_u8 volatile *dest;                        \
                                                    \
        m = l_sys_irq_disable();                    \
        src  = data;                                \
        dest = &frameName.sigName[start];           \
        while (count-- != 0U) {                     \
            *dest++ = *src++;                       \
        }                                           \
        l_sys_irq_restore (m);                      \
    }

#if defined(HAS_EVENT_TRIGGERED_FRAMES)
/*
 * Template to generate write signal functions
 * for event-triggered frames (ETF)
 */
#define L_SIG_WR_ETF(sigType, frameName, sigName) \
    static INLINE void sigType##_wr_##sigName(sigType v);\
    static INLINE void sigType##_wr_##sigName(sigType v) \
    {                                               \
        l_irqmask m;                                \
                                                    \
        m = l_sys_irq_disable();                    \
        frameName.sigName = v;                      \
        frame_updated |= (1U << frameName##_idx);   \
        l_sys_irq_restore (m);                      \
    }

/*
 * Template to generate 'l_bytes_wr_sss' functions
 * for event-triggered frames (ETF)
 */
#define L_BYTES_WR_ETF(frameName, sigName) \
    static INLINE void l_bytes_wr_##sigName (l_u8 start, l_u8 count, l_u8 const *const data);\
    static INLINE void l_bytes_wr_##sigName (l_u8 start, l_u8 count, l_u8 const *const data) \
    {                                               \
        l_irqmask m;                                \
        l_u8 const *src;                            \
        l_u8 volatile *dest;                        \
                                                    \
        m = l_sys_irq_disable();                    \
        src  = data;                                \
        dest = &frameName.sigName[start];           \
        while (count-- != 0U) {                     \
            *dest++ = *src++;                       \
        }                                           \
        frame_updated |= (1U << frameName##_idx);   \
        l_sys_irq_restore (m);                      \
    }
#endif /* HAS_EVENT_TRIGGERED_FRAMES */

/*
 * Define API functions using templates
 */

/* frame doorFrontLeft_status */
L_SIG_WR(l_bool, doorFrontLeft_status_data, doorFrontLeft_respError)

L_FLAGS(doorFrontLeft_status_flags, doorFrontLeft_respError)
L_FLAGS(doorFrontLeft_status_flags, frm_doorFrontLeft_status)

/* frame doorFrontLeft_feedback */
L_SIG_WR_ETF(l_u8, doorFrontLeft_feedback_data, doorFrontLeft_brightFeedback)

L_FLAGS(doorFrontLeft_feedback_flags, doorFrontLeft_brightFeedback)
L_FLAGS(doorFrontLeft_feedback_flags, frm_doorFrontLeft_feedback)

/* frame doorFrontLeft_setBackLight */
L_SIG_RD(l_u8, doorFrontLeft_setBackLight_data, doorFrontLeft_brightLevel)
L_SIG_RD(l_u8, doorFrontLeft_setBackLight_data, doorFrontLeft_timeout)

L_FLAGS(doorFrontLeft_setBackLight_flags, doorFrontLeft_brightLevel)
L_FLAGS(doorFrontLeft_setBackLight_flags, doorFrontLeft_timeout)
L_FLAGS(doorFrontLeft_setBackLight_flags, frm_doorFrontLeft_setBackLight)


#endif /* LIN_SIGNALS_H_ */
