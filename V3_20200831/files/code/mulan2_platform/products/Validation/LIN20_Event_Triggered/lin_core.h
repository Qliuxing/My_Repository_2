/*
 * LIN Core API
 * Signal Interaction and Notification
 *
 * This file is application specific and depends on LDF/NCF files
 * Generated by configuration tool C:\EVWS\_LIBRARY_PLATFORMS\library_platform_mulan2\bin\ldf_nodegen.exe (version 1.4.0)
 *
 * Copyright (C) 2007-2015 Melexis N.V.
 */

#ifndef LIN_CORE_H_
#define LIN_CORE_H_

#if LIN_VERSION >= 20
/*
 * l_ifc_read_status() return values
 */
#define ML_IFC_ERROR_IN_RESPONSE        ((uint8_t)(1U << 0))
#define ML_IFC_SUCCESSFUL_TRANSFER      ((uint8_t)(1U << 1))
#define ML_IFC_OVERRUN                  ((uint8_t)(1U << 2))
#define ML_IFC_GOTO_SLEEP               ((uint8_t)(1U << 3))
#define ML_IFC_BUS_ACTIVITY             ((uint8_t)(1U << 4))
#define ML_IFC_EVENT_TRIG_COLLISION     ((uint8_t)(1U << 5))
#define ML_IFC_SAVE_CONFIGURATION       ((uint8_t)(1U << 6))
#endif /* LIN_VERSION >= 20 */


/*
 * LIN Core target specific types
 */
typedef unsigned char l_bool;
typedef unsigned int  l_irqmask;  /* 16bit to avoid "usex" on return value */
typedef unsigned char l_u8;
typedef unsigned int  l_u16;
typedef unsigned long l_u32;
typedef unsigned long long l_u64;


/*
 *  Function prototypes
 */
extern l_bool      l_sys_init (void);

#if (LIN_VERSION == 20) || (LIN_VERSION == 13)
extern void        l_ifc_init_i1 (void);
#elif LIN_VERSION >= 21
extern l_bool      l_ifc_init_i1 (void);
#else
#error "LIN_VERSION not supported"
#endif /* LIN_VERSION */

extern l_irqmask   l_sys_irq_disable (void);
extern void        l_sys_irq_restore (l_irqmask previous);

#if (LIN_VERSION == 20) || (LIN_VERSION == 13)
static INLINE   l_bool  l_ifc_connect_i1 (void);
static INLINE   l_bool  l_ifc_disconnect_i1 (void);
#endif /* LIN_VERSION == 20 || LIN_VERSION == 13 */

#if LIN_VERSION >= 20
static INLINE   void    l_ifc_wake_up_i1 (void);    
extern l_u16 l_ifc_read_status_i1 (void);

/* Non API functions */
extern void l_ifc_write_status_flags_i1 (l_u8 flags);
extern void l_ifc_write_status_pid_i1 (l_u8 pid);
#endif /* LIN_VERSION >= 20 */

extern void l_ifc_sleep_entered_callout (ml_StateReason Reason);


#if (LIN_VERSION == 20) || (LIN_VERSION == 13)
/*
 *****************************************************************************
 * l_ifc_connect_i1
 *
 * Connects the interface i1 to the LIN cluster and enables the transmission
 * of the data
 *
 * Returns: Zero if the "connect operation" was successful and
 *          non-zero if the "connect operation" failed
 *****************************************************************************
 */
static INLINE l_bool l_ifc_connect_i1 (void)
{
    return (l_bool)ml_Connect();
}

/*
 *****************************************************************************
 * l_ifc_disconnect_i1
 *
 * Disconnects the interface i1 from the LIN cluster and thus disables the
 * interaction with the other nodes in the cluster.
 *
 * Returns: Zero if the "disconnect operation" was successful and
 *          non-zero if the "disconnect operation" failed
 *****************************************************************************
 */
static INLINE l_bool l_ifc_disconnect_i1 (void)
{
    return (l_bool)ml_Disconnect();
}
#endif /* (LIN_VERSION == 20) || (LIN_VERSION == 13) */

#if LIN_VERSION >= 20
/*
 *****************************************************************************
 * l_ifc_wake_up_i1
 *
 * The function will start the transmission of wake up sequence
 * If there is no activity for 1.5 seconds after the third pulse, the LIN Module
 * enters the SLEEP state with the ml_reasonWakeupAbort cause parameter
 *
 * Returns: None
 *****************************************************************************
 */
static INLINE void l_ifc_wake_up_i1 (void)
{
    (void)ml_WakeUp();
}
#endif /* LIN_VERSION >= 20 */


#endif /* LIN_CORE_H_ */
